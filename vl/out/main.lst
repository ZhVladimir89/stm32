
out/main.elf:     file format elf32-littlearm


Disassembly of section .text:

080001dc <__do_global_dtors_aux>:
 80001dc:	b510      	push	{r4, lr}
 80001de:	4c05      	ldr	r4, [pc, #20]	; (80001f4 <__do_global_dtors_aux+0x18>)
 80001e0:	7823      	ldrb	r3, [r4, #0]
 80001e2:	b933      	cbnz	r3, 80001f2 <__do_global_dtors_aux+0x16>
 80001e4:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x1c>)
 80001e6:	b113      	cbz	r3, 80001ee <__do_global_dtors_aux+0x12>
 80001e8:	4804      	ldr	r0, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x20>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	2301      	movs	r3, #1
 80001f0:	7023      	strb	r3, [r4, #0]
 80001f2:	bd10      	pop	{r4, pc}
 80001f4:	20000b6c 	.word	0x20000b6c
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001d0 	.word	0x200001d0

08000200 <frame_dummy>:
 8000200:	b508      	push	{r3, lr}
 8000202:	4b06      	ldr	r3, [pc, #24]	; (800021c <frame_dummy+0x1c>)
 8000204:	b11b      	cbz	r3, 800020e <frame_dummy+0xe>
 8000206:	4806      	ldr	r0, [pc, #24]	; (8000220 <frame_dummy+0x20>)
 8000208:	4906      	ldr	r1, [pc, #24]	; (8000224 <frame_dummy+0x24>)
 800020a:	f3af 8000 	nop.w
 800020e:	4806      	ldr	r0, [pc, #24]	; (8000228 <frame_dummy+0x28>)
 8000210:	6803      	ldr	r3, [r0, #0]
 8000212:	b113      	cbz	r3, 800021a <frame_dummy+0x1a>
 8000214:	4b05      	ldr	r3, [pc, #20]	; (800022c <frame_dummy+0x2c>)
 8000216:	b103      	cbz	r3, 800021a <frame_dummy+0x1a>
 8000218:	4798      	blx	r3
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d0 	.word	0x200001d0
 8000224:	20000b70 	.word	0x20000b70
 8000228:	20000b64 	.word	0x20000b64
 800022c:	00000000 	.word	0x00000000

08000230 <_mainCRTStartup>:
 8000230:	2016      	movs	r0, #22
 8000232:	a12e      	add	r1, pc, #184	; (adr r1, 80002ec <_mainCRTStartup+0xbc>)
 8000234:	beab      	bkpt	0x00ab
 8000236:	482d      	ldr	r0, [pc, #180]	; (80002ec <_mainCRTStartup+0xbc>)
 8000238:	6801      	ldr	r1, [r0, #0]
 800023a:	2900      	cmp	r1, #0
 800023c:	d101      	bne.n	8000242 <_mainCRTStartup+0x12>
 800023e:	4932      	ldr	r1, [pc, #200]	; (8000308 <_mainCRTStartup+0xd8>)
 8000240:	6001      	str	r1, [r0, #0]
 8000242:	6881      	ldr	r1, [r0, #8]
 8000244:	68c2      	ldr	r2, [r0, #12]
 8000246:	2900      	cmp	r1, #0
 8000248:	d000      	beq.n	800024c <_mainCRTStartup+0x1c>
 800024a:	468d      	mov	sp, r1
 800024c:	2a00      	cmp	r2, #0
 800024e:	d001      	beq.n	8000254 <_mainCRTStartup+0x24>
 8000250:	f502 7a80 	add.w	sl, r2, #256	; 0x100
 8000254:	2100      	movs	r1, #0
 8000256:	468b      	mov	fp, r1
 8000258:	460f      	mov	r7, r1
 800025a:	4825      	ldr	r0, [pc, #148]	; (80002f0 <_mainCRTStartup+0xc0>)
 800025c:	4a25      	ldr	r2, [pc, #148]	; (80002f4 <_mainCRTStartup+0xc4>)
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	f003 fa56 	bl	8003710 <memset>
 8000264:	f003 fbbc 	bl	80039e0 <initialise_monitor_handles>
 8000268:	2015      	movs	r0, #21
 800026a:	a125      	add	r1, pc, #148	; (adr r1, 8000300 <_mainCRTStartup+0xd0>)
 800026c:	beab      	bkpt	0x00ab
 800026e:	4924      	ldr	r1, [pc, #144]	; (8000300 <_mainCRTStartup+0xd0>)
 8000270:	2000      	movs	r0, #0
 8000272:	b401      	push	{r0}
 8000274:	780b      	ldrb	r3, [r1, #0]
 8000276:	3101      	adds	r1, #1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d015      	beq.n	80002a8 <_mainCRTStartup+0x78>
 800027c:	2b20      	cmp	r3, #32
 800027e:	d0f9      	beq.n	8000274 <_mainCRTStartup+0x44>
 8000280:	2b22      	cmp	r3, #34	; 0x22
 8000282:	d001      	beq.n	8000288 <_mainCRTStartup+0x58>
 8000284:	2b27      	cmp	r3, #39	; 0x27
 8000286:	d101      	bne.n	800028c <_mainCRTStartup+0x5c>
 8000288:	001a      	movs	r2, r3
 800028a:	e001      	b.n	8000290 <_mainCRTStartup+0x60>
 800028c:	2220      	movs	r2, #32
 800028e:	3901      	subs	r1, #1
 8000290:	b402      	push	{r1}
 8000292:	3001      	adds	r0, #1
 8000294:	780b      	ldrb	r3, [r1, #0]
 8000296:	3101      	adds	r1, #1
 8000298:	2b00      	cmp	r3, #0
 800029a:	d005      	beq.n	80002a8 <_mainCRTStartup+0x78>
 800029c:	429a      	cmp	r2, r3
 800029e:	d1f9      	bne.n	8000294 <_mainCRTStartup+0x64>
 80002a0:	2200      	movs	r2, #0
 80002a2:	1e4b      	subs	r3, r1, #1
 80002a4:	701a      	strb	r2, [r3, #0]
 80002a6:	e7e5      	b.n	8000274 <_mainCRTStartup+0x44>
 80002a8:	4669      	mov	r1, sp
 80002aa:	0002      	movs	r2, r0
 80002ac:	0092      	lsls	r2, r2, #2
 80002ae:	446a      	add	r2, sp
 80002b0:	466b      	mov	r3, sp
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d906      	bls.n	80002c4 <_mainCRTStartup+0x94>
 80002b6:	3a04      	subs	r2, #4
 80002b8:	6814      	ldr	r4, [r2, #0]
 80002ba:	681d      	ldr	r5, [r3, #0]
 80002bc:	6015      	str	r5, [r2, #0]
 80002be:	601c      	str	r4, [r3, #0]
 80002c0:	3304      	adds	r3, #4
 80002c2:	e7f6      	b.n	80002b2 <_mainCRTStartup+0x82>
 80002c4:	466c      	mov	r4, sp
 80002c6:	2507      	movs	r5, #7
 80002c8:	43ac      	bics	r4, r5
 80002ca:	46a5      	mov	sp, r4
 80002cc:	0004      	movs	r4, r0
 80002ce:	000d      	movs	r5, r1
 80002d0:	4809      	ldr	r0, [pc, #36]	; (80002f8 <_mainCRTStartup+0xc8>)
 80002d2:	2800      	cmp	r0, #0
 80002d4:	d002      	beq.n	80002dc <_mainCRTStartup+0xac>
 80002d6:	4809      	ldr	r0, [pc, #36]	; (80002fc <_mainCRTStartup+0xcc>)
 80002d8:	f003 fae6 	bl	80038a8 <atexit>
 80002dc:	f003 f9f0 	bl	80036c0 <__libc_init_array>
 80002e0:	0020      	movs	r0, r4
 80002e2:	0029      	movs	r1, r5
 80002e4:	f000 f91c 	bl	8000520 <main>
 80002e8:	f003 f9da 	bl	80036a0 <exit>
 80002ec:	200001e4 	.word	0x200001e4
 80002f0:	20000b6c 	.word	0x20000b6c
 80002f4:	20000c74 	.word	0x20000c74
 80002f8:	080038a9 	.word	0x080038a9
 80002fc:	080038b5 	.word	0x080038b5
 8000300:	200001f4 	.word	0x200001f4
 8000304:	000000ff 	.word	0x000000ff
 8000308:	20000c75 	.word	0x20000c75

0800030c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
}
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <HardFault_Handler>:
  * @param  None
  * @retval None
  */

void HardFault_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  //  [> Go to infinite loop when Hard Fault exception occurs <]
  while (1)
  {
  }
 800031c:	e7fe      	b.n	800031c <HardFault_Handler+0x4>
 800031e:	bf00      	nop

08000320 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000324:	e7fe      	b.n	8000324 <MemManage_Handler+0x4>
 8000326:	bf00      	nop

08000328 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800032c:	e7fe      	b.n	800032c <BusFault_Handler+0x4>
 800032e:	bf00      	nop

08000330 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000334:	e7fe      	b.n	8000334 <UsageFault_Handler+0x4>
 8000336:	bf00      	nop

08000338 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
}
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
}
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
}
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  __stm32_tick++;
 8000360:	4b04      	ldr	r3, [pc, #16]	; (8000374 <SysTick_Handler+0x18>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	1c5a      	adds	r2, r3, #1
 8000366:	4b03      	ldr	r3, [pc, #12]	; (8000374 <SysTick_Handler+0x18>)
 8000368:	601a      	str	r2, [r3, #0]
}
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	20000c6c 	.word	0x20000c6c

08000378 <cycleLed>:
void servo_init(void);
void servo_set_position(enum tim_oc_id ch, uint32_t pos_us);

extern void initialise_monitor_handles(void);

int cycleLed(int OC2_ONOFF, int OC3_ONOFF, int OC4_ONOFF){
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
 800037e:	60f8      	str	r0, [r7, #12]
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]

    for (i = 0; i < PWM_PERIOD; i++){
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
 800038c:	e023      	b.n	80003d6 <cycleLed+0x5e>
        delay(150);
 800038e:	2096      	movs	r0, #150	; 0x96
 8000390:	f000 f94e 	bl	8000630 <delay>
        if (OC2_ONOFF)
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d006      	beq.n	80003a8 <cycleLed+0x30>
            pwm_set_pulse_width(TIM2, TIM_OC2, i);
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003a0:	2102      	movs	r1, #2
 80003a2:	461a      	mov	r2, r3
 80003a4:	f000 f9ae 	bl	8000704 <pwm_set_pulse_width>
        if (OC3_ONOFF)
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d006      	beq.n	80003bc <cycleLed+0x44>
            pwm_set_pulse_width(TIM2, TIM_OC3, i);
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003b4:	2104      	movs	r1, #4
 80003b6:	461a      	mov	r2, r3
 80003b8:	f000 f9a4 	bl	8000704 <pwm_set_pulse_width>
        if (OC4_ONOFF)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d006      	beq.n	80003d0 <cycleLed+0x58>
            pwm_set_pulse_width(TIM2, TIM_OC4, i);
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003c8:	2106      	movs	r1, #6
 80003ca:	461a      	mov	r2, r3
 80003cc:	f000 f99a 	bl	8000704 <pwm_set_pulse_width>
extern void initialise_monitor_handles(void);

int cycleLed(int OC2_ONOFF, int OC3_ONOFF, int OC4_ONOFF){
    int i = 0;

    for (i = 0; i < PWM_PERIOD; i++){
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	3301      	adds	r3, #1
 80003d4:	617b      	str	r3, [r7, #20]
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80003dc:	dbd7      	blt.n	800038e <cycleLed+0x16>
        if (OC3_ONOFF)
            pwm_set_pulse_width(TIM2, TIM_OC3, i);
        if (OC4_ONOFF)
            pwm_set_pulse_width(TIM2, TIM_OC4, i);
    }
    for (i = PWM_PERIOD; i > 0; i--){
 80003de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	e023      	b.n	800042e <cycleLed+0xb6>
        delay(150);
 80003e6:	2096      	movs	r0, #150	; 0x96
 80003e8:	f000 f922 	bl	8000630 <delay>
        if (OC2_ONOFF)
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d006      	beq.n	8000400 <cycleLed+0x88>
            pwm_set_pulse_width(TIM2, TIM_OC2, i);
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003f8:	2102      	movs	r1, #2
 80003fa:	461a      	mov	r2, r3
 80003fc:	f000 f982 	bl	8000704 <pwm_set_pulse_width>
        if (OC3_ONOFF)
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d006      	beq.n	8000414 <cycleLed+0x9c>
            pwm_set_pulse_width(TIM2, TIM_OC3, i);
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800040c:	2104      	movs	r1, #4
 800040e:	461a      	mov	r2, r3
 8000410:	f000 f978 	bl	8000704 <pwm_set_pulse_width>
        if (OC4_ONOFF)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d006      	beq.n	8000428 <cycleLed+0xb0>
            pwm_set_pulse_width(TIM2, TIM_OC4, i);
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000420:	2106      	movs	r1, #6
 8000422:	461a      	mov	r2, r3
 8000424:	f000 f96e 	bl	8000704 <pwm_set_pulse_width>
        if (OC3_ONOFF)
            pwm_set_pulse_width(TIM2, TIM_OC3, i);
        if (OC4_ONOFF)
            pwm_set_pulse_width(TIM2, TIM_OC4, i);
    }
    for (i = PWM_PERIOD; i > 0; i--){
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	3b01      	subs	r3, #1
 800042c:	617b      	str	r3, [r7, #20]
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	2b00      	cmp	r3, #0
 8000432:	dcd8      	bgt.n	80003e6 <cycleLed+0x6e>
        if (OC3_ONOFF)
            pwm_set_pulse_width(TIM2, TIM_OC3, i);
        if (OC4_ONOFF)
            pwm_set_pulse_width(TIM2, TIM_OC4, i);
    }
    return 0;
 8000434:	2300      	movs	r3, #0
}
 8000436:	4618      	mov	r0, r3
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop

08000440 <cycleLedOn>:

int cycleLedOn(int OC2_ON, int OC3_ON, int OC4_ON){
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < PWM_PERIOD; i++){
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	e023      	b.n	800049e <cycleLedOn+0x5e>
        delay(150);
 8000456:	2096      	movs	r0, #150	; 0x96
 8000458:	f000 f8ea 	bl	8000630 <delay>
        if (OC2_ON)
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d006      	beq.n	8000470 <cycleLedOn+0x30>
            pwm_set_pulse_width(TIM2, TIM_OC2, i);
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000468:	2102      	movs	r1, #2
 800046a:	461a      	mov	r2, r3
 800046c:	f000 f94a 	bl	8000704 <pwm_set_pulse_width>
        if (OC3_ON)
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d006      	beq.n	8000484 <cycleLedOn+0x44>
            pwm_set_pulse_width(TIM2, TIM_OC3, i);
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800047c:	2104      	movs	r1, #4
 800047e:	461a      	mov	r2, r3
 8000480:	f000 f940 	bl	8000704 <pwm_set_pulse_width>
        if (OC4_ON)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d006      	beq.n	8000498 <cycleLedOn+0x58>
            pwm_set_pulse_width(TIM2, TIM_OC4, i);
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000490:	2106      	movs	r1, #6
 8000492:	461a      	mov	r2, r3
 8000494:	f000 f936 	bl	8000704 <pwm_set_pulse_width>
    return 0;
}

int cycleLedOn(int OC2_ON, int OC3_ON, int OC4_ON){
    int i = 0;
    for (i = 0; i < PWM_PERIOD; i++){
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	3301      	adds	r3, #1
 800049c:	617b      	str	r3, [r7, #20]
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80004a4:	dbd7      	blt.n	8000456 <cycleLedOn+0x16>
        if (OC3_ON)
            pwm_set_pulse_width(TIM2, TIM_OC3, i);
        if (OC4_ON)
            pwm_set_pulse_width(TIM2, TIM_OC4, i);
    }
    return 0;
 80004a6:	2300      	movs	r3, #0
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <cycleLedOff>:

int cycleLedOff(int OC2_OFF, int OC3_OFF, int OC4_OFF){
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
    int i = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
    for (i = PWM_PERIOD; i > 0; i--){
 80004c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80004c4:	617b      	str	r3, [r7, #20]
 80004c6:	e023      	b.n	8000510 <cycleLedOff+0x60>
        delay(150);
 80004c8:	2096      	movs	r0, #150	; 0x96
 80004ca:	f000 f8b1 	bl	8000630 <delay>
        if (OC2_OFF)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d006      	beq.n	80004e2 <cycleLedOff+0x32>
            pwm_set_pulse_width(TIM2, TIM_OC2, i);
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004da:	2102      	movs	r1, #2
 80004dc:	461a      	mov	r2, r3
 80004de:	f000 f911 	bl	8000704 <pwm_set_pulse_width>
        if (OC3_OFF)
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d006      	beq.n	80004f6 <cycleLedOff+0x46>
            pwm_set_pulse_width(TIM2, TIM_OC3, i);
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004ee:	2104      	movs	r1, #4
 80004f0:	461a      	mov	r2, r3
 80004f2:	f000 f907 	bl	8000704 <pwm_set_pulse_width>
        if (OC4_OFF)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d006      	beq.n	800050a <cycleLedOff+0x5a>
            pwm_set_pulse_width(TIM2, TIM_OC4, i);
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000502:	2106      	movs	r1, #6
 8000504:	461a      	mov	r2, r3
 8000506:	f000 f8fd 	bl	8000704 <pwm_set_pulse_width>
    return 0;
}

int cycleLedOff(int OC2_OFF, int OC3_OFF, int OC4_OFF){
    int i = 0;
    for (i = PWM_PERIOD; i > 0; i--){
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	3b01      	subs	r3, #1
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	2b00      	cmp	r3, #0
 8000514:	dcd8      	bgt.n	80004c8 <cycleLedOff+0x18>
        if (OC3_OFF)
            pwm_set_pulse_width(TIM2, TIM_OC3, i);
        if (OC4_OFF)
            pwm_set_pulse_width(TIM2, TIM_OC4, i);
    }
    return 0;
 8000516:	2300      	movs	r3, #0
}
 8000518:	4618      	mov	r0, r3
 800051a:	3718      	adds	r7, #24
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <main>:

extern void initialise_monitor_handles(void);

int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    clock_init();
 8000524:	f000 f86c 	bl	8000600 <clock_init>
    gpio_init();
 8000528:	f000 f870 	bl	800060c <gpio_init>
    servo_init();
 800052c:	f000 f904 	bl	8000738 <servo_init>

    initialise_monitor_handles();
 8000530:	f003 fa56 	bl	80039e0 <initialise_monitor_handles>

    printf("Hello World\n");
 8000534:	482e      	ldr	r0, [pc, #184]	; (80005f0 <main+0xd0>)
 8000536:	f004 ffc1 	bl	80054bc <puts>
        cycleLed(0,0,1);
        cycleLed(1,0,1);
        cycleLed(1,1,1);
        */

        cycleLedOn(1,0,0);
 800053a:	2001      	movs	r0, #1
 800053c:	2100      	movs	r1, #0
 800053e:	2200      	movs	r2, #0
 8000540:	f7ff ff7e 	bl	8000440 <cycleLedOn>
        cycleLedOn(0,1,0);
 8000544:	2000      	movs	r0, #0
 8000546:	2101      	movs	r1, #1
 8000548:	2200      	movs	r2, #0
 800054a:	f7ff ff79 	bl	8000440 <cycleLedOn>
        cycleLedOn(0,0,1);
 800054e:	2000      	movs	r0, #0
 8000550:	2100      	movs	r1, #0
 8000552:	2201      	movs	r2, #1
 8000554:	f7ff ff74 	bl	8000440 <cycleLedOn>
        cycleLedOff(1,0,0);
 8000558:	2001      	movs	r0, #1
 800055a:	2100      	movs	r1, #0
 800055c:	2200      	movs	r2, #0
 800055e:	f7ff ffa7 	bl	80004b0 <cycleLedOff>
        cycleLedOff(0,1,0);
 8000562:	2000      	movs	r0, #0
 8000564:	2101      	movs	r1, #1
 8000566:	2200      	movs	r2, #0
 8000568:	f7ff ffa2 	bl	80004b0 <cycleLedOff>
        cycleLedOff(0,0,1);
 800056c:	2000      	movs	r0, #0
 800056e:	2100      	movs	r1, #0
 8000570:	2201      	movs	r2, #1
 8000572:	f7ff ff9d 	bl	80004b0 <cycleLedOff>

        cycleLedOn(0,1,0);
 8000576:	2000      	movs	r0, #0
 8000578:	2101      	movs	r1, #1
 800057a:	2200      	movs	r2, #0
 800057c:	f7ff ff60 	bl	8000440 <cycleLedOn>
        cycleLedOn(0,0,1);
 8000580:	2000      	movs	r0, #0
 8000582:	2100      	movs	r1, #0
 8000584:	2201      	movs	r2, #1
 8000586:	f7ff ff5b 	bl	8000440 <cycleLedOn>
        cycleLedOn(1,0,0);
 800058a:	2001      	movs	r0, #1
 800058c:	2100      	movs	r1, #0
 800058e:	2200      	movs	r2, #0
 8000590:	f7ff ff56 	bl	8000440 <cycleLedOn>
        cycleLedOff(0,1,0);
 8000594:	2000      	movs	r0, #0
 8000596:	2101      	movs	r1, #1
 8000598:	2200      	movs	r2, #0
 800059a:	f7ff ff89 	bl	80004b0 <cycleLedOff>
        cycleLedOff(0,0,1);
 800059e:	2000      	movs	r0, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	2201      	movs	r2, #1
 80005a4:	f7ff ff84 	bl	80004b0 <cycleLedOff>
        cycleLedOff(1,0,0);
 80005a8:	2001      	movs	r0, #1
 80005aa:	2100      	movs	r1, #0
 80005ac:	2200      	movs	r2, #0
 80005ae:	f7ff ff7f 	bl	80004b0 <cycleLedOff>

        cycleLedOn(0,0,1);
 80005b2:	2000      	movs	r0, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	2201      	movs	r2, #1
 80005b8:	f7ff ff42 	bl	8000440 <cycleLedOn>
        cycleLedOn(1,0,0);
 80005bc:	2001      	movs	r0, #1
 80005be:	2100      	movs	r1, #0
 80005c0:	2200      	movs	r2, #0
 80005c2:	f7ff ff3d 	bl	8000440 <cycleLedOn>
        cycleLedOn(0,1,0);
 80005c6:	2000      	movs	r0, #0
 80005c8:	2101      	movs	r1, #1
 80005ca:	2200      	movs	r2, #0
 80005cc:	f7ff ff38 	bl	8000440 <cycleLedOn>
        cycleLedOff(0,0,1);
 80005d0:	2000      	movs	r0, #0
 80005d2:	2100      	movs	r1, #0
 80005d4:	2201      	movs	r2, #1
 80005d6:	f7ff ff6b 	bl	80004b0 <cycleLedOff>
        cycleLedOff(1,0,0);
 80005da:	2001      	movs	r0, #1
 80005dc:	2100      	movs	r1, #0
 80005de:	2200      	movs	r2, #0
 80005e0:	f7ff ff66 	bl	80004b0 <cycleLedOff>
        cycleLedOff(0,1,0);
 80005e4:	2000      	movs	r0, #0
 80005e6:	2101      	movs	r1, #1
 80005e8:	2200      	movs	r2, #0
 80005ea:	f7ff ff61 	bl	80004b0 <cycleLedOff>
    }
 80005ee:	e7a4      	b.n	800053a <main+0x1a>
 80005f0:	080065a4 	.word	0x080065a4
}


void __end__ (void){
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

}
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <clock_init>:

//void _exit(void){}

void clock_init(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
    void rcc_clock_setup_in_hse_8mhz_out_24mhz(void);
}
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <gpio_init>:

/**
* Initialize the GPIO port for the LED at pin 12 on port C.
*/
void gpio_init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    /* enable GPIOC clock */
    rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_IOPCEN);
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <gpio_init+0x1c>)
 8000612:	2110      	movs	r1, #16
 8000614:	f004 facc 	bl	8004bb0 <rcc_peripheral_enable_clock>

    /*
* set GPIO12 at PORTC (led) to 'output alternate function push-pull'.
*/
    gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_50_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO12);
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <gpio_init+0x20>)
 800061a:	2103      	movs	r1, #3
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	f003 fcfd 	bl	8004020 <gpio_set_mode>
}
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021018 	.word	0x40021018
 800062c:	40011000 	.word	0x40011000

08000630 <delay>:
* Delay by executing some "nop"s.
*
* @param[in] d number of "nop"s to performe.
*/
void delay(int d)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

    int i;

    for(i = 0; i < d; i++) {
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	e003      	b.n	8000646 <delay+0x16>
        __asm("nop");
 800063e:	bf00      	nop
void delay(int d)
{

    int i;

    for(i = 0; i < d; i++) {
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	429a      	cmp	r2, r3
 800064c:	dbf7      	blt.n	800063e <delay+0xe>
        __asm("nop");
    }
}
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <pwm_init_timer>:


void pwm_init_timer(volatile uint32_t *reg, uint32_t en, uint32_t timer_peripheral, uint32_t prescaler, uint32_t period)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
 8000664:	603b      	str	r3, [r7, #0]
    /* Enable timer clock. */
    rcc_peripheral_enable_clock(reg, en);
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	68b9      	ldr	r1, [r7, #8]
 800066a:	f004 faa1 	bl	8004bb0 <rcc_peripheral_enable_clock>

    /* Reset TIM1 peripheral */
    timer_reset(timer_peripheral);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f003 fd2a 	bl	80040c8 <timer_reset>
    /* Set the timers global mode to:
* - use no divider
* - alignment edge
* - count direction up
*/
    timer_set_mode(timer_peripheral,
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	2100      	movs	r1, #0
 8000678:	2200      	movs	r2, #0
 800067a:	2300      	movs	r3, #0
 800067c:	f003 fd95 	bl	80041aa <timer_set_mode>
                   TIM_CR1_CKD_CK_INT,
                   TIM_CR1_CMS_EDGE,
                   TIM_CR1_DIR_UP);

    timer_set_prescaler(timer_peripheral, prescaler);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	6839      	ldr	r1, [r7, #0]
 8000684:	f003 fe5e 	bl	8004344 <timer_set_prescaler>
    timer_set_repetition_counter(timer_peripheral, 0);
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	2100      	movs	r1, #0
 800068c:	f003 fe5c 	bl	8004348 <timer_set_repetition_counter>
    timer_enable_preload(timer_peripheral);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f003 fd9d 	bl	80041d0 <timer_enable_preload>
    timer_continuous_mode(timer_peripheral);
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f003 fdbd 	bl	8004216 <timer_continuous_mode>
    timer_set_period(timer_peripheral, period);
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	69b9      	ldr	r1, [r7, #24]
 80006a0:	f003 fe5e 	bl	8004360 <timer_set_period>
}
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop

080006ac <pwm_init_output_channel>:

void pwm_init_output_channel(uint32_t timer_peripheral, enum tim_oc_id oc_id, volatile uint32_t *gpio_reg, uint32_t gpio_en, uint32_t gpio_port, uint16_t gpio_pin)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	607a      	str	r2, [r7, #4]
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	460b      	mov	r3, r1
 80006ba:	72fb      	strb	r3, [r7, #11]
    /* Enable GPIO clock. */
    rcc_peripheral_enable_clock(gpio_reg, gpio_en);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	6839      	ldr	r1, [r7, #0]
 80006c0:	f004 fa76 	bl	8004bb0 <rcc_peripheral_enable_clock>

    /* Set timer channel to output */
    gpio_set_mode(gpio_port, GPIO_MODE_OUTPUT_50_MHZ,
 80006c4:	8bbb      	ldrh	r3, [r7, #28]
 80006c6:	69b8      	ldr	r0, [r7, #24]
 80006c8:	2103      	movs	r1, #3
 80006ca:	2202      	movs	r2, #2
 80006cc:	f003 fca8 	bl	8004020 <gpio_set_mode>
                  GPIO_CNF_OUTPUT_ALTFN_PUSHPULL,
                  gpio_pin);

    timer_disable_oc_output(timer_peripheral, oc_id);
 80006d0:	7afb      	ldrb	r3, [r7, #11]
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	4619      	mov	r1, r3
 80006d6:	f004 f841 	bl	800475c <timer_disable_oc_output>
    timer_set_oc_mode(timer_peripheral, oc_id, TIM_OCM_PWM1);
 80006da:	7afb      	ldrb	r3, [r7, #11]
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	4619      	mov	r1, r3
 80006e0:	2206      	movs	r2, #6
 80006e2:	f003 fea7 	bl	8004434 <timer_set_oc_mode>
    timer_set_oc_value(timer_peripheral, oc_id, 0);
 80006e6:	7afb      	ldrb	r3, [r7, #11]
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	4619      	mov	r1, r3
 80006ec:	2200      	movs	r2, #0
 80006ee:	f004 f8c5 	bl	800487c <timer_set_oc_value>
    timer_enable_oc_output(timer_peripheral, oc_id);
 80006f2:	7afb      	ldrb	r3, [r7, #11]
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	4619      	mov	r1, r3
 80006f8:	f003 fffc 	bl	80046f4 <timer_enable_oc_output>
}
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop

08000704 <pwm_set_pulse_width>:

void pwm_set_pulse_width(uint32_t timer_peripheral, enum tim_oc_id oc_id, uint32_t pulse_width)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	460b      	mov	r3, r1
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	72fb      	strb	r3, [r7, #11]
    timer_set_oc_value(timer_peripheral, oc_id, pulse_width);
 8000712:	7afb      	ldrb	r3, [r7, #11]
 8000714:	68f8      	ldr	r0, [r7, #12]
 8000716:	4619      	mov	r1, r3
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	f004 f8af 	bl	800487c <timer_set_oc_value>
}
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <pwm_start_timer>:

void pwm_start_timer(uint32_t timer_peripheral)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    timer_enable_counter(timer_peripheral);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f003 fd8b 	bl	8004248 <timer_enable_counter>
}
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <servo_init>:

void servo_init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af02      	add	r7, sp, #8
    /* init timer2 with a period of 20ms */
    pwm_init_timer(&RCC_APB1ENR, RCC_APB1ENR_TIM2EN, TIM2, PWM_PRESCALE, PWM_PERIOD);
 800073e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	481f      	ldr	r0, [pc, #124]	; (80007c4 <servo_init+0x8c>)
 8000746:	2101      	movs	r1, #1
 8000748:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074c:	2307      	movs	r3, #7
 800074e:	f7ff ff83 	bl	8000658 <pwm_init_timer>

    /* init output of channel2 of timer2 */
    pwm_init_output_channel(TIM2, SERVO_CH1, &RCC_APB2ENR, RCC_APB2ENR_IOPAEN, GPIOA, GPIO_TIM2_CH2);
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <servo_init+0x90>)
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2302      	movs	r3, #2
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800075e:	2102      	movs	r1, #2
 8000760:	4a1a      	ldr	r2, [pc, #104]	; (80007cc <servo_init+0x94>)
 8000762:	2304      	movs	r3, #4
 8000764:	f7ff ffa2 	bl	80006ac <pwm_init_output_channel>

    /* init output of channel3 of timer2 */
    pwm_init_output_channel(TIM2, SERVO_CH2, &RCC_APB2ENR, RCC_APB2ENR_IOPAEN, GPIOA, GPIO_TIM2_CH3);
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <servo_init+0x90>)
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2304      	movs	r3, #4
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000774:	2104      	movs	r1, #4
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <servo_init+0x94>)
 8000778:	2304      	movs	r3, #4
 800077a:	f7ff ff97 	bl	80006ac <pwm_init_output_channel>

    /* init output of channel 4 of timer2 */
    pwm_init_output_channel(TIM2, SERVO_CH3, &RCC_APB2ENR, RCC_APB2ENR_IOPAEN, GPIOA, GPIO_TIM2_CH4);
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <servo_init+0x90>)
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2308      	movs	r3, #8
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800078a:	2106      	movs	r1, #6
 800078c:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <servo_init+0x94>)
 800078e:	2304      	movs	r3, #4
 8000790:	f7ff ff8c 	bl	80006ac <pwm_init_output_channel>

    pwm_set_pulse_width(TIM2, SERVO_CH1, 0);
 8000794:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000798:	2102      	movs	r1, #2
 800079a:	2200      	movs	r2, #0
 800079c:	f7ff ffb2 	bl	8000704 <pwm_set_pulse_width>
    pwm_set_pulse_width(TIM2, SERVO_CH2, 0);
 80007a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80007a4:	2104      	movs	r1, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	f7ff ffac 	bl	8000704 <pwm_set_pulse_width>
    pwm_set_pulse_width(TIM2, SERVO_CH3, 0);
 80007ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80007b0:	2106      	movs	r1, #6
 80007b2:	2200      	movs	r2, #0
 80007b4:	f7ff ffa6 	bl	8000704 <pwm_set_pulse_width>

    /* start timer1 */
    pwm_start_timer(TIM2);
 80007b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80007bc:	f7ff ffb2 	bl	8000724 <pwm_start_timer>
}
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	4002101c 	.word	0x4002101c
 80007c8:	40010800 	.word	0x40010800
 80007cc:	40021018 	.word	0x40021018

080007d0 <servo_set_position>:

void servo_set_position(enum tim_oc_id ch, uint32_t pos_us)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
    pwm_set_pulse_width(TIM2, ch, pos_us);
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80007e2:	4619      	mov	r1, r3
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	f7ff ff8d 	bl	8000704 <pwm_set_pulse_width>
}
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80007f8:	4a05      	ldr	r2, [pc, #20]	; (8000810 <NVIC_PriorityGroupConfig+0x20>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	60d3      	str	r3, [r2, #12]
}
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *   the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000814:	b480      	push	{r7}
 8000816:	b087      	sub	sp, #28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	230f      	movs	r3, #15
 8000826:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	78db      	ldrb	r3, [r3, #3]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d038      	beq.n	80008a2 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <NVIC_Init+0xb8>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	43db      	mvns	r3, r3
 8000836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	f1c3 0304 	rsb	r3, r3, #4
 8000844:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	fa22 f303 	lsr.w	r3, r2, r3
 800084e:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	785b      	ldrb	r3, [r3, #1]
 8000854:	461a      	mov	r2, r3
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	789b      	ldrb	r3, [r3, #2]
 8000862:	461a      	mov	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	4013      	ands	r3, r2
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	4313      	orrs	r3, r2
 800086c:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	011b      	lsls	r3, r3, #4
 8000872:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000874:	4916      	ldr	r1, [pc, #88]	; (80008d0 <NVIC_Init+0xbc>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	440b      	add	r3, r1
 8000880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <NVIC_Init+0xbc>)
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	7812      	ldrb	r2, [r2, #0]
 800088a:	0952      	lsrs	r2, r2, #5
 800088c:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	7809      	ldrb	r1, [r1, #0]
 8000892:	f001 011f 	and.w	r1, r1, #31
 8000896:	2001      	movs	r0, #1
 8000898:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800089c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80008a0:	e00e      	b.n	80008c0 <NVIC_Init+0xac>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <NVIC_Init+0xbc>)
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	7812      	ldrb	r2, [r2, #0]
 80008a8:	0952      	lsrs	r2, r2, #5
 80008aa:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	7809      	ldrb	r1, [r1, #0]
 80008b0:	f001 011f 	and.w	r1, r1, #31
 80008b4:	2001      	movs	r0, #1
 80008b6:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80008ba:	3220      	adds	r2, #32
 80008bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80008c0:	371c      	adds	r7, #28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00
 80008d0:	e000e100 	.word	0xe000e100

080008d4 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x100.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80008de:	4a07      	ldr	r2, [pc, #28]	; (80008fc <NVIC_SetVectorTable+0x28>)
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80008e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	430b      	orrs	r3, r1
 80008ee:	6093      	str	r3, [r2, #8]
}
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4602      	mov	r2, r0
 8000908:	460b      	mov	r3, r1
 800090a:	71fa      	strb	r2, [r7, #7]
 800090c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800090e:	79bb      	ldrb	r3, [r7, #6]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d006      	beq.n	8000922 <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <NVIC_SystemLPConfig+0x3c>)
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <NVIC_SystemLPConfig+0x3c>)
 8000918:	6911      	ldr	r1, [r2, #16]
 800091a:	79fa      	ldrb	r2, [r7, #7]
 800091c:	430a      	orrs	r2, r1
 800091e:	611a      	str	r2, [r3, #16]
 8000920:	e006      	b.n	8000930 <NVIC_SystemLPConfig+0x30>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <NVIC_SystemLPConfig+0x3c>)
 8000924:	4a05      	ldr	r2, [pc, #20]	; (800093c <NVIC_SystemLPConfig+0x3c>)
 8000926:	6911      	ldr	r1, [r2, #16]
 8000928:	79fa      	ldrb	r2, [r7, #7]
 800092a:	43d2      	mvns	r2, r2
 800092c:	400a      	ands	r2, r1
 800092e:	611a      	str	r2, [r3, #16]
  }
}
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b04      	cmp	r3, #4
 800094c:	d106      	bne.n	800095c <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <SysTick_CLKSourceConfig+0x34>)
 8000950:	4a08      	ldr	r2, [pc, #32]	; (8000974 <SysTick_CLKSourceConfig+0x34>)
 8000952:	6812      	ldr	r2, [r2, #0]
 8000954:	f042 0204 	orr.w	r2, r2, #4
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	e005      	b.n	8000968 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <SysTick_CLKSourceConfig+0x34>)
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <SysTick_CLKSourceConfig+0x34>)
 8000960:	6812      	ldr	r2, [r2, #0]
 8000962:	f022 0204 	bic.w	r2, r2, #4
 8000966:	601a      	str	r2, [r3, #0]
  }
}
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000e010 	.word	0xe000e010

08000978 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <GPIO_DeInit+0xc8>)
 8000984:	429a      	cmp	r2, r3
 8000986:	d108      	bne.n	800099a <GPIO_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000988:	2004      	movs	r0, #4
 800098a:	2101      	movs	r1, #1
 800098c:	f000 fdf2 	bl	8001574 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8000990:	2004      	movs	r0, #4
 8000992:	2100      	movs	r1, #0
 8000994:	f000 fdee 	bl	8001574 <RCC_APB2PeriphResetCmd>
 8000998:	e04e      	b.n	8000a38 <GPIO_DeInit+0xc0>
  }
  else if (GPIOx == GPIOB)
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <GPIO_DeInit+0xcc>)
 800099e:	429a      	cmp	r2, r3
 80009a0:	d108      	bne.n	80009b4 <GPIO_DeInit+0x3c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80009a2:	2008      	movs	r0, #8
 80009a4:	2101      	movs	r1, #1
 80009a6:	f000 fde5 	bl	8001574 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 80009aa:	2008      	movs	r0, #8
 80009ac:	2100      	movs	r1, #0
 80009ae:	f000 fde1 	bl	8001574 <RCC_APB2PeriphResetCmd>
 80009b2:	e041      	b.n	8000a38 <GPIO_DeInit+0xc0>
  }
  else if (GPIOx == GPIOC)
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <GPIO_DeInit+0xd0>)
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d108      	bne.n	80009ce <GPIO_DeInit+0x56>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80009bc:	2010      	movs	r0, #16
 80009be:	2101      	movs	r1, #1
 80009c0:	f000 fdd8 	bl	8001574 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 80009c4:	2010      	movs	r0, #16
 80009c6:	2100      	movs	r1, #0
 80009c8:	f000 fdd4 	bl	8001574 <RCC_APB2PeriphResetCmd>
 80009cc:	e034      	b.n	8000a38 <GPIO_DeInit+0xc0>
  }
  else if (GPIOx == GPIOD)
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <GPIO_DeInit+0xd4>)
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d108      	bne.n	80009e8 <GPIO_DeInit+0x70>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 80009d6:	2020      	movs	r0, #32
 80009d8:	2101      	movs	r1, #1
 80009da:	f000 fdcb 	bl	8001574 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80009de:	2020      	movs	r0, #32
 80009e0:	2100      	movs	r1, #0
 80009e2:	f000 fdc7 	bl	8001574 <RCC_APB2PeriphResetCmd>
 80009e6:	e027      	b.n	8000a38 <GPIO_DeInit+0xc0>
  }    
  else if (GPIOx == GPIOE)
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <GPIO_DeInit+0xd8>)
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d108      	bne.n	8000a02 <GPIO_DeInit+0x8a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 80009f0:	2040      	movs	r0, #64	; 0x40
 80009f2:	2101      	movs	r1, #1
 80009f4:	f000 fdbe 	bl	8001574 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 80009f8:	2040      	movs	r0, #64	; 0x40
 80009fa:	2100      	movs	r1, #0
 80009fc:	f000 fdba 	bl	8001574 <RCC_APB2PeriphResetCmd>
 8000a00:	e01a      	b.n	8000a38 <GPIO_DeInit+0xc0>
  } 
  else if (GPIOx == GPIOF)
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <GPIO_DeInit+0xdc>)
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d108      	bne.n	8000a1c <GPIO_DeInit+0xa4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8000a0a:	2080      	movs	r0, #128	; 0x80
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	f000 fdb1 	bl	8001574 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8000a12:	2080      	movs	r0, #128	; 0x80
 8000a14:	2100      	movs	r1, #0
 8000a16:	f000 fdad 	bl	8001574 <RCC_APB2PeriphResetCmd>
 8000a1a:	e00d      	b.n	8000a38 <GPIO_DeInit+0xc0>
  }
  else
  {
    if (GPIOx == GPIOG)
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <GPIO_DeInit+0xe0>)
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d109      	bne.n	8000a38 <GPIO_DeInit+0xc0>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8000a24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a28:	2101      	movs	r1, #1
 8000a2a:	f000 fda3 	bl	8001574 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8000a2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a32:	2100      	movs	r1, #0
 8000a34:	f000 fd9e 	bl	8001574 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40010800 	.word	0x40010800
 8000a44:	40010c00 	.word	0x40010c00
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	40011400 	.word	0x40011400
 8000a50:	40011800 	.word	0x40011800
 8000a54:	40011c00 	.word	0x40011c00
 8000a58:	40012000 	.word	0x40012000

08000a5c <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000a60:	2001      	movs	r0, #1
 8000a62:	2101      	movs	r1, #1
 8000a64:	f000 fd86 	bl	8001574 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f000 fd82 	bl	8001574 <RCC_APB2PeriphResetCmd>
}
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop

08000a74 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *   contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	78db      	ldrb	r3, [r3, #3]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	78db      	ldrb	r3, [r3, #3]
 8000aa4:	f003 0310 	and.w	r3, r3, #16
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d004      	beq.n	8000ab6 <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	789b      	ldrb	r3, [r3, #2]
 8000ab0:	69fa      	ldr	r2, [r7, #28]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d044      	beq.n	8000b4a <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	e038      	b.n	8000b3e <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d126      	bne.n	8000b38 <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	220f      	movs	r2, #15
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	4013      	ands	r3, r2
 8000b02:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	69fa      	ldr	r2, [r7, #28]
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	78db      	ldrb	r3, [r3, #3]
 8000b16:	2b28      	cmp	r3, #40	; 0x28
 8000b18:	d105      	bne.n	8000b26 <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	615a      	str	r2, [r3, #20]
 8000b24:	e008      	b.n	8000b38 <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	78db      	ldrb	r3, [r3, #3]
 8000b2a:	2b48      	cmp	r3, #72	; 0x48
 8000b2c:	d104      	bne.n	8000b38 <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	2201      	movs	r2, #1
 8000b32:	409a      	lsls	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	2b07      	cmp	r3, #7
 8000b42:	d9c3      	bls.n	8000acc <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	2bff      	cmp	r3, #255	; 0xff
 8000b50:	d946      	bls.n	8000be0 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	e03a      	b.n	8000bd4 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	3308      	adds	r3, #8
 8000b62:	2201      	movs	r2, #1
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d127      	bne.n	8000bce <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	220f      	movs	r2, #15
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	4013      	ands	r3, r2
 8000b96:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	69fa      	ldr	r2, [r7, #28]
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	78db      	ldrb	r3, [r3, #3]
 8000baa:	2b28      	cmp	r3, #40	; 0x28
 8000bac:	d105      	bne.n	8000bba <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3308      	adds	r3, #8
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	78db      	ldrb	r3, [r3, #3]
 8000bbe:	2b48      	cmp	r3, #72	; 0x48
 8000bc0:	d105      	bne.n	8000bce <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	3308      	adds	r3, #8
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	2b07      	cmp	r3, #7
 8000bd8:	d9c1      	bls.n	8000b5e <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	605a      	str	r2, [r3, #4]
  }
}
 8000be0:	3724      	adds	r7, #36	; 0x24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bfa:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2202      	movs	r2, #2
 8000c00:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2204      	movs	r2, #4
 8000c06:	70da      	strb	r2, [r3, #3]
}
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	887b      	ldrh	r3, [r7, #2]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e001      	b.n	8000c3a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	b29b      	uxth	r3, r3
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	887b      	ldrh	r3, [r7, #2]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000c80:	2301      	movs	r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	e001      	b.n	8000c8a <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	b29b      	uxth	r3, r3
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000cc0:	887a      	ldrh	r2, [r7, #2]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	611a      	str	r2, [r3, #16]
}
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000cdc:	887a      	ldrh	r2, [r7, #2]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	615a      	str	r2, [r3, #20]
}
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	460a      	mov	r2, r1
 8000cf8:	807a      	strh	r2, [r7, #2]
 8000cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8000cfc:	787b      	ldrb	r3, [r7, #1]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d02:	887a      	ldrh	r2, [r7, #2]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	611a      	str	r2, [r3, #16]
 8000d08:	e002      	b.n	8000d10 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	615a      	str	r2, [r3, #20]
  }
}
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8000d28:	887a      	ldrh	r2, [r7, #2]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60da      	str	r2, [r3, #12]
}
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 8000d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d48:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000d58:	887a      	ldrh	r2, [r7, #2]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	60fb      	str	r3, [r7, #12]
}
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	71fa      	strb	r2, [r7, #7]
 8000d88:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <GPIO_EventOutputConfig+0x44>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	011b      	lsls	r3, r3, #4
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
 8000da8:	79bb      	ldrb	r3, [r7, #6]
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <GPIO_EventOutputConfig+0x44>)
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	601a      	str	r2, [r3, #0]
}
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	40010000 	.word	0x40010000

08000dc4 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <GPIO_EventOutputCmd+0x1c>)
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	601a      	str	r2, [r3, #0]
}
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	4220001c 	.word	0x4220001c

08000de4 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	da03      	bge.n	8000e0e <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8000e06:	4b2e      	ldr	r3, [pc, #184]	; (8000ec0 <GPIO_PinRemapConfig+0xdc>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	e002      	b.n	8000e14 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8000e0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <GPIO_PinRemapConfig+0xdc>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e1a:	0c1b      	lsrs	r3, r3, #16
 8000e1c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000e2e:	d10a      	bne.n	8000e46 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000e36:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <GPIO_PinRemapConfig+0xdc>)
 8000e3a:	4a21      	ldr	r2, [pc, #132]	; (8000ec0 <GPIO_PinRemapConfig+0xdc>)
 8000e3c:	6852      	ldr	r2, [r2, #4]
 8000e3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	e021      	b.n	8000e8a <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d00e      	beq.n	8000e6e <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4013      	ands	r3, r2
 8000e62:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e00d      	b.n	8000e8a <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	0d5b      	lsrs	r3, r3, #21
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000e88:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d008      	beq.n	8000ea2 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	0d5b      	lsrs	r3, r3, #21
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	da03      	bge.n	8000eb0 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <GPIO_PinRemapConfig+0xdc>)
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	61da      	str	r2, [r3, #28]
 8000eae:	e002      	b.n	8000eb6 <GPIO_PinRemapConfig+0xd2>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <GPIO_PinRemapConfig+0xdc>)
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	605a      	str	r2, [r3, #4]
  }  
}
 8000eb6:	371c      	adds	r7, #28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	40010000 	.word	0x40010000

08000ec4 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000ec4:	b490      	push	{r4, r7}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	71fa      	strb	r2, [r7, #7]
 8000ed0:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <GPIO_EXTILineConfig+0x78>)
 8000ee8:	79ba      	ldrb	r2, [r7, #6]
 8000eea:	0892      	lsrs	r2, r2, #2
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	4913      	ldr	r1, [pc, #76]	; (8000f3c <GPIO_EXTILineConfig+0x78>)
 8000ef0:	79b8      	ldrb	r0, [r7, #6]
 8000ef2:	0880      	lsrs	r0, r0, #2
 8000ef4:	b2c0      	uxtb	r0, r0
 8000ef6:	3002      	adds	r0, #2
 8000ef8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000efc:	68f9      	ldr	r1, [r7, #12]
 8000efe:	43c9      	mvns	r1, r1
 8000f00:	4001      	ands	r1, r0
 8000f02:	3202      	adds	r2, #2
 8000f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <GPIO_EXTILineConfig+0x78>)
 8000f0a:	79ba      	ldrb	r2, [r7, #6]
 8000f0c:	0892      	lsrs	r2, r2, #2
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	490a      	ldr	r1, [pc, #40]	; (8000f3c <GPIO_EXTILineConfig+0x78>)
 8000f12:	79b8      	ldrb	r0, [r7, #6]
 8000f14:	0880      	lsrs	r0, r0, #2
 8000f16:	b2c0      	uxtb	r0, r0
 8000f18:	3002      	adds	r0, #2
 8000f1a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000f1e:	79fc      	ldrb	r4, [r7, #7]
 8000f20:	79b9      	ldrb	r1, [r7, #6]
 8000f22:	f001 0103 	and.w	r1, r1, #3
 8000f26:	0089      	lsls	r1, r1, #2
 8000f28:	fa04 f101 	lsl.w	r1, r4, r1
 8000f2c:	4301      	orrs	r1, r0
 8000f2e:	3202      	adds	r2, #2
 8000f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc90      	pop	{r4, r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	40010000 	.word	0x40010000

08000f40 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <GPIO_ETH_MediaInterfaceConfig+0x18>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
}
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	422000dc 	.word	0x422000dc

08000f5c <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <RCC_DeInit+0x54>)
 8000f62:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <RCC_DeInit+0x54>)
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000f6c:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <RCC_DeInit+0x54>)
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <RCC_DeInit+0x54>)
 8000f70:	6859      	ldr	r1, [r3, #4]
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <RCC_DeInit+0x58>)
 8000f74:	400b      	ands	r3, r1
 8000f76:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <RCC_DeInit+0x54>)
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <RCC_DeInit+0x54>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f86:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <RCC_DeInit+0x54>)
 8000f8a:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <RCC_DeInit+0x54>)
 8000f8c:	6812      	ldr	r2, [r2, #0]
 8000f8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f92:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <RCC_DeInit+0x54>)
 8000f96:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <RCC_DeInit+0x54>)
 8000f98:	6852      	ldr	r2, [r2, #4]
 8000f9a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000f9e:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <RCC_DeInit+0x54>)
 8000fa2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000fa6:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	f8ff0000 	.word	0xf8ff0000

08000fb8 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <RCC_HSEConfig+0x58>)
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <RCC_HSEConfig+0x58>)
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fca:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <RCC_HSEConfig+0x58>)
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <RCC_HSEConfig+0x58>)
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fd6:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fde:	d003      	beq.n	8000fe8 <RCC_HSEConfig+0x30>
 8000fe0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fe4:	d007      	beq.n	8000ff6 <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 8000fe6:	e00d      	b.n	8001004 <RCC_HSEConfig+0x4c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <RCC_HSEConfig+0x58>)
 8000fea:	4a09      	ldr	r2, [pc, #36]	; (8001010 <RCC_HSEConfig+0x58>)
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ff2:	601a      	str	r2, [r3, #0]
      break;
 8000ff4:	e006      	b.n	8001004 <RCC_HSEConfig+0x4c>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <RCC_HSEConfig+0x58>)
 8000ff8:	4a05      	ldr	r2, [pc, #20]	; (8001010 <RCC_HSEConfig+0x58>)
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8001000:	601a      	str	r2, [r3, #0]
      break;
 8001002:	bf00      	nop
      
    default:
      break;
  }
}
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800101e:	2300      	movs	r3, #0
 8001020:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001026:	2031      	movs	r0, #49	; 0x31
 8001028:	f000 fb10 	bl	800164c <RCC_GetFlagStatus>
 800102c:	4603      	mov	r3, r0
 800102e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800103c:	d002      	beq.n	8001044 <RCC_WaitForHSEStartUp+0x30>
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f0      	beq.n	8001026 <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001044:	2031      	movs	r0, #49	; 0x31
 8001046:	f000 fb01 	bl	800164c <RCC_GetFlagStatus>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8001050:	2301      	movs	r3, #1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	e001      	b.n	800105a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8001056:	2300      	movs	r3, #0
 8001058:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 800105a:	79fb      	ldrb	r3, [r7, #7]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <RCC_AdjustHSICalibrationValue+0x38>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800107e:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <RCC_AdjustHSICalibrationValue+0x38>)
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <RCC_HSICmd+0x1c>)
 80010ac:	79fa      	ldrb	r2, [r7, #7]
 80010ae:	601a      	str	r2, [r3, #0]
}
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	42420000 	.word	0x42420000

080010c0 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <RCC_PLLConfig+0x38>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80010da:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <RCC_PLLConfig+0x38>)
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	605a      	str	r2, [r3, #4]
}
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40021000 	.word	0x40021000

080010fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <RCC_PLLCmd+0x1c>)
 8001108:	79fa      	ldrb	r2, [r7, #7]
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	42420060 	.word	0x42420060

0800111c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <RCC_SYSCLKConfig+0x34>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f023 0303 	bic.w	r3, r3, #3
 8001134:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4313      	orrs	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <RCC_SYSCLKConfig+0x34>)
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	605a      	str	r2, [r3, #4]
}
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000

08001154 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <RCC_GetSYSCLKSource+0x1c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	b2db      	uxtb	r3, r3
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000

08001174 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <RCC_HCLKConfig+0x34>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800118c:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4313      	orrs	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <RCC_HCLKConfig+0x34>)
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	605a      	str	r2, [r3, #4]
}
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000

080011ac <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <RCC_PCLK1Config+0x34>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011c4:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <RCC_PCLK1Config+0x34>)
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	605a      	str	r2, [r3, #4]
}
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000

080011e4 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <RCC_PCLK2Config+0x34>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011fc:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <RCC_PCLK2Config+0x34>)
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	605a      	str	r2, [r3, #4]
}
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40021000 	.word	0x40021000

0800121c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	71fa      	strb	r2, [r7, #7]
 8001228:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d008      	beq.n	8001242 <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <RCC_ITConfig+0x44>)
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <RCC_ITConfig+0x44>)
 8001234:	7812      	ldrb	r2, [r2, #0]
 8001236:	b2d1      	uxtb	r1, r2
 8001238:	79fa      	ldrb	r2, [r7, #7]
 800123a:	430a      	orrs	r2, r1
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	701a      	strb	r2, [r3, #0]
 8001240:	e009      	b.n	8001256 <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <RCC_ITConfig+0x44>)
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <RCC_ITConfig+0x44>)
 8001246:	7812      	ldrb	r2, [r2, #0]
 8001248:	b2d1      	uxtb	r1, r2
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	43d2      	mvns	r2, r2
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	400a      	ands	r2, r1
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]
  }
}
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	40021009 	.word	0x40021009

08001264 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <RCC_USBCLKConfig+0x18>)
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
}
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	424200d8 	.word	0x424200d8

08001280 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <RCC_ADCCLKConfig+0x34>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001298:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4313      	orrs	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <RCC_ADCCLKConfig+0x34>)
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	605a      	str	r2, [r3, #4]
}
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <RCC_LSEConfig+0x3c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <RCC_LSEConfig+0x3c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d002      	beq.n	80012da <RCC_LSEConfig+0x22>
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d004      	beq.n	80012e2 <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 80012d8:	e007      	b.n	80012ea <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <RCC_LSEConfig+0x3c>)
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
      break;
 80012e0:	e003      	b.n	80012ea <RCC_LSEConfig+0x32>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <RCC_LSEConfig+0x3c>)
 80012e4:	2205      	movs	r2, #5
 80012e6:	701a      	strb	r2, [r3, #0]
      break;            
 80012e8:	bf00      	nop
      
    default:
      break;      
  }
}
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40021020 	.word	0x40021020

080012f8 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <RCC_LSICmd+0x1c>)
 8001304:	79fa      	ldrb	r2, [r7, #7]
 8001306:	601a      	str	r2, [r3, #0]
}
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	42420480 	.word	0x42420480

08001318 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <RCC_RTCCLKConfig+0x20>)
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <RCC_RTCCLKConfig+0x20>)
 8001324:	6a11      	ldr	r1, [r2, #32]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	430a      	orrs	r2, r1
 800132a:	621a      	str	r2, [r3, #32]
}
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000

0800133c <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <RCC_RTCCLKCmd+0x1c>)
 8001348:	79fa      	ldrb	r2, [r7, #7]
 800134a:	601a      	str	r2, [r3, #0]
}
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	4242043c 	.word	0x4242043c

0800135c <RCC_GetClocksFreq>:
  * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
  *   the clocks frequencies.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001374:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <RCC_GetClocksFreq+0x150>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2b04      	cmp	r3, #4
 8001382:	d007      	beq.n	8001394 <RCC_GetClocksFreq+0x38>
 8001384:	2b08      	cmp	r3, #8
 8001386:	d009      	beq.n	800139c <RCC_GetClocksFreq+0x40>
 8001388:	2b00      	cmp	r3, #0
 800138a:	d134      	bne.n	80013f6 <RCC_GetClocksFreq+0x9a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a48      	ldr	r2, [pc, #288]	; (80014b0 <RCC_GetClocksFreq+0x154>)
 8001390:	601a      	str	r2, [r3, #0]
      break;
 8001392:	e034      	b.n	80013fe <RCC_GetClocksFreq+0xa2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a46      	ldr	r2, [pc, #280]	; (80014b0 <RCC_GetClocksFreq+0x154>)
 8001398:	601a      	str	r2, [r3, #0]
      break;
 800139a:	e030      	b.n	80013fe <RCC_GetClocksFreq+0xa2>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800139c:	4b43      	ldr	r3, [pc, #268]	; (80014ac <RCC_GetClocksFreq+0x150>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80013a4:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80013a6:	4b41      	ldr	r3, [pc, #260]	; (80014ac <RCC_GetClocksFreq+0x150>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ae:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	0c9b      	lsrs	r3, r3, #18
 80013b4:	3302      	adds	r3, #2
 80013b6:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4a3c      	ldr	r2, [pc, #240]	; (80014b4 <RCC_GetClocksFreq+0x158>)
 80013c2:	fb02 f203 	mul.w	r2, r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	e013      	b.n	80013f4 <RCC_GetClocksFreq+0x98>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80013cc:	4b37      	ldr	r3, [pc, #220]	; (80014ac <RCC_GetClocksFreq+0x150>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <RCC_GetClocksFreq+0x8a>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4a36      	ldr	r2, [pc, #216]	; (80014b4 <RCC_GetClocksFreq+0x158>)
 80013dc:	fb02 f203 	mul.w	r2, r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e006      	b.n	80013f4 <RCC_GetClocksFreq+0x98>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4a31      	ldr	r2, [pc, #196]	; (80014b0 <RCC_GetClocksFreq+0x154>)
 80013ea:	fb02 f203 	mul.w	r2, r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80013f2:	e004      	b.n	80013fe <RCC_GetClocksFreq+0xa2>
 80013f4:	e003      	b.n	80013fe <RCC_GetClocksFreq+0xa2>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a2d      	ldr	r2, [pc, #180]	; (80014b0 <RCC_GetClocksFreq+0x154>)
 80013fa:	601a      	str	r2, [r3, #0]
      break;
 80013fc:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <RCC_GetClocksFreq+0x150>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001406:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800140e:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <RCC_GetClocksFreq+0x15c>)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	4413      	add	r3, r2
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	40da      	lsrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <RCC_GetClocksFreq+0x150>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800142e:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001436:	4a20      	ldr	r2, [pc, #128]	; (80014b8 <RCC_GetClocksFreq+0x15c>)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	4413      	add	r3, r2
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	40da      	lsrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <RCC_GetClocksFreq+0x150>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001456:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	0adb      	lsrs	r3, r3, #11
 800145c:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <RCC_GetClocksFreq+0x15c>)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	4413      	add	r3, r2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	40da      	lsrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <RCC_GetClocksFreq+0x150>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800147e:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	0b9b      	lsrs	r3, r3, #14
 8001484:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001486:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <RCC_GetClocksFreq+0x160>)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	fbb2 f2f3 	udiv	r2, r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	611a      	str	r2, [r3, #16]
}
 80014a0:	371c      	adds	r7, #28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	007a1200 	.word	0x007a1200
 80014b4:	003d0900 	.word	0x003d0900
 80014b8:	200002f4 	.word	0x200002f4
 80014bc:	20000304 	.word	0x20000304

080014c0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d006      	beq.n	80014e0 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <RCC_AHBPeriphClockCmd+0x38>)
 80014d4:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <RCC_AHBPeriphClockCmd+0x38>)
 80014d6:	6951      	ldr	r1, [r2, #20]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	430a      	orrs	r2, r1
 80014dc:	615a      	str	r2, [r3, #20]
 80014de:	e006      	b.n	80014ee <RCC_AHBPeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <RCC_AHBPeriphClockCmd+0x38>)
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <RCC_AHBPeriphClockCmd+0x38>)
 80014e4:	6951      	ldr	r1, [r2, #20]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	43d2      	mvns	r2, r2
 80014ea:	400a      	ands	r2, r1
 80014ec:	615a      	str	r2, [r3, #20]
  }
}
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40021000 	.word	0x40021000

080014fc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <RCC_APB2PeriphClockCmd+0x38>)
 8001510:	4a08      	ldr	r2, [pc, #32]	; (8001534 <RCC_APB2PeriphClockCmd+0x38>)
 8001512:	6991      	ldr	r1, [r2, #24]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	430a      	orrs	r2, r1
 8001518:	619a      	str	r2, [r3, #24]
 800151a:	e006      	b.n	800152a <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <RCC_APB2PeriphClockCmd+0x38>)
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <RCC_APB2PeriphClockCmd+0x38>)
 8001520:	6991      	ldr	r1, [r2, #24]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	43d2      	mvns	r2, r2
 8001526:	400a      	ands	r2, r1
 8001528:	619a      	str	r2, [r3, #24]
  }
}
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40021000 	.word	0x40021000

08001538 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d006      	beq.n	8001558 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <RCC_APB1PeriphClockCmd+0x38>)
 800154c:	4a08      	ldr	r2, [pc, #32]	; (8001570 <RCC_APB1PeriphClockCmd+0x38>)
 800154e:	69d1      	ldr	r1, [r2, #28]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	430a      	orrs	r2, r1
 8001554:	61da      	str	r2, [r3, #28]
 8001556:	e006      	b.n	8001566 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <RCC_APB1PeriphClockCmd+0x38>)
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <RCC_APB1PeriphClockCmd+0x38>)
 800155c:	69d1      	ldr	r1, [r2, #28]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	43d2      	mvns	r2, r2
 8001562:	400a      	ands	r2, r1
 8001564:	61da      	str	r2, [r3, #28]
  }
}
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40021000 	.word	0x40021000

08001574 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <RCC_APB2PeriphResetCmd+0x38>)
 8001588:	4a08      	ldr	r2, [pc, #32]	; (80015ac <RCC_APB2PeriphResetCmd+0x38>)
 800158a:	68d1      	ldr	r1, [r2, #12]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	430a      	orrs	r2, r1
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	e006      	b.n	80015a2 <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <RCC_APB2PeriphResetCmd+0x38>)
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <RCC_APB2PeriphResetCmd+0x38>)
 8001598:	68d1      	ldr	r1, [r2, #12]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	43d2      	mvns	r2, r2
 800159e:	400a      	ands	r2, r1
 80015a0:	60da      	str	r2, [r3, #12]
  }
}
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	40021000 	.word	0x40021000

080015b0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <RCC_APB1PeriphResetCmd+0x38>)
 80015c4:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <RCC_APB1PeriphResetCmd+0x38>)
 80015c6:	6911      	ldr	r1, [r2, #16]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	611a      	str	r2, [r3, #16]
 80015ce:	e006      	b.n	80015de <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <RCC_APB1PeriphResetCmd+0x38>)
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <RCC_APB1PeriphResetCmd+0x38>)
 80015d4:	6911      	ldr	r1, [r2, #16]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	43d2      	mvns	r2, r2
 80015da:	400a      	ands	r2, r1
 80015dc:	611a      	str	r2, [r3, #16]
  }
}
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000

080015ec <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <RCC_BackupResetCmd+0x1c>)
 80015f8:	79fa      	ldrb	r2, [r7, #7]
 80015fa:	601a      	str	r2, [r3, #0]
}
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	42420440 	.word	0x42420440

0800160c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <RCC_ClockSecuritySystemCmd+0x1c>)
 8001618:	79fa      	ldrb	r2, [r7, #7]
 800161a:	601a      	str	r2, [r3, #0]
}
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	4242004c 	.word	0x4242004c

0800162c <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <RCC_MCOConfig+0x1c>)
 8001638:	79fa      	ldrb	r2, [r7, #7]
 800163a:	701a      	strb	r2, [r3, #0]
}
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40021007 	.word	0x40021007

0800164c <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	095b      	lsrs	r3, r3, #5
 8001666:	b2db      	uxtb	r3, r3
 8001668:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d103      	bne.n	8001678 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <RCC_GetFlagStatus+0x70>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	e009      	b.n	800168c <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d103      	bne.n	8001686 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <RCC_GetFlagStatus+0x70>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e002      	b.n	800168c <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <RCC_GetFlagStatus+0x70>)
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80016a4:	2301      	movs	r3, #1
 80016a6:	74fb      	strb	r3, [r7, #19]
 80016a8:	e001      	b.n	80016ae <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 80016ae:	7cfb      	ldrb	r3, [r7, #19]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000

080016c0 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <RCC_ClearFlag+0x18>)
 80016c6:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <RCC_ClearFlag+0x18>)
 80016c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000

080016dc <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <RCC_GetITStatus+0x34>)
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 80016f6:	2301      	movs	r3, #1
 80016f8:	73fb      	strb	r3, [r7, #15]
 80016fa:	e001      	b.n	8001700 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <RCC_ClearITPendingBit+0x1c>)
 8001720:	79fa      	ldrb	r2, [r7, #7]
 8001722:	701a      	strb	r2, [r3, #0]
}
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	4002100a 	.word	0x4002100a

08001734 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4b78      	ldr	r3, [pc, #480]	; (8001920 <TIM_DeInit+0x1ec>)
 8001740:	429a      	cmp	r2, r3
 8001742:	d10a      	bne.n	800175a <TIM_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001744:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001748:	2101      	movs	r1, #1
 800174a:	f7ff ff13 	bl	8001574 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800174e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001752:	2100      	movs	r1, #0
 8001754:	f7ff ff0e 	bl	8001574 <RCC_APB2PeriphResetCmd>
 8001758:	e0de      	b.n	8001918 <TIM_DeInit+0x1e4>
  }     
  else if (TIMx == TIM2)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001760:	d108      	bne.n	8001774 <TIM_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001762:	2001      	movs	r0, #1
 8001764:	2101      	movs	r1, #1
 8001766:	f7ff ff23 	bl	80015b0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800176a:	2001      	movs	r0, #1
 800176c:	2100      	movs	r1, #0
 800176e:	f7ff ff1f 	bl	80015b0 <RCC_APB1PeriphResetCmd>
 8001772:	e0d1      	b.n	8001918 <TIM_DeInit+0x1e4>
  }
  else if (TIMx == TIM3)
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4b6b      	ldr	r3, [pc, #428]	; (8001924 <TIM_DeInit+0x1f0>)
 8001778:	429a      	cmp	r2, r3
 800177a:	d108      	bne.n	800178e <TIM_DeInit+0x5a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800177c:	2002      	movs	r0, #2
 800177e:	2101      	movs	r1, #1
 8001780:	f7ff ff16 	bl	80015b0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001784:	2002      	movs	r0, #2
 8001786:	2100      	movs	r1, #0
 8001788:	f7ff ff12 	bl	80015b0 <RCC_APB1PeriphResetCmd>
 800178c:	e0c4      	b.n	8001918 <TIM_DeInit+0x1e4>
  }
  else if (TIMx == TIM4)
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	4b65      	ldr	r3, [pc, #404]	; (8001928 <TIM_DeInit+0x1f4>)
 8001792:	429a      	cmp	r2, r3
 8001794:	d108      	bne.n	80017a8 <TIM_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001796:	2004      	movs	r0, #4
 8001798:	2101      	movs	r1, #1
 800179a:	f7ff ff09 	bl	80015b0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800179e:	2004      	movs	r0, #4
 80017a0:	2100      	movs	r1, #0
 80017a2:	f7ff ff05 	bl	80015b0 <RCC_APB1PeriphResetCmd>
 80017a6:	e0b7      	b.n	8001918 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM5)
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4b60      	ldr	r3, [pc, #384]	; (800192c <TIM_DeInit+0x1f8>)
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d108      	bne.n	80017c2 <TIM_DeInit+0x8e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80017b0:	2008      	movs	r0, #8
 80017b2:	2101      	movs	r1, #1
 80017b4:	f7ff fefc 	bl	80015b0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80017b8:	2008      	movs	r0, #8
 80017ba:	2100      	movs	r1, #0
 80017bc:	f7ff fef8 	bl	80015b0 <RCC_APB1PeriphResetCmd>
 80017c0:	e0aa      	b.n	8001918 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM6)
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	4b5a      	ldr	r3, [pc, #360]	; (8001930 <TIM_DeInit+0x1fc>)
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d108      	bne.n	80017dc <TIM_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80017ca:	2010      	movs	r0, #16
 80017cc:	2101      	movs	r1, #1
 80017ce:	f7ff feef 	bl	80015b0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80017d2:	2010      	movs	r0, #16
 80017d4:	2100      	movs	r1, #0
 80017d6:	f7ff feeb 	bl	80015b0 <RCC_APB1PeriphResetCmd>
 80017da:	e09d      	b.n	8001918 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM7)
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4b55      	ldr	r3, [pc, #340]	; (8001934 <TIM_DeInit+0x200>)
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d108      	bne.n	80017f6 <TIM_DeInit+0xc2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80017e4:	2020      	movs	r0, #32
 80017e6:	2101      	movs	r1, #1
 80017e8:	f7ff fee2 	bl	80015b0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80017ec:	2020      	movs	r0, #32
 80017ee:	2100      	movs	r1, #0
 80017f0:	f7ff fede 	bl	80015b0 <RCC_APB1PeriphResetCmd>
 80017f4:	e090      	b.n	8001918 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM8)
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	4b4f      	ldr	r3, [pc, #316]	; (8001938 <TIM_DeInit+0x204>)
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d10a      	bne.n	8001814 <TIM_DeInit+0xe0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80017fe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001802:	2101      	movs	r1, #1
 8001804:	f7ff feb6 	bl	8001574 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8001808:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800180c:	2100      	movs	r1, #0
 800180e:	f7ff feb1 	bl	8001574 <RCC_APB2PeriphResetCmd>
 8001812:	e081      	b.n	8001918 <TIM_DeInit+0x1e4>
  }
  else if (TIMx == TIM9)
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <TIM_DeInit+0x208>)
 8001818:	429a      	cmp	r2, r3
 800181a:	d10a      	bne.n	8001832 <TIM_DeInit+0xfe>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800181c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001820:	2101      	movs	r1, #1
 8001822:	f7ff fea7 	bl	8001574 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001826:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800182a:	2100      	movs	r1, #0
 800182c:	f7ff fea2 	bl	8001574 <RCC_APB2PeriphResetCmd>
 8001830:	e072      	b.n	8001918 <TIM_DeInit+0x1e4>
   }  
  else if (TIMx == TIM10)
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4b42      	ldr	r3, [pc, #264]	; (8001940 <TIM_DeInit+0x20c>)
 8001836:	429a      	cmp	r2, r3
 8001838:	d10a      	bne.n	8001850 <TIM_DeInit+0x11c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800183a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800183e:	2101      	movs	r1, #1
 8001840:	f7ff fe98 	bl	8001574 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001844:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001848:	2100      	movs	r1, #0
 800184a:	f7ff fe93 	bl	8001574 <RCC_APB2PeriphResetCmd>
 800184e:	e063      	b.n	8001918 <TIM_DeInit+0x1e4>
  }  
  else if (TIMx == TIM11) 
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <TIM_DeInit+0x210>)
 8001854:	429a      	cmp	r2, r3
 8001856:	d10a      	bne.n	800186e <TIM_DeInit+0x13a>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001858:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800185c:	2101      	movs	r1, #1
 800185e:	f7ff fe89 	bl	8001574 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001862:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001866:	2100      	movs	r1, #0
 8001868:	f7ff fe84 	bl	8001574 <RCC_APB2PeriphResetCmd>
 800186c:	e054      	b.n	8001918 <TIM_DeInit+0x1e4>
  }  
  else if (TIMx == TIM12)
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4b35      	ldr	r3, [pc, #212]	; (8001948 <TIM_DeInit+0x214>)
 8001872:	429a      	cmp	r2, r3
 8001874:	d108      	bne.n	8001888 <TIM_DeInit+0x154>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001876:	2040      	movs	r0, #64	; 0x40
 8001878:	2101      	movs	r1, #1
 800187a:	f7ff fe99 	bl	80015b0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800187e:	2040      	movs	r0, #64	; 0x40
 8001880:	2100      	movs	r1, #0
 8001882:	f7ff fe95 	bl	80015b0 <RCC_APB1PeriphResetCmd>
 8001886:	e047      	b.n	8001918 <TIM_DeInit+0x1e4>
  }  
  else if (TIMx == TIM13) 
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4b30      	ldr	r3, [pc, #192]	; (800194c <TIM_DeInit+0x218>)
 800188c:	429a      	cmp	r2, r3
 800188e:	d108      	bne.n	80018a2 <TIM_DeInit+0x16e>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001890:	2080      	movs	r0, #128	; 0x80
 8001892:	2101      	movs	r1, #1
 8001894:	f7ff fe8c 	bl	80015b0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001898:	2080      	movs	r0, #128	; 0x80
 800189a:	2100      	movs	r1, #0
 800189c:	f7ff fe88 	bl	80015b0 <RCC_APB1PeriphResetCmd>
 80018a0:	e03a      	b.n	8001918 <TIM_DeInit+0x1e4>
  }
  else if (TIMx == TIM14) 
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <TIM_DeInit+0x21c>)
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d10a      	bne.n	80018c0 <TIM_DeInit+0x18c>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80018aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018ae:	2101      	movs	r1, #1
 80018b0:	f7ff fe7e 	bl	80015b0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 80018b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018b8:	2100      	movs	r1, #0
 80018ba:	f7ff fe79 	bl	80015b0 <RCC_APB1PeriphResetCmd>
 80018be:	e02b      	b.n	8001918 <TIM_DeInit+0x1e4>
  }        
  else if (TIMx == TIM15)
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <TIM_DeInit+0x220>)
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d10a      	bne.n	80018de <TIM_DeInit+0x1aa>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 80018c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018cc:	2101      	movs	r1, #1
 80018ce:	f7ff fe51 	bl	8001574 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 80018d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018d6:	2100      	movs	r1, #0
 80018d8:	f7ff fe4c 	bl	8001574 <RCC_APB2PeriphResetCmd>
 80018dc:	e01c      	b.n	8001918 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM16)
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <TIM_DeInit+0x224>)
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d10a      	bne.n	80018fc <TIM_DeInit+0x1c8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 80018e6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80018ea:	2101      	movs	r1, #1
 80018ec:	f7ff fe42 	bl	8001574 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 80018f0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80018f4:	2100      	movs	r1, #0
 80018f6:	f7ff fe3d 	bl	8001574 <RCC_APB2PeriphResetCmd>
 80018fa:	e00d      	b.n	8001918 <TIM_DeInit+0x1e4>
  } 
  else
  {
    if (TIMx == TIM17)
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <TIM_DeInit+0x228>)
 8001900:	429a      	cmp	r2, r3
 8001902:	d109      	bne.n	8001918 <TIM_DeInit+0x1e4>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8001904:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001908:	2101      	movs	r1, #1
 800190a:	f7ff fe33 	bl	8001574 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 800190e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001912:	2100      	movs	r1, #0
 8001914:	f7ff fe2e 	bl	8001574 <RCC_APB2PeriphResetCmd>
    }  
  }
}
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40012c00 	.word	0x40012c00
 8001924:	40000400 	.word	0x40000400
 8001928:	40000800 	.word	0x40000800
 800192c:	40000c00 	.word	0x40000c00
 8001930:	40001000 	.word	0x40001000
 8001934:	40001400 	.word	0x40001400
 8001938:	40013400 	.word	0x40013400
 800193c:	40014c00 	.word	0x40014c00
 8001940:	40015000 	.word	0x40015000
 8001944:	40015400 	.word	0x40015400
 8001948:	40001800 	.word	0x40001800
 800194c:	40001c00 	.word	0x40001c00
 8001950:	40002000 	.word	0x40002000
 8001954:	40014000 	.word	0x40014000
 8001958:	40014400 	.word	0x40014400
 800195c:	40014800 	.word	0x40014800

08001960 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
  *   structure that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <TIM_TimeBaseInit+0xd0>)
 8001978:	429a      	cmp	r2, r3
 800197a:	d013      	beq.n	80019a4 <TIM_TimeBaseInit+0x44>
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <TIM_TimeBaseInit+0xd4>)
 8001980:	429a      	cmp	r2, r3
 8001982:	d00f      	beq.n	80019a4 <TIM_TimeBaseInit+0x44>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800198a:	d00b      	beq.n	80019a4 <TIM_TimeBaseInit+0x44>
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <TIM_TimeBaseInit+0xd8>)
 8001990:	429a      	cmp	r2, r3
 8001992:	d007      	beq.n	80019a4 <TIM_TimeBaseInit+0x44>
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <TIM_TimeBaseInit+0xdc>)
 8001998:	429a      	cmp	r2, r3
 800199a:	d003      	beq.n	80019a4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <TIM_TimeBaseInit+0xe0>)
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d108      	bne.n	80019b6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80019a4:	89fb      	ldrh	r3, [r7, #14]
 80019a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019aa:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	885a      	ldrh	r2, [r3, #2]
 80019b0:	89fb      	ldrh	r3, [r7, #14]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <TIM_TimeBaseInit+0xe4>)
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d00c      	beq.n	80019d8 <TIM_TimeBaseInit+0x78>
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <TIM_TimeBaseInit+0xe8>)
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d008      	beq.n	80019d8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80019c6:	89fb      	ldrh	r3, [r7, #14]
 80019c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019cc:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	88da      	ldrh	r2, [r3, #6]
 80019d2:	89fb      	ldrh	r3, [r7, #14]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	89fa      	ldrh	r2, [r7, #14]
 80019dc:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	889a      	ldrh	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	881a      	ldrh	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <TIM_TimeBaseInit+0xd0>)
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d00f      	beq.n	8001a16 <TIM_TimeBaseInit+0xb6>
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <TIM_TimeBaseInit+0xd4>)
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d00b      	beq.n	8001a16 <TIM_TimeBaseInit+0xb6>
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <TIM_TimeBaseInit+0xec>)
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d007      	beq.n	8001a16 <TIM_TimeBaseInit+0xb6>
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <TIM_TimeBaseInit+0xf0>)
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d003      	beq.n	8001a16 <TIM_TimeBaseInit+0xb6>
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <TIM_TimeBaseInit+0xf4>)
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d104      	bne.n	8001a20 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	7a1b      	ldrb	r3, [r3, #8]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	829a      	strh	r2, [r3, #20]
}
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40012c00 	.word	0x40012c00
 8001a34:	40013400 	.word	0x40013400
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40000800 	.word	0x40000800
 8001a40:	40000c00 	.word	0x40000c00
 8001a44:	40001000 	.word	0x40001000
 8001a48:	40001400 	.word	0x40001400
 8001a4c:	40014000 	.word	0x40014000
 8001a50:	40014400 	.word	0x40014400
 8001a54:	40014800 	.word	0x40014800

08001a58 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	817b      	strh	r3, [r7, #10]
 8001a66:	2300      	movs	r3, #0
 8001a68:	81fb      	strh	r3, [r7, #14]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	8c1b      	ldrh	r3, [r3, #32]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	8c1b      	ldrh	r3, [r3, #32]
 8001a82:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	889b      	ldrh	r3, [r3, #4]
 8001a88:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	8b1b      	ldrh	r3, [r3, #24]
 8001a8e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8001a90:	897b      	ldrh	r3, [r7, #10]
 8001a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a96:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001a98:	897b      	ldrh	r3, [r7, #10]
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	881a      	ldrh	r2, [r3, #0]
 8001aa4:	897b      	ldrh	r3, [r7, #10]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001aaa:	89fb      	ldrh	r3, [r7, #14]
 8001aac:	f023 0302 	bic.w	r3, r3, #2
 8001ab0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	891a      	ldrh	r2, [r3, #8]
 8001ab6:	89fb      	ldrh	r3, [r7, #14]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	885a      	ldrh	r2, [r3, #2]
 8001ac0:	89fb      	ldrh	r3, [r7, #14]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <TIM_OC1Init+0x104>)
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d00f      	beq.n	8001aee <TIM_OC1Init+0x96>
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <TIM_OC1Init+0x108>)
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d00b      	beq.n	8001aee <TIM_OC1Init+0x96>
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <TIM_OC1Init+0x10c>)
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d007      	beq.n	8001aee <TIM_OC1Init+0x96>
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <TIM_OC1Init+0x110>)
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d003      	beq.n	8001aee <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <TIM_OC1Init+0x114>)
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d123      	bne.n	8001b36 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8001aee:	89fb      	ldrh	r3, [r7, #14]
 8001af0:	f023 0308 	bic.w	r3, r3, #8
 8001af4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	895a      	ldrh	r2, [r3, #10]
 8001afa:	89fb      	ldrh	r3, [r7, #14]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001b00:	89fb      	ldrh	r3, [r7, #14]
 8001b02:	f023 0304 	bic.w	r3, r3, #4
 8001b06:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	889a      	ldrh	r2, [r3, #4]
 8001b0c:	89fb      	ldrh	r3, [r7, #14]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8001b12:	89bb      	ldrh	r3, [r7, #12]
 8001b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b18:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8001b1a:	89bb      	ldrh	r3, [r7, #12]
 8001b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b20:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	899a      	ldrh	r2, [r3, #12]
 8001b26:	89bb      	ldrh	r3, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	89da      	ldrh	r2, [r3, #14]
 8001b30:	89bb      	ldrh	r3, [r7, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	89ba      	ldrh	r2, [r7, #12]
 8001b3a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	897a      	ldrh	r2, [r7, #10]
 8001b40:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	88da      	ldrh	r2, [r3, #6]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	89fa      	ldrh	r2, [r7, #14]
 8001b4e:	841a      	strh	r2, [r3, #32]
}
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40012c00 	.word	0x40012c00
 8001b60:	40013400 	.word	0x40013400
 8001b64:	40014000 	.word	0x40014000
 8001b68:	40014400 	.word	0x40014400
 8001b6c:	40014800 	.word	0x40014800

08001b70 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	817b      	strh	r3, [r7, #10]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	81fb      	strh	r3, [r7, #14]
 8001b82:	2300      	movs	r3, #0
 8001b84:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	8c1b      	ldrh	r3, [r3, #32]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f023 0310 	bic.w	r3, r3, #16
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	8c1b      	ldrh	r3, [r3, #32]
 8001b9a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	889b      	ldrh	r3, [r3, #4]
 8001ba0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	8b1b      	ldrh	r3, [r3, #24]
 8001ba6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 8001ba8:	897b      	ldrh	r3, [r7, #10]
 8001baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bae:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8001bb0:	897b      	ldrh	r3, [r7, #10]
 8001bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb6:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8001bc6:	89fb      	ldrh	r3, [r7, #14]
 8001bc8:	f023 0320 	bic.w	r3, r3, #32
 8001bcc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	891b      	ldrh	r3, [r3, #8]
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	885b      	ldrh	r3, [r3, #2]
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	89fb      	ldrh	r3, [r7, #14]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <TIM_OC2Init+0x108>)
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d003      	beq.n	8001bfa <TIM_OC2Init+0x8a>
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <TIM_OC2Init+0x10c>)
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d12b      	bne.n	8001c52 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
 8001bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c00:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	895b      	ldrh	r3, [r3, #10]
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	89fb      	ldrh	r3, [r7, #14]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8001c10:	89fb      	ldrh	r3, [r7, #14]
 8001c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c16:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	889b      	ldrh	r3, [r3, #4]
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	89fb      	ldrh	r3, [r7, #14]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8001c26:	89bb      	ldrh	r3, [r7, #12]
 8001c28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c2c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8001c2e:	89bb      	ldrh	r3, [r7, #12]
 8001c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c34:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	899b      	ldrh	r3, [r3, #12]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	89bb      	ldrh	r3, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	89db      	ldrh	r3, [r3, #14]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	89bb      	ldrh	r3, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	89ba      	ldrh	r2, [r7, #12]
 8001c56:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	897a      	ldrh	r2, [r7, #10]
 8001c5c:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	88da      	ldrh	r2, [r3, #6]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	89fa      	ldrh	r2, [r7, #14]
 8001c6a:	841a      	strh	r2, [r3, #32]
}
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40012c00 	.word	0x40012c00
 8001c7c:	40013400 	.word	0x40013400

08001c80 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	817b      	strh	r3, [r7, #10]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	81fb      	strh	r3, [r7, #14]
 8001c92:	2300      	movs	r3, #0
 8001c94:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	8c1b      	ldrh	r3, [r3, #32]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	8c1b      	ldrh	r3, [r3, #32]
 8001caa:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	889b      	ldrh	r3, [r3, #4]
 8001cb0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	8b9b      	ldrh	r3, [r3, #28]
 8001cb6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 8001cb8:	897b      	ldrh	r3, [r7, #10]
 8001cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cbe:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8001cc0:	897b      	ldrh	r3, [r7, #10]
 8001cc2:	f023 0303 	bic.w	r3, r3, #3
 8001cc6:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	881a      	ldrh	r2, [r3, #0]
 8001ccc:	897b      	ldrh	r3, [r7, #10]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8001cd2:	89fb      	ldrh	r3, [r7, #14]
 8001cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001cd8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	891b      	ldrh	r3, [r3, #8]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	89fb      	ldrh	r3, [r7, #14]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	885b      	ldrh	r3, [r3, #2]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	89fb      	ldrh	r3, [r7, #14]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <TIM_OC3Init+0x104>)
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d003      	beq.n	8001d06 <TIM_OC3Init+0x86>
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <TIM_OC3Init+0x108>)
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d12b      	bne.n	8001d5e <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8001d06:	89fb      	ldrh	r3, [r7, #14]
 8001d08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d0c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	895b      	ldrh	r3, [r3, #10]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8001d1c:	89fb      	ldrh	r3, [r7, #14]
 8001d1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d22:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	889b      	ldrh	r3, [r3, #4]
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	89fb      	ldrh	r3, [r7, #14]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	81fb      	strh	r3, [r7, #14]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8001d32:	89bb      	ldrh	r3, [r7, #12]
 8001d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d38:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8001d3a:	89bb      	ldrh	r3, [r7, #12]
 8001d3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d40:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	899b      	ldrh	r3, [r3, #12]
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	89bb      	ldrh	r3, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	89db      	ldrh	r3, [r3, #14]
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	89bb      	ldrh	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	89ba      	ldrh	r2, [r7, #12]
 8001d62:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	897a      	ldrh	r2, [r7, #10]
 8001d68:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	88da      	ldrh	r2, [r3, #6]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	89fa      	ldrh	r2, [r7, #14]
 8001d76:	841a      	strh	r2, [r3, #32]
}
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40012c00 	.word	0x40012c00
 8001d88:	40013400 	.word	0x40013400

08001d8c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	81bb      	strh	r3, [r7, #12]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	817b      	strh	r3, [r7, #10]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	8c1b      	ldrh	r3, [r3, #32]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	8c1b      	ldrh	r3, [r3, #32]
 8001db6:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	8b9b      	ldrh	r3, [r3, #28]
 8001dc2:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 8001dc4:	89bb      	ldrh	r3, [r7, #12]
 8001dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dca:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8001dcc:	89bb      	ldrh	r3, [r7, #12]
 8001dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd2:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	89bb      	ldrh	r3, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8001de2:	897b      	ldrh	r3, [r7, #10]
 8001de4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001de8:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	891b      	ldrh	r3, [r3, #8]
 8001dee:	031b      	lsls	r3, r3, #12
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	897b      	ldrh	r3, [r7, #10]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	885b      	ldrh	r3, [r3, #2]
 8001dfc:	031b      	lsls	r3, r3, #12
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	897b      	ldrh	r3, [r7, #10]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <TIM_OC4Init+0xc8>)
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d003      	beq.n	8001e16 <TIM_OC4Init+0x8a>
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <TIM_OC4Init+0xcc>)
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d10a      	bne.n	8001e2c <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8001e16:	89fb      	ldrh	r3, [r7, #14]
 8001e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e1c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	899b      	ldrh	r3, [r3, #12]
 8001e22:	019b      	lsls	r3, r3, #6
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	89fb      	ldrh	r3, [r7, #14]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	89fa      	ldrh	r2, [r7, #14]
 8001e30:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	89ba      	ldrh	r2, [r7, #12]
 8001e36:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	88da      	ldrh	r2, [r3, #6]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	897a      	ldrh	r2, [r7, #10]
 8001e46:	841a      	strh	r2, [r3, #32]
}
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40012c00 	.word	0x40012c00
 8001e58:	40013400 	.word	0x40013400

08001e5c <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10f      	bne.n	8001e8e <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	8859      	ldrh	r1, [r3, #2]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	889a      	ldrh	r2, [r3, #4]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	891b      	ldrh	r3, [r3, #8]
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f001 f966 	bl	800314c <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	88db      	ldrh	r3, [r3, #6]
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4619      	mov	r1, r3
 8001e88:	f001 f816 	bl	8002eb8 <TIM_SetIC1Prescaler>
 8001e8c:	e036      	b.n	8001efc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d10f      	bne.n	8001eb6 <TIM_ICInit+0x5a>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	8859      	ldrh	r1, [r3, #2]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	889a      	ldrh	r2, [r3, #4]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	891b      	ldrh	r3, [r3, #8]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f001 f98e 	bl	80031c4 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	88db      	ldrh	r3, [r3, #6]
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f001 f81e 	bl	8002ef0 <TIM_SetIC2Prescaler>
 8001eb4:	e022      	b.n	8001efc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d10f      	bne.n	8001ede <TIM_ICInit+0x82>
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	8859      	ldrh	r1, [r3, #2]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	889a      	ldrh	r2, [r3, #4]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	891b      	ldrh	r3, [r3, #8]
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f001 f9c0 	bl	8003250 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	88db      	ldrh	r3, [r3, #6]
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f001 f828 	bl	8002f2c <TIM_SetIC3Prescaler>
 8001edc:	e00e      	b.n	8001efc <TIM_ICInit+0xa0>
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	8859      	ldrh	r1, [r3, #2]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	889a      	ldrh	r2, [r3, #4]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	891b      	ldrh	r3, [r3, #8]
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f001 f9f2 	bl	80032d4 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	88db      	ldrh	r3, [r3, #6]
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f001 f834 	bl	8002f64 <TIM_SetIC4Prescaler>
  }
}
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop

08001f04 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8001f12:	2301      	movs	r3, #1
 8001f14:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	885b      	ldrh	r3, [r3, #2]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d102      	bne.n	8001f24 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	81fb      	strh	r3, [r7, #14]
 8001f22:	e001      	b.n	8001f28 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8001f24:	2300      	movs	r3, #0
 8001f26:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	889b      	ldrh	r3, [r3, #4]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d102      	bne.n	8001f36 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8001f30:	2302      	movs	r3, #2
 8001f32:	81bb      	strh	r3, [r7, #12]
 8001f34:	e001      	b.n	8001f3a <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8001f36:	2301      	movs	r3, #1
 8001f38:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d11c      	bne.n	8001f7c <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	8859      	ldrh	r1, [r3, #2]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	889a      	ldrh	r2, [r3, #4]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	891b      	ldrh	r3, [r3, #8]
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f001 f8fc 	bl	800314c <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	88db      	ldrh	r3, [r3, #6]
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f000 ffac 	bl	8002eb8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	891b      	ldrh	r3, [r3, #8]
 8001f64:	89f9      	ldrh	r1, [r7, #14]
 8001f66:	89ba      	ldrh	r2, [r7, #12]
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f001 f92b 	bl	80031c4 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	88db      	ldrh	r3, [r3, #6]
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4619      	mov	r1, r3
 8001f76:	f000 ffbb 	bl	8002ef0 <TIM_SetIC2Prescaler>
 8001f7a:	e01b      	b.n	8001fb4 <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	8859      	ldrh	r1, [r3, #2]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	889a      	ldrh	r2, [r3, #4]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	891b      	ldrh	r3, [r3, #8]
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f001 f91b 	bl	80031c4 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	88db      	ldrh	r3, [r3, #6]
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	4619      	mov	r1, r3
 8001f96:	f000 ffab 	bl	8002ef0 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	891b      	ldrh	r3, [r3, #8]
 8001f9e:	89f9      	ldrh	r1, [r7, #14]
 8001fa0:	89ba      	ldrh	r2, [r7, #12]
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f001 f8d2 	bl	800314c <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	88db      	ldrh	r3, [r3, #6]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f000 ff82 	bl	8002eb8 <TIM_SetIC1Prescaler>
  }
}
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop

08001fbc <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *   contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	881a      	ldrh	r2, [r3, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	885b      	ldrh	r3, [r3, #2]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201a:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	721a      	strb	r2, [r3, #8]
}
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop

08002040 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	81da      	strh	r2, [r3, #14]
}
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop

08002084 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct : pointer to a TIM_ICInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	811a      	strh	r2, [r3, #8]
}
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *   will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	819a      	strh	r2, [r3, #12]
}
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d008      	beq.n	8002114 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	801a      	strh	r2, [r3, #0]
 8002112:	e007      	b.n	8002124 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	801a      	strh	r2, [r3, #0]
  }
}
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop

08002130 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00c      	beq.n	800215c <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002148:	b29b      	uxth	r3, r3
 800214a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800214e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002152:	b29a      	uxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800215a:	e009      	b.n	8002170 <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002162:	b29b      	uxth	r3, r3
 8002164:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002168:	b29a      	uxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop

0800217c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	460a      	mov	r2, r1
 8002188:	807a      	strh	r2, [r7, #2]
 800218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	899b      	ldrh	r3, [r3, #12]
 8002196:	b29a      	uxth	r2, r3
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	4313      	orrs	r3, r2
 800219c:	b29a      	uxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	819a      	strh	r2, [r3, #12]
 80021a2:	e009      	b.n	80021b8 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	899b      	ldrh	r3, [r3, #12]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	887b      	ldrh	r3, [r7, #2]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4013      	ands	r3, r2
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	819a      	strh	r2, [r3, #12]
  }
}
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop

080021c4 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	887a      	ldrh	r2, [r7, #2]
 80021d4:	829a      	strh	r2, [r3, #20]
}
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Byte and TIM_DMABurstLength_18Bytes.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	460a      	mov	r2, r1
 80021ec:	807a      	strh	r2, [r7, #2]
 80021ee:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80021f0:	887a      	ldrh	r2, [r7, #2]
 80021f2:	883b      	ldrh	r3, [r7, #0]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	460a      	mov	r2, r1
 8002214:	807a      	strh	r2, [r7, #2]
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	899b      	ldrh	r3, [r3, #12]
 8002222:	b29a      	uxth	r2, r3
 8002224:	887b      	ldrh	r3, [r7, #2]
 8002226:	4313      	orrs	r3, r2
 8002228:	b29a      	uxth	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	819a      	strh	r2, [r3, #12]
 800222e:	e009      	b.n	8002244 <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	899b      	ldrh	r3, [r3, #12]
 8002234:	b29a      	uxth	r2, r3
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	43db      	mvns	r3, r3
 800223a:	b29b      	uxth	r3, r3
 800223c:	4013      	ands	r3, r2
 800223e:	b29a      	uxth	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	819a      	strh	r2, [r3, #12]
  }
}
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop

08002250 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *   to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	891b      	ldrh	r3, [r3, #8]
 800225c:	b29b      	uxth	r3, r3
 800225e:	f023 0307 	bic.w	r3, r3, #7
 8002262:	b29a      	uxth	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	811a      	strh	r2, [r3, #8]
}
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop

08002274 <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8002280:	887b      	ldrh	r3, [r7, #2]
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4619      	mov	r1, r3
 8002286:	f000 f8c9 	bl	800241c <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	891b      	ldrh	r3, [r3, #8]
 800228e:	b29b      	uxth	r3, r3
 8002290:	f043 0307 	orr.w	r3, r3, #7
 8002294:	b29a      	uxth	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	811a      	strh	r2, [r3, #8]
}
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	8179      	strh	r1, [r7, #10]
 80022aa:	813a      	strh	r2, [r7, #8]
 80022ac:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80022ae:	897b      	ldrh	r3, [r7, #10]
 80022b0:	2b60      	cmp	r3, #96	; 0x60
 80022b2:	d107      	bne.n	80022c4 <TIM_TIxExternalClockConfig+0x24>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80022b4:	893a      	ldrh	r2, [r7, #8]
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	4611      	mov	r1, r2
 80022bc:	2201      	movs	r2, #1
 80022be:	f000 ff81 	bl	80031c4 <TI2_Config>
 80022c2:	e006      	b.n	80022d2 <TIM_TIxExternalClockConfig+0x32>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80022c4:	893a      	ldrh	r2, [r7, #8]
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	4611      	mov	r1, r2
 80022cc:	2201      	movs	r2, #1
 80022ce:	f000 ff3d 	bl	800314c <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 80022d2:	897b      	ldrh	r3, [r7, #10]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	4619      	mov	r1, r3
 80022d8:	f000 f8a0 	bl	800241c <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	891b      	ldrh	r3, [r3, #8]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	f043 0307 	orr.w	r3, r3, #7
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	811a      	strh	r2, [r3, #8]
}
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop

080022f4 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	8179      	strh	r1, [r7, #10]
 80022fe:	813a      	strh	r2, [r7, #8]
 8002300:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002306:	8979      	ldrh	r1, [r7, #10]
 8002308:	893a      	ldrh	r2, [r7, #8]
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f831 	bl	8002374 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	891b      	ldrh	r3, [r3, #8]
 8002316:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002318:	8afb      	ldrh	r3, [r7, #22]
 800231a:	f023 0307 	bic.w	r3, r3, #7
 800231e:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8002320:	8afb      	ldrh	r3, [r7, #22]
 8002322:	f043 0307 	orr.w	r3, r3, #7
 8002326:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8002328:	8afb      	ldrh	r3, [r7, #22]
 800232a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232e:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 8002330:	8afb      	ldrh	r3, [r7, #22]
 8002332:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002336:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8afa      	ldrh	r2, [r7, #22]
 800233c:	811a      	strh	r2, [r3, #8]
}
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	8179      	strh	r1, [r7, #10]
 800234e:	813a      	strh	r2, [r7, #8]
 8002350:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002352:	8979      	ldrh	r1, [r7, #10]
 8002354:	893a      	ldrh	r2, [r7, #8]
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f80b 	bl	8002374 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	891b      	ldrh	r3, [r3, #8]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	811a      	strh	r2, [r3, #8]
}
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	8179      	strh	r1, [r7, #10]
 800237e:	813a      	strh	r2, [r7, #8]
 8002380:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	891b      	ldrh	r3, [r3, #8]
 800238a:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
 800238c:	8afb      	ldrh	r3, [r7, #22]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	b29a      	uxth	r2, r3
 8002398:	893b      	ldrh	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
 800239c:	b29a      	uxth	r2, r3
 800239e:	897b      	ldrh	r3, [r7, #10]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	8afb      	ldrh	r3, [r7, #22]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8afa      	ldrh	r2, [r7, #22]
 80023ae:	811a      	strh	r2, [r3, #8]
}
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	460a      	mov	r2, r1
 80023c8:	807a      	strh	r2, [r7, #2]
 80023ca:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	883a      	ldrh	r2, [r7, #0]
 80023d6:	829a      	strh	r2, [r3, #20]
}
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop

080023e4 <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80023fa:	89fb      	ldrh	r3, [r7, #14]
 80023fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002400:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8002402:	89fa      	ldrh	r2, [r7, #14]
 8002404:	887b      	ldrh	r3, [r7, #2]
 8002406:	4313      	orrs	r3, r2
 8002408:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	89fa      	ldrh	r2, [r7, #14]
 800240e:	801a      	strh	r2, [r3, #0]
}
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop

0800241c <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	891b      	ldrh	r3, [r3, #8]
 8002430:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8002432:	89fb      	ldrh	r3, [r7, #14]
 8002434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002438:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800243a:	89fa      	ldrh	r2, [r7, #14]
 800243c:	887b      	ldrh	r3, [r7, #2]
 800243e:	4313      	orrs	r3, r2
 8002440:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	89fa      	ldrh	r2, [r7, #14]
 8002446:	811a      	strh	r2, [r3, #8]
}
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop

08002454 <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	8179      	strh	r1, [r7, #10]
 800245e:	813a      	strh	r2, [r7, #8]
 8002460:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	891b      	ldrh	r3, [r3, #8]
 8002472:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8b1b      	ldrh	r3, [r3, #24]
 8002478:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8c1b      	ldrh	r3, [r3, #32]
 800247e:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002480:	8afb      	ldrh	r3, [r7, #22]
 8002482:	f023 0307 	bic.w	r3, r3, #7
 8002486:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8002488:	8afa      	ldrh	r2, [r7, #22]
 800248a:	897b      	ldrh	r3, [r7, #10]
 800248c:	4313      	orrs	r3, r2
 800248e:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8002490:	8abb      	ldrh	r3, [r7, #20]
 8002492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002496:	f023 0303 	bic.w	r3, r3, #3
 800249a:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800249c:	8abb      	ldrh	r3, [r7, #20]
 800249e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 80024a8:	8a7b      	ldrh	r3, [r7, #18]
 80024aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80024ae:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	893b      	ldrh	r3, [r7, #8]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	8a7b      	ldrh	r3, [r7, #18]
 80024be:	4313      	orrs	r3, r2
 80024c0:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8afa      	ldrh	r2, [r7, #22]
 80024c6:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8aba      	ldrh	r2, [r7, #20]
 80024cc:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8a7a      	ldrh	r2, [r7, #18]
 80024d2:	841a      	strh	r2, [r3, #32]
}
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop

080024e0 <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	8b1b      	ldrh	r3, [r3, #24]
 80024f4:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 80024f6:	89fb      	ldrh	r3, [r7, #14]
 80024f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fc:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80024fe:	89fa      	ldrh	r2, [r7, #14]
 8002500:	887b      	ldrh	r3, [r7, #2]
 8002502:	4313      	orrs	r3, r2
 8002504:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	89fa      	ldrh	r2, [r7, #14]
 800250a:	831a      	strh	r2, [r3, #24]
}
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop

08002518 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	8b1b      	ldrh	r3, [r3, #24]
 800252c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 800252e:	89fb      	ldrh	r3, [r7, #14]
 8002530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002534:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	b29a      	uxth	r2, r3
 800253c:	89fb      	ldrh	r3, [r7, #14]
 800253e:	4313      	orrs	r3, r2
 8002540:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	89fa      	ldrh	r2, [r7, #14]
 8002546:	831a      	strh	r2, [r3, #24]
}
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop

08002554 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8b9b      	ldrh	r3, [r3, #28]
 8002568:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 800256a:	89fb      	ldrh	r3, [r7, #14]
 800256c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002570:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002572:	89fa      	ldrh	r2, [r7, #14]
 8002574:	887b      	ldrh	r3, [r7, #2]
 8002576:	4313      	orrs	r3, r2
 8002578:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	89fa      	ldrh	r2, [r7, #14]
 800257e:	839a      	strh	r2, [r3, #28]
}
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop

0800258c <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	8b9b      	ldrh	r3, [r3, #28]
 80025a0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 80025a2:	89fb      	ldrh	r3, [r7, #14]
 80025a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a8:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	89fb      	ldrh	r3, [r7, #14]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	89fa      	ldrh	r2, [r7, #14]
 80025ba:	839a      	strh	r2, [r3, #28]
}
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop

080025c8 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d008      	beq.n	80025ec <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	801a      	strh	r2, [r3, #0]
 80025ea:	e007      	b.n	80025fc <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	801a      	strh	r2, [r3, #0]
  }
}
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop

08002608 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	889b      	ldrh	r3, [r3, #4]
 800261e:	b29b      	uxth	r3, r3
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	b29a      	uxth	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	809a      	strh	r2, [r3, #4]
 800262a:	e007      	b.n	800263c <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	889b      	ldrh	r3, [r3, #4]
 8002630:	b29b      	uxth	r3, r3
 8002632:	f023 0304 	bic.w	r3, r3, #4
 8002636:	b29a      	uxth	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	809a      	strh	r2, [r3, #4]
  }
}
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop

08002648 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	889b      	ldrh	r3, [r3, #4]
 800265e:	b29b      	uxth	r3, r3
 8002660:	f043 0308 	orr.w	r3, r3, #8
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	809a      	strh	r2, [r3, #4]
 800266a:	e007      	b.n	800267c <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	889b      	ldrh	r3, [r3, #4]
 8002670:	b29b      	uxth	r3, r3
 8002672:	f023 0308 	bic.w	r3, r3, #8
 8002676:	b29a      	uxth	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	809a      	strh	r2, [r3, #4]
  }
}
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop

08002688 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	889b      	ldrh	r3, [r3, #4]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	809a      	strh	r2, [r3, #4]
 80026aa:	e007      	b.n	80026bc <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	889b      	ldrh	r3, [r3, #4]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	809a      	strh	r2, [r3, #4]
  }
}
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop

080026c8 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	8b1b      	ldrh	r3, [r3, #24]
 80026dc:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 80026de:	89fb      	ldrh	r3, [r7, #14]
 80026e0:	f023 0308 	bic.w	r3, r3, #8
 80026e4:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80026e6:	89fa      	ldrh	r2, [r7, #14]
 80026e8:	887b      	ldrh	r3, [r7, #2]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	89fa      	ldrh	r2, [r7, #14]
 80026f2:	831a      	strh	r2, [r3, #24]
}
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop

08002700 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8b1b      	ldrh	r3, [r3, #24]
 8002714:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8002716:	89fb      	ldrh	r3, [r7, #14]
 8002718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800271c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	b29a      	uxth	r2, r3
 8002724:	89fb      	ldrh	r3, [r7, #14]
 8002726:	4313      	orrs	r3, r2
 8002728:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	89fa      	ldrh	r2, [r7, #14]
 800272e:	831a      	strh	r2, [r3, #24]
}
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop

0800273c <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8b9b      	ldrh	r3, [r3, #28]
 8002750:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8002752:	89fb      	ldrh	r3, [r7, #14]
 8002754:	f023 0308 	bic.w	r3, r3, #8
 8002758:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800275a:	89fa      	ldrh	r2, [r7, #14]
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	4313      	orrs	r3, r2
 8002760:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	89fa      	ldrh	r2, [r7, #14]
 8002766:	839a      	strh	r2, [r3, #28]
}
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop

08002774 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8b9b      	ldrh	r3, [r3, #28]
 8002788:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 800278a:	89fb      	ldrh	r3, [r7, #14]
 800278c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002790:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	b29a      	uxth	r2, r3
 8002798:	89fb      	ldrh	r3, [r7, #14]
 800279a:	4313      	orrs	r3, r2
 800279c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	89fa      	ldrh	r2, [r7, #14]
 80027a2:	839a      	strh	r2, [r3, #28]
}
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop

080027b0 <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	8b1b      	ldrh	r3, [r3, #24]
 80027c4:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 80027c6:	89fb      	ldrh	r3, [r7, #14]
 80027c8:	f023 0304 	bic.w	r3, r3, #4
 80027cc:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 80027ce:	89fa      	ldrh	r2, [r7, #14]
 80027d0:	887b      	ldrh	r3, [r7, #2]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	89fa      	ldrh	r2, [r7, #14]
 80027da:	831a      	strh	r2, [r3, #24]
}
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop

080027e8 <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	8b1b      	ldrh	r3, [r3, #24]
 80027fc:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 80027fe:	89fb      	ldrh	r3, [r7, #14]
 8002800:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002804:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	b29a      	uxth	r2, r3
 800280c:	89fb      	ldrh	r3, [r7, #14]
 800280e:	4313      	orrs	r3, r2
 8002810:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	89fa      	ldrh	r2, [r7, #14]
 8002816:	831a      	strh	r2, [r3, #24]
}
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop

08002824 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	8b9b      	ldrh	r3, [r3, #28]
 8002838:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 800283a:	89fb      	ldrh	r3, [r7, #14]
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002842:	89fa      	ldrh	r2, [r7, #14]
 8002844:	887b      	ldrh	r3, [r7, #2]
 8002846:	4313      	orrs	r3, r2
 8002848:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	89fa      	ldrh	r2, [r7, #14]
 800284e:	839a      	strh	r2, [r3, #28]
}
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop

0800285c <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	8b9b      	ldrh	r3, [r3, #28]
 8002870:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 8002872:	89fb      	ldrh	r3, [r7, #14]
 8002874:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002878:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800287a:	887b      	ldrh	r3, [r7, #2]
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	b29a      	uxth	r2, r3
 8002880:	89fb      	ldrh	r3, [r7, #14]
 8002882:	4313      	orrs	r3, r2
 8002884:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	89fa      	ldrh	r2, [r7, #14]
 800288a:	839a      	strh	r2, [r3, #28]
}
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop

08002898 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8b1b      	ldrh	r3, [r3, #24]
 80028ac:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 80028ae:	89fb      	ldrh	r3, [r7, #14]
 80028b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028b4:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 80028b6:	89fa      	ldrh	r2, [r7, #14]
 80028b8:	887b      	ldrh	r3, [r7, #2]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	89fa      	ldrh	r2, [r7, #14]
 80028c2:	831a      	strh	r2, [r3, #24]
}
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop

080028d0 <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8b1b      	ldrh	r3, [r3, #24]
 80028e4:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 80028e6:	89fb      	ldrh	r3, [r7, #14]
 80028e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80028ec:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	89fb      	ldrh	r3, [r7, #14]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	89fa      	ldrh	r2, [r7, #14]
 80028fe:	831a      	strh	r2, [r3, #24]
}
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop

0800290c <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	8b9b      	ldrh	r3, [r3, #28]
 8002920:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 8002922:	89fb      	ldrh	r3, [r7, #14]
 8002924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002928:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800292a:	89fa      	ldrh	r2, [r7, #14]
 800292c:	887b      	ldrh	r3, [r7, #2]
 800292e:	4313      	orrs	r3, r2
 8002930:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	89fa      	ldrh	r2, [r7, #14]
 8002936:	839a      	strh	r2, [r3, #28]
}
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop

08002944 <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8b9b      	ldrh	r3, [r3, #28]
 8002958:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 800295a:	89fb      	ldrh	r3, [r7, #14]
 800295c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002960:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002962:	887b      	ldrh	r3, [r7, #2]
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	b29a      	uxth	r2, r3
 8002968:	89fb      	ldrh	r3, [r7, #14]
 800296a:	4313      	orrs	r3, r2
 800296c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	89fa      	ldrh	r2, [r7, #14]
 8002972:	839a      	strh	r2, [r3, #28]
}
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop

08002980 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	8c1b      	ldrh	r3, [r3, #32]
 8002994:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 8002996:	89fb      	ldrh	r3, [r7, #14]
 8002998:	f023 0302 	bic.w	r3, r3, #2
 800299c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 800299e:	89fa      	ldrh	r2, [r7, #14]
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	89fa      	ldrh	r2, [r7, #14]
 80029aa:	841a      	strh	r2, [r3, #32]
}
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop

080029b8 <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	8c1b      	ldrh	r3, [r3, #32]
 80029cc:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 80029ce:	89fb      	ldrh	r3, [r7, #14]
 80029d0:	f023 0308 	bic.w	r3, r3, #8
 80029d4:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 80029d6:	89fa      	ldrh	r2, [r7, #14]
 80029d8:	887b      	ldrh	r3, [r7, #2]
 80029da:	4313      	orrs	r3, r2
 80029dc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	89fa      	ldrh	r2, [r7, #14]
 80029e2:	841a      	strh	r2, [r3, #32]
}
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8c1b      	ldrh	r3, [r3, #32]
 8002a04:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 8002a06:	89fb      	ldrh	r3, [r7, #14]
 8002a08:	f023 0320 	bic.w	r3, r3, #32
 8002a0c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	89fb      	ldrh	r3, [r7, #14]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	89fa      	ldrh	r2, [r7, #14]
 8002a1e:	841a      	strh	r2, [r3, #32]
}
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop

08002a2c <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8c1b      	ldrh	r3, [r3, #32]
 8002a40:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 8002a42:	89fb      	ldrh	r3, [r7, #14]
 8002a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a48:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8002a4a:	887b      	ldrh	r3, [r7, #2]
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	89fb      	ldrh	r3, [r7, #14]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	89fa      	ldrh	r2, [r7, #14]
 8002a5a:	841a      	strh	r2, [r3, #32]
}
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop

08002a68 <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8c1b      	ldrh	r3, [r3, #32]
 8002a7c:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8002a7e:	89fb      	ldrh	r3, [r7, #14]
 8002a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a84:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	89fb      	ldrh	r3, [r7, #14]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	89fa      	ldrh	r2, [r7, #14]
 8002a96:	841a      	strh	r2, [r3, #32]
}
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop

08002aa4 <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8c1b      	ldrh	r3, [r3, #32]
 8002ab8:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 8002aba:	89fb      	ldrh	r3, [r7, #14]
 8002abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ac0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8002ac2:	887b      	ldrh	r3, [r7, #2]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	89fb      	ldrh	r3, [r7, #14]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	89fa      	ldrh	r2, [r7, #14]
 8002ad2:	841a      	strh	r2, [r3, #32]
}
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop

08002ae0 <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	8c1b      	ldrh	r3, [r3, #32]
 8002af4:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 8002af6:	89fb      	ldrh	r3, [r7, #14]
 8002af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002afc:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	031b      	lsls	r3, r3, #12
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	89fb      	ldrh	r3, [r7, #14]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	89fa      	ldrh	r2, [r7, #14]
 8002b0e:	841a      	strh	r2, [r3, #32]
}
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop

08002b1c <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	460a      	mov	r2, r1
 8002b28:	807a      	strh	r2, [r7, #2]
 8002b2a:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	2201      	movs	r2, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	8c1b      	ldrh	r3, [r3, #32]
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	89fb      	ldrh	r3, [r7, #14]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	4013      	ands	r3, r2
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	8c1b      	ldrh	r3, [r3, #32]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	8839      	ldrh	r1, [r7, #0]
 8002b56:	887b      	ldrh	r3, [r7, #2]
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	841a      	strh	r2, [r3, #32]
}
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	460a      	mov	r2, r1
 8002b7c:	807a      	strh	r2, [r7, #2]
 8002b7e:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
 8002b84:	887b      	ldrh	r3, [r7, #2]
 8002b86:	2204      	movs	r2, #4
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	8c1b      	ldrh	r3, [r3, #32]
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	89fb      	ldrh	r3, [r7, #14]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8c1b      	ldrh	r3, [r3, #32]
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	8839      	ldrh	r1, [r7, #0]
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	841a      	strh	r2, [r3, #32]
}
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	460a      	mov	r2, r1
 8002bd0:	807a      	strh	r2, [r7, #2]
 8002bd2:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3318      	adds	r3, #24
 8002be4:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
 8002be6:	887b      	ldrh	r3, [r7, #2]
 8002be8:	2201      	movs	r2, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8c1b      	ldrh	r3, [r3, #32]
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	897b      	ldrh	r3, [r7, #10]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <TIM_SelectOCxM+0x4c>
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d112      	bne.n	8002c36 <TIM_SelectOCxM+0x72>
  {
    tmp += (TIM_Channel>>1);
 8002c10:	887b      	ldrh	r3, [r7, #2]
 8002c12:	085b      	lsrs	r3, r3, #1
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4413      	add	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c26:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	6811      	ldr	r1, [r2, #0]
 8002c2e:	883a      	ldrh	r2, [r7, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e015      	b.n	8002c62 <TIM_SelectOCxM+0x9e>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	3b04      	subs	r3, #4
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002c50:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	6811      	ldr	r1, [r2, #0]
 8002c58:	883a      	ldrh	r2, [r7, #0]
 8002c5a:	0212      	lsls	r2, r2, #8
 8002c5c:	b292      	uxth	r2, r2
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]
  }
}
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	801a      	strh	r2, [r3, #0]
 8002c8e:	e007      	b.n	8002ca0 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	f023 0302 	bic.w	r3, r3, #2
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	801a      	strh	r2, [r3, #0]
  }
}
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f043 0304 	orr.w	r3, r3, #4
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	e007      	b.n	8002ce0 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	f023 0304 	bic.w	r3, r3, #4
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	801a      	strh	r2, [r3, #0]
  }
}
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop

08002cec <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	889b      	ldrh	r3, [r3, #4]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	809a      	strh	r2, [r3, #4]
 8002d0e:	e007      	b.n	8002d20 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	889b      	ldrh	r3, [r3, #4]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	809a      	strh	r2, [r3, #4]
  }
}
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop

08002d2c <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	f023 0308 	bic.w	r3, r3, #8
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	801a      	strh	r2, [r3, #0]
}
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop

08002d64 <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	889b      	ldrh	r3, [r3, #4]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	889b      	ldrh	r3, [r3, #4]
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	809a      	strh	r2, [r3, #4]
}
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop

08002d9c <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	891b      	ldrh	r3, [r3, #8]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	f023 0307 	bic.w	r3, r3, #7
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	891b      	ldrh	r3, [r3, #8]
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	887b      	ldrh	r3, [r7, #2]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	811a      	strh	r2, [r3, #8]
}
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop

08002dd4 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	891b      	ldrh	r3, [r3, #8]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	891b      	ldrh	r3, [r3, #8]
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	887b      	ldrh	r3, [r7, #2]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	811a      	strh	r2, [r3, #8]
}
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop

08002e0c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	887a      	ldrh	r2, [r7, #2]
 8002ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop

08002eb8 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	8b1b      	ldrh	r3, [r3, #24]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	f023 030c 	bic.w	r3, r3, #12
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8b1b      	ldrh	r3, [r3, #24]
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	887b      	ldrh	r3, [r7, #2]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	831a      	strh	r2, [r3, #24]
}
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop

08002ef0 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8b1b      	ldrh	r3, [r3, #24]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8b1b      	ldrh	r3, [r3, #24]
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	831a      	strh	r2, [r3, #24]
}
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop

08002f2c <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8b9b      	ldrh	r3, [r3, #28]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	f023 030c 	bic.w	r3, r3, #12
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8b9b      	ldrh	r3, [r3, #28]
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	887b      	ldrh	r3, [r7, #2]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	839a      	strh	r2, [r3, #28]
}
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop

08002f64 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8b9b      	ldrh	r3, [r3, #28]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8b9b      	ldrh	r3, [r3, #28]
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	887b      	ldrh	r3, [r7, #2]
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	839a      	strh	r2, [r3, #28]
}
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop

08002fa0 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	801a      	strh	r2, [r3, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	887b      	ldrh	r3, [r7, #2]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	801a      	strh	r2, [r3, #0]
}
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop

08002fd8 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002fe4:	b29b      	uxth	r3, r3
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop

08002ff4 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003000:	b29b      	uxth	r3, r3
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop

08003010 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800301c:	b29b      	uxth	r3, r3
}
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop

0800302c <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800303a:	b29b      	uxth	r3, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003054:	b29b      	uxth	r3, r3
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop

08003064 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	b29b      	uxth	r3, r3
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop

08003080 <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8a1b      	ldrh	r3, [r3, #16]
 8003094:	b29a      	uxth	r2, r3
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	4013      	ands	r3, r2
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	e001      	b.n	80030aa <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	821a      	strh	r2, [r3, #16]
}
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80030e4:	2300      	movs	r3, #0
 80030e6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	81bb      	strh	r3, [r7, #12]
 80030ec:	2300      	movs	r3, #0
 80030ee:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8a1b      	ldrh	r3, [r3, #16]
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	887b      	ldrh	r3, [r7, #2]
 80030f8:	4013      	ands	r3, r2
 80030fa:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	899b      	ldrh	r3, [r3, #12]
 8003100:	b29a      	uxth	r2, r3
 8003102:	887b      	ldrh	r3, [r7, #2]
 8003104:	4013      	ands	r3, r2
 8003106:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8003108:	89bb      	ldrh	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <TIM_GetITStatus+0x42>
 800310e:	897b      	ldrh	r3, [r7, #10]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
 8003118:	e001      	b.n	800311e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800311e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003138:	887b      	ldrh	r3, [r7, #2]
 800313a:	43db      	mvns	r3, r3
 800313c:	b29a      	uxth	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	821a      	strh	r2, [r3, #16]
}
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	8179      	strh	r1, [r7, #10]
 8003156:	813a      	strh	r2, [r7, #8]
 8003158:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	82fb      	strh	r3, [r7, #22]
 800315e:	2300      	movs	r3, #0
 8003160:	82bb      	strh	r3, [r7, #20]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8c1b      	ldrh	r3, [r3, #32]
 8003166:	b29b      	uxth	r3, r3
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8b1b      	ldrh	r3, [r3, #24]
 8003176:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8c1b      	ldrh	r3, [r3, #32]
 800317c:	82bb      	strh	r3, [r7, #20]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800317e:	8afb      	ldrh	r3, [r7, #22]
 8003180:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8003184:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	b29a      	uxth	r2, r3
 800318c:	893b      	ldrh	r3, [r7, #8]
 800318e:	4313      	orrs	r3, r2
 8003190:	b29a      	uxth	r2, r3
 8003192:	8afb      	ldrh	r3, [r7, #22]
 8003194:	4313      	orrs	r3, r2
 8003196:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8003198:	8abb      	ldrh	r3, [r7, #20]
 800319a:	f023 0302 	bic.w	r3, r3, #2
 800319e:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80031a0:	897a      	ldrh	r2, [r7, #10]
 80031a2:	8abb      	ldrh	r3, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8afa      	ldrh	r2, [r7, #22]
 80031b2:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8aba      	ldrh	r2, [r7, #20]
 80031b8:	841a      	strh	r2, [r3, #32]
}
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	8179      	strh	r1, [r7, #10]
 80031ce:	813a      	strh	r2, [r7, #8]
 80031d0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	82fb      	strh	r3, [r7, #22]
 80031d6:	2300      	movs	r3, #0
 80031d8:	82bb      	strh	r3, [r7, #20]
 80031da:	2300      	movs	r3, #0
 80031dc:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8c1b      	ldrh	r3, [r3, #32]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f023 0310 	bic.w	r3, r3, #16
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8b1b      	ldrh	r3, [r3, #24]
 80031f2:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8c1b      	ldrh	r3, [r3, #32]
 80031f8:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80031fa:	897b      	ldrh	r3, [r7, #10]
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8003200:	8afb      	ldrh	r3, [r7, #22]
 8003202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003206:	051b      	lsls	r3, r3, #20
 8003208:	0d1b      	lsrs	r3, r3, #20
 800320a:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	031b      	lsls	r3, r3, #12
 8003210:	b29a      	uxth	r2, r3
 8003212:	8afb      	ldrh	r3, [r7, #22]
 8003214:	4313      	orrs	r3, r2
 8003216:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8003218:	893b      	ldrh	r3, [r7, #8]
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	b29a      	uxth	r2, r3
 800321e:	8afb      	ldrh	r3, [r7, #22]
 8003220:	4313      	orrs	r3, r2
 8003222:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC2E Bit */
   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 8003224:	8abb      	ldrh	r3, [r7, #20]
 8003226:	f023 0320 	bic.w	r3, r3, #32
 800322a:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800322c:	8a7a      	ldrh	r2, [r7, #18]
 800322e:	8abb      	ldrh	r3, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	b29b      	uxth	r3, r3
 8003234:	f043 0310 	orr.w	r3, r3, #16
 8003238:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8afa      	ldrh	r2, [r7, #22]
 800323e:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8aba      	ldrh	r2, [r7, #20]
 8003244:	841a      	strh	r2, [r3, #32]
}
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	8179      	strh	r1, [r7, #10]
 800325a:	813a      	strh	r2, [r7, #8]
 800325c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	82fb      	strh	r3, [r7, #22]
 8003262:	2300      	movs	r3, #0
 8003264:	82bb      	strh	r3, [r7, #20]
 8003266:	2300      	movs	r3, #0
 8003268:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8c1b      	ldrh	r3, [r3, #32]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8b9b      	ldrh	r3, [r3, #28]
 800327e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8c1b      	ldrh	r3, [r3, #32]
 8003284:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8003286:	897b      	ldrh	r3, [r7, #10]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 800328c:	8afb      	ldrh	r3, [r7, #22]
 800328e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8003292:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	b29a      	uxth	r2, r3
 800329a:	893b      	ldrh	r3, [r7, #8]
 800329c:	4313      	orrs	r3, r2
 800329e:	b29a      	uxth	r2, r3
 80032a0:	8afb      	ldrh	r3, [r7, #22]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 80032a6:	8abb      	ldrh	r3, [r7, #20]
 80032a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032ac:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80032ae:	8a7a      	ldrh	r2, [r7, #18]
 80032b0:	8abb      	ldrh	r3, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ba:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8afa      	ldrh	r2, [r7, #22]
 80032c0:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8aba      	ldrh	r2, [r7, #20]
 80032c6:	841a      	strh	r2, [r3, #32]
}
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop

080032d4 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	8179      	strh	r1, [r7, #10]
 80032de:	813a      	strh	r2, [r7, #8]
 80032e0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	82fb      	strh	r3, [r7, #22]
 80032e6:	2300      	movs	r3, #0
 80032e8:	82bb      	strh	r3, [r7, #20]
 80032ea:	2300      	movs	r3, #0
 80032ec:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8c1b      	ldrh	r3, [r3, #32]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8b9b      	ldrh	r3, [r3, #28]
 8003302:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8c1b      	ldrh	r3, [r3, #32]
 8003308:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 800330a:	897b      	ldrh	r3, [r7, #10]
 800330c:	031b      	lsls	r3, r3, #12
 800330e:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8003310:	8afb      	ldrh	r3, [r7, #22]
 8003312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003316:	051b      	lsls	r3, r3, #20
 8003318:	0d1b      	lsrs	r3, r3, #20
 800331a:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800331c:	893b      	ldrh	r3, [r7, #8]
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	b29a      	uxth	r2, r3
 8003322:	8afb      	ldrh	r3, [r7, #22]
 8003324:	4313      	orrs	r3, r2
 8003326:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	031b      	lsls	r3, r3, #12
 800332c:	b29a      	uxth	r2, r3
 800332e:	8afb      	ldrh	r3, [r7, #22]
 8003330:	4313      	orrs	r3, r2
 8003332:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8003334:	8abb      	ldrh	r3, [r7, #20]
 8003336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800333a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800333c:	8a7a      	ldrh	r2, [r7, #18]
 800333e:	8abb      	ldrh	r3, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	b29b      	uxth	r3, r3
 8003344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003348:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8afa      	ldrh	r2, [r7, #22]
 800334e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8aba      	ldrh	r2, [r7, #20]
 8003354:	841a      	strh	r2, [r3, #32]
}
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003364:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <SystemInit+0x54>)
 8003366:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <SystemInit+0x54>)
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003370:	4a10      	ldr	r2, [pc, #64]	; (80033b4 <SystemInit+0x54>)
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <SystemInit+0x54>)
 8003374:	6859      	ldr	r1, [r3, #4]
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <SystemInit+0x58>)
 8003378:	400b      	ands	r3, r1
 800337a:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800337c:	4a0d      	ldr	r2, [pc, #52]	; (80033b4 <SystemInit+0x54>)
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <SystemInit+0x54>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <SystemInit+0x54>)
 800338e:	4a09      	ldr	r2, [pc, #36]	; (80033b4 <SystemInit+0x54>)
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003396:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <SystemInit+0x54>)
 800339a:	4a06      	ldr	r2, [pc, #24]	; (80033b4 <SystemInit+0x54>)
 800339c:	6852      	ldr	r2, [r2, #4]
 800339e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80033a2:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <SystemInit+0x54>)
 80033a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80033aa:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80033ac:	f000 f872 	bl	8003494 <SetSysClock>
}
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	f8ff0000 	.word	0xf8ff0000

080033bc <SystemCoreClockUpdate>:
  * @note   None
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80033ce:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <SystemCoreClockUpdate+0xc4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d007      	beq.n	80033ee <SystemCoreClockUpdate+0x32>
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d009      	beq.n	80033f6 <SystemCoreClockUpdate+0x3a>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d134      	bne.n	8003450 <SystemCoreClockUpdate+0x94>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_Value;
 80033e6:	4b27      	ldr	r3, [pc, #156]	; (8003484 <SystemCoreClockUpdate+0xc8>)
 80033e8:	4a27      	ldr	r2, [pc, #156]	; (8003488 <SystemCoreClockUpdate+0xcc>)
 80033ea:	601a      	str	r2, [r3, #0]
      break;
 80033ec:	e034      	b.n	8003458 <SystemCoreClockUpdate+0x9c>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_Value;
 80033ee:	4b25      	ldr	r3, [pc, #148]	; (8003484 <SystemCoreClockUpdate+0xc8>)
 80033f0:	4a25      	ldr	r2, [pc, #148]	; (8003488 <SystemCoreClockUpdate+0xcc>)
 80033f2:	601a      	str	r2, [r3, #0]
      break;
 80033f4:	e030      	b.n	8003458 <SystemCoreClockUpdate+0x9c>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80033f6:	4b22      	ldr	r3, [pc, #136]	; (8003480 <SystemCoreClockUpdate+0xc4>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033fe:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8003400:	4b1f      	ldr	r3, [pc, #124]	; (8003480 <SystemCoreClockUpdate+0xc4>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003408:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	0c9b      	lsrs	r3, r3, #18
 800340e:	3302      	adds	r3, #2
 8003410:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d106      	bne.n	8003426 <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_Value >> 1) * pllmull;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4a1c      	ldr	r2, [pc, #112]	; (800348c <SystemCoreClockUpdate+0xd0>)
 800341c:	fb02 f203 	mul.w	r2, r2, r3
 8003420:	4b18      	ldr	r3, [pc, #96]	; (8003484 <SystemCoreClockUpdate+0xc8>)
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e013      	b.n	800344e <SystemCoreClockUpdate+0x92>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_Value / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8003426:	4b16      	ldr	r3, [pc, #88]	; (8003480 <SystemCoreClockUpdate+0xc4>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <SystemCoreClockUpdate+0x84>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_Value >> 1) * pllmull;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4a15      	ldr	r2, [pc, #84]	; (800348c <SystemCoreClockUpdate+0xd0>)
 8003436:	fb02 f203 	mul.w	r2, r2, r3
 800343a:	4b12      	ldr	r3, [pc, #72]	; (8003484 <SystemCoreClockUpdate+0xc8>)
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	e006      	b.n	800344e <SystemCoreClockUpdate+0x92>
        }
        else
        {
          SystemCoreClock = HSE_Value * pllmull;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4a11      	ldr	r2, [pc, #68]	; (8003488 <SystemCoreClockUpdate+0xcc>)
 8003444:	fb02 f203 	mul.w	r2, r2, r3
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <SystemCoreClockUpdate+0xc8>)
 800344a:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800344c:	e004      	b.n	8003458 <SystemCoreClockUpdate+0x9c>
 800344e:	e003      	b.n	8003458 <SystemCoreClockUpdate+0x9c>

    default:
      SystemCoreClock = HSI_Value;
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <SystemCoreClockUpdate+0xc8>)
 8003452:	4a0d      	ldr	r2, [pc, #52]	; (8003488 <SystemCoreClockUpdate+0xcc>)
 8003454:	601a      	str	r2, [r3, #0]
      break;
 8003456:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003458:	4b09      	ldr	r3, [pc, #36]	; (8003480 <SystemCoreClockUpdate+0xc4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	4a0b      	ldr	r2, [pc, #44]	; (8003490 <SystemCoreClockUpdate+0xd4>)
 8003464:	5cd3      	ldrb	r3, [r2, r3]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <SystemCoreClockUpdate+0xc8>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	40da      	lsrs	r2, r3
 8003472:	4b04      	ldr	r3, [pc, #16]	; (8003484 <SystemCoreClockUpdate+0xc8>)
 8003474:	601a      	str	r2, [r3, #0]
}
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	40021000 	.word	0x40021000
 8003484:	20000308 	.word	0x20000308
 8003488:	007a1200 	.word	0x007a1200
 800348c:	003d0900 	.word	0x003d0900
 8003490:	2000030c 	.word	0x2000030c

08003494 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8003498:	f000 f802 	bl	80034a0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop

080034a0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	2300      	movs	r3, #0
 80034ac:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80034ae:	4b3a      	ldr	r3, [pc, #232]	; (8003598 <SetSysClockTo72+0xf8>)
 80034b0:	4a39      	ldr	r2, [pc, #228]	; (8003598 <SetSysClockTo72+0xf8>)
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80034b8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80034ba:	4b37      	ldr	r3, [pc, #220]	; (8003598 <SetSysClockTo72+0xf8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3301      	adds	r3, #1
 80034c8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d103      	bne.n	80034d8 <SetSysClockTo72+0x38>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80034d6:	d1f0      	bne.n	80034ba <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80034d8:	4b2f      	ldr	r3, [pc, #188]	; (8003598 <SetSysClockTo72+0xf8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80034e4:	2301      	movs	r3, #1
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	e001      	b.n	80034ee <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80034ea:	2300      	movs	r3, #0
 80034ec:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d14b      	bne.n	800358c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80034f4:	4b29      	ldr	r3, [pc, #164]	; (800359c <SetSysClockTo72+0xfc>)
 80034f6:	4a29      	ldr	r2, [pc, #164]	; (800359c <SetSysClockTo72+0xfc>)
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	f042 0210 	orr.w	r2, r2, #16
 80034fe:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003500:	4b26      	ldr	r3, [pc, #152]	; (800359c <SetSysClockTo72+0xfc>)
 8003502:	4a26      	ldr	r2, [pc, #152]	; (800359c <SetSysClockTo72+0xfc>)
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	f022 0203 	bic.w	r2, r2, #3
 800350a:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800350c:	4b23      	ldr	r3, [pc, #140]	; (800359c <SetSysClockTo72+0xfc>)
 800350e:	4a23      	ldr	r2, [pc, #140]	; (800359c <SetSysClockTo72+0xfc>)
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	f042 0202 	orr.w	r2, r2, #2
 8003516:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003518:	4b1f      	ldr	r3, [pc, #124]	; (8003598 <SetSysClockTo72+0xf8>)
 800351a:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <SetSysClockTo72+0xf8>)
 800351c:	6852      	ldr	r2, [r2, #4]
 800351e:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003520:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <SetSysClockTo72+0xf8>)
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <SetSysClockTo72+0xf8>)
 8003524:	6852      	ldr	r2, [r2, #4]
 8003526:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003528:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <SetSysClockTo72+0xf8>)
 800352a:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <SetSysClockTo72+0xf8>)
 800352c:	6852      	ldr	r2, [r2, #4]
 800352e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003532:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8003534:	4b18      	ldr	r3, [pc, #96]	; (8003598 <SetSysClockTo72+0xf8>)
 8003536:	4a18      	ldr	r2, [pc, #96]	; (8003598 <SetSysClockTo72+0xf8>)
 8003538:	6852      	ldr	r2, [r2, #4]
 800353a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800353e:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8003540:	4b15      	ldr	r3, [pc, #84]	; (8003598 <SetSysClockTo72+0xf8>)
 8003542:	4a15      	ldr	r2, [pc, #84]	; (8003598 <SetSysClockTo72+0xf8>)
 8003544:	6852      	ldr	r2, [r2, #4]
 8003546:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800354a:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800354c:	4b12      	ldr	r3, [pc, #72]	; (8003598 <SetSysClockTo72+0xf8>)
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <SetSysClockTo72+0xf8>)
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003556:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003558:	bf00      	nop
 800355a:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <SetSysClockTo72+0xf8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f9      	beq.n	800355a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003566:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <SetSysClockTo72+0xf8>)
 8003568:	4a0b      	ldr	r2, [pc, #44]	; (8003598 <SetSysClockTo72+0xf8>)
 800356a:	6852      	ldr	r2, [r2, #4]
 800356c:	f022 0203 	bic.w	r2, r2, #3
 8003570:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <SetSysClockTo72+0xf8>)
 8003574:	4a08      	ldr	r2, [pc, #32]	; (8003598 <SetSysClockTo72+0xf8>)
 8003576:	6852      	ldr	r2, [r2, #4]
 8003578:	f042 0202 	orr.w	r2, r2, #2
 800357c:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800357e:	bf00      	nop
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <SetSysClockTo72+0xf8>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b08      	cmp	r3, #8
 800358a:	d1f9      	bne.n	8003580 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000
 800359c:	40022000 	.word	0x40022000
 80035a0:	080065d8 	.word	0x080065d8
 80035a4:	200001e0 	.word	0x200001e0
 80035a8:	20000b5c 	.word	0x20000b5c
 80035ac:	20000b6c 	.word	0x20000b6c
 80035b0:	20000c74 	.word	0x20000c74

080035b4 <memcpy>:
 80035b4:	4684      	mov	ip, r0
 80035b6:	ea41 0300 	orr.w	r3, r1, r0
 80035ba:	f013 0303 	ands.w	r3, r3, #3
 80035be:	d149      	bne.n	8003654 <memcpy+0xa0>
 80035c0:	3a40      	subs	r2, #64	; 0x40
 80035c2:	d323      	bcc.n	800360c <memcpy+0x58>
 80035c4:	680b      	ldr	r3, [r1, #0]
 80035c6:	6003      	str	r3, [r0, #0]
 80035c8:	684b      	ldr	r3, [r1, #4]
 80035ca:	6043      	str	r3, [r0, #4]
 80035cc:	688b      	ldr	r3, [r1, #8]
 80035ce:	6083      	str	r3, [r0, #8]
 80035d0:	68cb      	ldr	r3, [r1, #12]
 80035d2:	60c3      	str	r3, [r0, #12]
 80035d4:	690b      	ldr	r3, [r1, #16]
 80035d6:	6103      	str	r3, [r0, #16]
 80035d8:	694b      	ldr	r3, [r1, #20]
 80035da:	6143      	str	r3, [r0, #20]
 80035dc:	698b      	ldr	r3, [r1, #24]
 80035de:	6183      	str	r3, [r0, #24]
 80035e0:	69cb      	ldr	r3, [r1, #28]
 80035e2:	61c3      	str	r3, [r0, #28]
 80035e4:	6a0b      	ldr	r3, [r1, #32]
 80035e6:	6203      	str	r3, [r0, #32]
 80035e8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80035ea:	6243      	str	r3, [r0, #36]	; 0x24
 80035ec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80035ee:	6283      	str	r3, [r0, #40]	; 0x28
 80035f0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80035f2:	62c3      	str	r3, [r0, #44]	; 0x2c
 80035f4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80035f6:	6303      	str	r3, [r0, #48]	; 0x30
 80035f8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80035fa:	6343      	str	r3, [r0, #52]	; 0x34
 80035fc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80035fe:	6383      	str	r3, [r0, #56]	; 0x38
 8003600:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8003602:	63c3      	str	r3, [r0, #60]	; 0x3c
 8003604:	3040      	adds	r0, #64	; 0x40
 8003606:	3140      	adds	r1, #64	; 0x40
 8003608:	3a40      	subs	r2, #64	; 0x40
 800360a:	d2db      	bcs.n	80035c4 <memcpy+0x10>
 800360c:	3230      	adds	r2, #48	; 0x30
 800360e:	d30b      	bcc.n	8003628 <memcpy+0x74>
 8003610:	680b      	ldr	r3, [r1, #0]
 8003612:	6003      	str	r3, [r0, #0]
 8003614:	684b      	ldr	r3, [r1, #4]
 8003616:	6043      	str	r3, [r0, #4]
 8003618:	688b      	ldr	r3, [r1, #8]
 800361a:	6083      	str	r3, [r0, #8]
 800361c:	68cb      	ldr	r3, [r1, #12]
 800361e:	60c3      	str	r3, [r0, #12]
 8003620:	3010      	adds	r0, #16
 8003622:	3110      	adds	r1, #16
 8003624:	3a10      	subs	r2, #16
 8003626:	d2f3      	bcs.n	8003610 <memcpy+0x5c>
 8003628:	320c      	adds	r2, #12
 800362a:	d305      	bcc.n	8003638 <memcpy+0x84>
 800362c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003630:	f840 3b04 	str.w	r3, [r0], #4
 8003634:	3a04      	subs	r2, #4
 8003636:	d2f9      	bcs.n	800362c <memcpy+0x78>
 8003638:	3204      	adds	r2, #4
 800363a:	d008      	beq.n	800364e <memcpy+0x9a>
 800363c:	07d2      	lsls	r2, r2, #31
 800363e:	bf1c      	itt	ne
 8003640:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003644:	f800 3b01 	strbne.w	r3, [r0], #1
 8003648:	d301      	bcc.n	800364e <memcpy+0x9a>
 800364a:	880b      	ldrh	r3, [r1, #0]
 800364c:	8003      	strh	r3, [r0, #0]
 800364e:	4660      	mov	r0, ip
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	2a08      	cmp	r2, #8
 8003656:	d313      	bcc.n	8003680 <memcpy+0xcc>
 8003658:	078b      	lsls	r3, r1, #30
 800365a:	d0b1      	beq.n	80035c0 <memcpy+0xc>
 800365c:	f010 0303 	ands.w	r3, r0, #3
 8003660:	d0ae      	beq.n	80035c0 <memcpy+0xc>
 8003662:	f1c3 0304 	rsb	r3, r3, #4
 8003666:	1ad2      	subs	r2, r2, r3
 8003668:	07db      	lsls	r3, r3, #31
 800366a:	bf1c      	itt	ne
 800366c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003670:	f800 3b01 	strbne.w	r3, [r0], #1
 8003674:	d3a4      	bcc.n	80035c0 <memcpy+0xc>
 8003676:	f831 3b02 	ldrh.w	r3, [r1], #2
 800367a:	f820 3b02 	strh.w	r3, [r0], #2
 800367e:	e79f      	b.n	80035c0 <memcpy+0xc>
 8003680:	3a04      	subs	r2, #4
 8003682:	d3d9      	bcc.n	8003638 <memcpy+0x84>
 8003684:	3a01      	subs	r2, #1
 8003686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800368a:	f800 3b01 	strb.w	r3, [r0], #1
 800368e:	d2f9      	bcs.n	8003684 <memcpy+0xd0>
 8003690:	780b      	ldrb	r3, [r1, #0]
 8003692:	7003      	strb	r3, [r0, #0]
 8003694:	784b      	ldrb	r3, [r1, #1]
 8003696:	7043      	strb	r3, [r0, #1]
 8003698:	788b      	ldrb	r3, [r1, #2]
 800369a:	7083      	strb	r3, [r0, #2]
 800369c:	4660      	mov	r0, ip
 800369e:	4770      	bx	lr

080036a0 <exit>:
 80036a0:	b508      	push	{r3, lr}
 80036a2:	2100      	movs	r1, #0
 80036a4:	4604      	mov	r4, r0
 80036a6:	f000 f887 	bl	80037b8 <__call_exitprocs>
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <exit+0x1c>)
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80036b0:	b103      	cbz	r3, 80036b4 <exit+0x14>
 80036b2:	4798      	blx	r3
 80036b4:	4620      	mov	r0, r4
 80036b6:	f000 fc79 	bl	8003fac <_exit>
 80036ba:	bf00      	nop
 80036bc:	080065b4 	.word	0x080065b4

080036c0 <__libc_init_array>:
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	4e0f      	ldr	r6, [pc, #60]	; (8003700 <__libc_init_array+0x40>)
 80036c4:	4d0f      	ldr	r5, [pc, #60]	; (8003704 <__libc_init_array+0x44>)
 80036c6:	1b76      	subs	r6, r6, r5
 80036c8:	10b6      	asrs	r6, r6, #2
 80036ca:	d007      	beq.n	80036dc <__libc_init_array+0x1c>
 80036cc:	3d04      	subs	r5, #4
 80036ce:	2400      	movs	r4, #0
 80036d0:	3401      	adds	r4, #1
 80036d2:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80036d6:	4798      	blx	r3
 80036d8:	42a6      	cmp	r6, r4
 80036da:	d1f9      	bne.n	80036d0 <__libc_init_array+0x10>
 80036dc:	4e0a      	ldr	r6, [pc, #40]	; (8003708 <__libc_init_array+0x48>)
 80036de:	4d0b      	ldr	r5, [pc, #44]	; (800370c <__libc_init_array+0x4c>)
 80036e0:	f002 ff6e 	bl	80065c0 <_init>
 80036e4:	1b76      	subs	r6, r6, r5
 80036e6:	10b6      	asrs	r6, r6, #2
 80036e8:	d008      	beq.n	80036fc <__libc_init_array+0x3c>
 80036ea:	3d04      	subs	r5, #4
 80036ec:	2400      	movs	r4, #0
 80036ee:	3401      	adds	r4, #1
 80036f0:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80036f4:	4798      	blx	r3
 80036f6:	42a6      	cmp	r6, r4
 80036f8:	d1f9      	bne.n	80036ee <__libc_init_array+0x2e>
 80036fa:	bd70      	pop	{r4, r5, r6, pc}
 80036fc:	bd70      	pop	{r4, r5, r6, pc}
 80036fe:	bf00      	nop
	...

08003710 <memset>:
 8003710:	b4f0      	push	{r4, r5, r6, r7}
 8003712:	0784      	lsls	r4, r0, #30
 8003714:	d043      	beq.n	800379e <memset+0x8e>
 8003716:	1e54      	subs	r4, r2, #1
 8003718:	2a00      	cmp	r2, #0
 800371a:	d03e      	beq.n	800379a <memset+0x8a>
 800371c:	b2cd      	uxtb	r5, r1
 800371e:	4603      	mov	r3, r0
 8003720:	e003      	b.n	800372a <memset+0x1a>
 8003722:	1e62      	subs	r2, r4, #1
 8003724:	2c00      	cmp	r4, #0
 8003726:	d038      	beq.n	800379a <memset+0x8a>
 8003728:	4614      	mov	r4, r2
 800372a:	f803 5b01 	strb.w	r5, [r3], #1
 800372e:	079a      	lsls	r2, r3, #30
 8003730:	d1f7      	bne.n	8003722 <memset+0x12>
 8003732:	2c03      	cmp	r4, #3
 8003734:	d92a      	bls.n	800378c <memset+0x7c>
 8003736:	b2cd      	uxtb	r5, r1
 8003738:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800373c:	2c0f      	cmp	r4, #15
 800373e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003742:	d915      	bls.n	8003770 <memset+0x60>
 8003744:	f1a4 0710 	sub.w	r7, r4, #16
 8003748:	093f      	lsrs	r7, r7, #4
 800374a:	f103 0610 	add.w	r6, r3, #16
 800374e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8003752:	461a      	mov	r2, r3
 8003754:	6015      	str	r5, [r2, #0]
 8003756:	6055      	str	r5, [r2, #4]
 8003758:	6095      	str	r5, [r2, #8]
 800375a:	60d5      	str	r5, [r2, #12]
 800375c:	3210      	adds	r2, #16
 800375e:	42b2      	cmp	r2, r6
 8003760:	d1f8      	bne.n	8003754 <memset+0x44>
 8003762:	f004 040f 	and.w	r4, r4, #15
 8003766:	3701      	adds	r7, #1
 8003768:	2c03      	cmp	r4, #3
 800376a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800376e:	d90d      	bls.n	800378c <memset+0x7c>
 8003770:	461e      	mov	r6, r3
 8003772:	4622      	mov	r2, r4
 8003774:	3a04      	subs	r2, #4
 8003776:	2a03      	cmp	r2, #3
 8003778:	f846 5b04 	str.w	r5, [r6], #4
 800377c:	d8fa      	bhi.n	8003774 <memset+0x64>
 800377e:	1f22      	subs	r2, r4, #4
 8003780:	f022 0203 	bic.w	r2, r2, #3
 8003784:	3204      	adds	r2, #4
 8003786:	4413      	add	r3, r2
 8003788:	f004 0403 	and.w	r4, r4, #3
 800378c:	b12c      	cbz	r4, 800379a <memset+0x8a>
 800378e:	b2c9      	uxtb	r1, r1
 8003790:	441c      	add	r4, r3
 8003792:	f803 1b01 	strb.w	r1, [r3], #1
 8003796:	42a3      	cmp	r3, r4
 8003798:	d1fb      	bne.n	8003792 <memset+0x82>
 800379a:	bcf0      	pop	{r4, r5, r6, r7}
 800379c:	4770      	bx	lr
 800379e:	4614      	mov	r4, r2
 80037a0:	4603      	mov	r3, r0
 80037a2:	e7c6      	b.n	8003732 <memset+0x22>

080037a4 <register_fini>:
 80037a4:	4b02      	ldr	r3, [pc, #8]	; (80037b0 <register_fini+0xc>)
 80037a6:	b113      	cbz	r3, 80037ae <register_fini+0xa>
 80037a8:	4802      	ldr	r0, [pc, #8]	; (80037b4 <register_fini+0x10>)
 80037aa:	f000 b87d 	b.w	80038a8 <atexit>
 80037ae:	4770      	bx	lr
 80037b0:	00000000 	.word	0x00000000
 80037b4:	080038b5 	.word	0x080038b5

080037b8 <__call_exitprocs>:
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	4b38      	ldr	r3, [pc, #224]	; (80038a0 <__call_exitprocs+0xe8>)
 80037be:	b085      	sub	sp, #20
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	9002      	str	r0, [sp, #8]
 80037c4:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	460f      	mov	r7, r1
 80037cc:	9203      	str	r2, [sp, #12]
 80037ce:	9b01      	ldr	r3, [sp, #4]
 80037d0:	f8d3 8148 	ldr.w	r8, [r3, #328]	; 0x148
 80037d4:	f1b8 0f00 	cmp.w	r8, #0
 80037d8:	d01c      	beq.n	8003814 <__call_exitprocs+0x5c>
 80037da:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80037de:	f04f 0901 	mov.w	r9, #1
 80037e2:	46da      	mov	sl, fp
 80037e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80037e8:	1e5c      	subs	r4, r3, #1
 80037ea:	d411      	bmi.n	8003810 <__call_exitprocs+0x58>
 80037ec:	f108 0588 	add.w	r5, r8, #136	; 0x88
 80037f0:	1c9e      	adds	r6, r3, #2
 80037f2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80037f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80037fa:	b177      	cbz	r7, 800381a <__call_exitprocs+0x62>
 80037fc:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80037fe:	42bb      	cmp	r3, r7
 8003800:	d00b      	beq.n	800381a <__call_exitprocs+0x62>
 8003802:	3c01      	subs	r4, #1
 8003804:	1c63      	adds	r3, r4, #1
 8003806:	f1a5 0504 	sub.w	r5, r5, #4
 800380a:	f1a6 0604 	sub.w	r6, r6, #4
 800380e:	d1f4      	bne.n	80037fa <__call_exitprocs+0x42>
 8003810:	4a24      	ldr	r2, [pc, #144]	; (80038a4 <__call_exitprocs+0xec>)
 8003812:	bb7a      	cbnz	r2, 8003874 <__call_exitprocs+0xbc>
 8003814:	b005      	add	sp, #20
 8003816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800381a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800381e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8003822:	3a01      	subs	r2, #1
 8003824:	42a2      	cmp	r2, r4
 8003826:	bf16      	itet	ne
 8003828:	2200      	movne	r2, #0
 800382a:	f8c8 4004 	streq.w	r4, [r8, #4]
 800382e:	f846 2c04 	strne.w	r2, [r6, #-4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0e5      	beq.n	8003802 <__call_exitprocs+0x4a>
 8003836:	fa09 f204 	lsl.w	r2, r9, r4
 800383a:	f8d8 1188 	ldr.w	r1, [r8, #392]	; 0x188
 800383e:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8003842:	420a      	tst	r2, r1
 8003844:	d010      	beq.n	8003868 <__call_exitprocs+0xb0>
 8003846:	f8d8 118c 	ldr.w	r1, [r8, #396]	; 0x18c
 800384a:	420a      	tst	r2, r1
 800384c:	d10e      	bne.n	800386c <__call_exitprocs+0xb4>
 800384e:	9802      	ldr	r0, [sp, #8]
 8003850:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8003854:	4798      	blx	r3
 8003856:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800385a:	455b      	cmp	r3, fp
 800385c:	d1b7      	bne.n	80037ce <__call_exitprocs+0x16>
 800385e:	f8da 3000 	ldr.w	r3, [sl]
 8003862:	4543      	cmp	r3, r8
 8003864:	d0cd      	beq.n	8003802 <__call_exitprocs+0x4a>
 8003866:	e7b2      	b.n	80037ce <__call_exitprocs+0x16>
 8003868:	4798      	blx	r3
 800386a:	e7f4      	b.n	8003856 <__call_exitprocs+0x9e>
 800386c:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8003870:	4798      	blx	r3
 8003872:	e7f0      	b.n	8003856 <__call_exitprocs+0x9e>
 8003874:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003878:	b96b      	cbnz	r3, 8003896 <__call_exitprocs+0xde>
 800387a:	f8d8 3000 	ldr.w	r3, [r8]
 800387e:	b163      	cbz	r3, 800389a <__call_exitprocs+0xe2>
 8003880:	4640      	mov	r0, r8
 8003882:	f8ca 3000 	str.w	r3, [sl]
 8003886:	f3af 8000 	nop.w
 800388a:	f8da 8000 	ldr.w	r8, [sl]
 800388e:	f1b8 0f00 	cmp.w	r8, #0
 8003892:	d1a7      	bne.n	80037e4 <__call_exitprocs+0x2c>
 8003894:	e7be      	b.n	8003814 <__call_exitprocs+0x5c>
 8003896:	f8d8 3000 	ldr.w	r3, [r8]
 800389a:	46c2      	mov	sl, r8
 800389c:	4698      	mov	r8, r3
 800389e:	e7f6      	b.n	800388e <__call_exitprocs+0xd6>
 80038a0:	080065b4 	.word	0x080065b4
 80038a4:	00000000 	.word	0x00000000

080038a8 <atexit>:
 80038a8:	4601      	mov	r1, r0
 80038aa:	2000      	movs	r0, #0
 80038ac:	4602      	mov	r2, r0
 80038ae:	4603      	mov	r3, r0
 80038b0:	f000 b818 	b.w	80038e4 <__register_exitproc>

080038b4 <__libc_fini_array>:
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	4d09      	ldr	r5, [pc, #36]	; (80038dc <__libc_fini_array+0x28>)
 80038b8:	4c09      	ldr	r4, [pc, #36]	; (80038e0 <__libc_fini_array+0x2c>)
 80038ba:	1b64      	subs	r4, r4, r5
 80038bc:	10a4      	asrs	r4, r4, #2
 80038be:	bf18      	it	ne
 80038c0:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 80038c4:	d005      	beq.n	80038d2 <__libc_fini_array+0x1e>
 80038c6:	3c01      	subs	r4, #1
 80038c8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80038cc:	4798      	blx	r3
 80038ce:	2c00      	cmp	r4, #0
 80038d0:	d1f9      	bne.n	80038c6 <__libc_fini_array+0x12>
 80038d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038d6:	f002 be79 	b.w	80065cc <_fini>
 80038da:	bf00      	nop
	...

080038e4 <__register_exitproc>:
 80038e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e6:	4c27      	ldr	r4, [pc, #156]	; (8003984 <__register_exitproc+0xa0>)
 80038e8:	b085      	sub	sp, #20
 80038ea:	6826      	ldr	r6, [r4, #0]
 80038ec:	4607      	mov	r7, r0
 80038ee:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 80038f2:	2c00      	cmp	r4, #0
 80038f4:	d040      	beq.n	8003978 <__register_exitproc+0x94>
 80038f6:	6865      	ldr	r5, [r4, #4]
 80038f8:	2d1f      	cmp	r5, #31
 80038fa:	dd1e      	ble.n	800393a <__register_exitproc+0x56>
 80038fc:	4822      	ldr	r0, [pc, #136]	; (8003988 <__register_exitproc+0xa4>)
 80038fe:	b918      	cbnz	r0, 8003908 <__register_exitproc+0x24>
 8003900:	f04f 30ff 	mov.w	r0, #4294967295
 8003904:	b005      	add	sp, #20
 8003906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003908:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800390c:	9103      	str	r1, [sp, #12]
 800390e:	9202      	str	r2, [sp, #8]
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	f3af 8000 	nop.w
 8003916:	9903      	ldr	r1, [sp, #12]
 8003918:	4604      	mov	r4, r0
 800391a:	9a02      	ldr	r2, [sp, #8]
 800391c:	9b01      	ldr	r3, [sp, #4]
 800391e:	2800      	cmp	r0, #0
 8003920:	d0ee      	beq.n	8003900 <__register_exitproc+0x1c>
 8003922:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8003926:	2000      	movs	r0, #0
 8003928:	6025      	str	r5, [r4, #0]
 800392a:	6060      	str	r0, [r4, #4]
 800392c:	4605      	mov	r5, r0
 800392e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8003932:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8003936:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 800393a:	b93f      	cbnz	r7, 800394c <__register_exitproc+0x68>
 800393c:	1c6b      	adds	r3, r5, #1
 800393e:	2000      	movs	r0, #0
 8003940:	3502      	adds	r5, #2
 8003942:	6063      	str	r3, [r4, #4]
 8003944:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
 8003948:	b005      	add	sp, #20
 800394a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800394c:	2601      	movs	r6, #1
 800394e:	40ae      	lsls	r6, r5
 8003950:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8003954:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8003958:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 800395c:	2f02      	cmp	r7, #2
 800395e:	ea42 0206 	orr.w	r2, r2, r6
 8003962:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 8003966:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800396a:	d1e7      	bne.n	800393c <__register_exitproc+0x58>
 800396c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8003970:	431e      	orrs	r6, r3
 8003972:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
 8003976:	e7e1      	b.n	800393c <__register_exitproc+0x58>
 8003978:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 800397c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8003980:	e7b9      	b.n	80038f6 <__register_exitproc+0x12>
 8003982:	bf00      	nop
 8003984:	080065b4 	.word	0x080065b4
 8003988:	00000000 	.word	0x00000000

0800398c <findslot>:
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <findslot+0x30>)
 800398e:	b510      	push	{r4, lr}
 8003990:	4604      	mov	r4, r0
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	b108      	cbz	r0, 800399a <findslot+0xe>
 8003996:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003998:	b14b      	cbz	r3, 80039ae <findslot+0x22>
 800399a:	2c13      	cmp	r4, #19
 800399c:	d80b      	bhi.n	80039b6 <findslot+0x2a>
 800399e:	4808      	ldr	r0, [pc, #32]	; (80039c0 <findslot+0x34>)
 80039a0:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 80039a4:	3301      	adds	r3, #1
 80039a6:	d006      	beq.n	80039b6 <findslot+0x2a>
 80039a8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	f001 f98f 	bl	8004cd0 <__sinit>
 80039b2:	2c13      	cmp	r4, #19
 80039b4:	d9f3      	bls.n	800399e <findslot+0x12>
 80039b6:	2000      	movs	r0, #0
 80039b8:	bd10      	pop	{r4, pc}
 80039ba:	bf00      	nop
 80039bc:	20000748 	.word	0x20000748
 80039c0:	20000b98 	.word	0x20000b98

080039c4 <checkerror.part.0>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	f001 f951 	bl	8004c6c <__errno>
 80039ca:	2513      	movs	r5, #19
 80039cc:	4604      	mov	r4, r0
 80039ce:	2600      	movs	r6, #0
 80039d0:	4628      	mov	r0, r5
 80039d2:	4631      	mov	r1, r6
 80039d4:	beab      	bkpt	0x00ab
 80039d6:	4605      	mov	r5, r0
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295
 80039dc:	6025      	str	r5, [r4, #0]
 80039de:	bd70      	pop	{r4, r5, r6, pc}

080039e0 <initialise_monitor_handles>:
 80039e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039e2:	4c22      	ldr	r4, [pc, #136]	; (8003a6c <initialise_monitor_handles+0x8c>)
 80039e4:	b085      	sub	sp, #20
 80039e6:	2203      	movs	r2, #3
 80039e8:	2300      	movs	r3, #0
 80039ea:	9401      	str	r4, [sp, #4]
 80039ec:	2501      	movs	r5, #1
 80039ee:	9203      	str	r2, [sp, #12]
 80039f0:	ae01      	add	r6, sp, #4
 80039f2:	9302      	str	r3, [sp, #8]
 80039f4:	4628      	mov	r0, r5
 80039f6:	4631      	mov	r1, r6
 80039f8:	beab      	bkpt	0x00ab
 80039fa:	4606      	mov	r6, r0
 80039fc:	4d1c      	ldr	r5, [pc, #112]	; (8003a70 <initialise_monitor_handles+0x90>)
 80039fe:	2304      	movs	r3, #4
 8003a00:	2203      	movs	r2, #3
 8003a02:	9401      	str	r4, [sp, #4]
 8003a04:	602e      	str	r6, [r5, #0]
 8003a06:	9203      	str	r2, [sp, #12]
 8003a08:	eb0d 0703 	add.w	r7, sp, r3
 8003a0c:	9302      	str	r3, [sp, #8]
 8003a0e:	2601      	movs	r6, #1
 8003a10:	4630      	mov	r0, r6
 8003a12:	4639      	mov	r1, r7
 8003a14:	beab      	bkpt	0x00ab
 8003a16:	4607      	mov	r7, r0
 8003a18:	4e16      	ldr	r6, [pc, #88]	; (8003a74 <initialise_monitor_handles+0x94>)
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	2308      	movs	r3, #8
 8003a1e:	9401      	str	r4, [sp, #4]
 8003a20:	6037      	str	r7, [r6, #0]
 8003a22:	9203      	str	r2, [sp, #12]
 8003a24:	af01      	add	r7, sp, #4
 8003a26:	9302      	str	r3, [sp, #8]
 8003a28:	2401      	movs	r4, #1
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	4639      	mov	r1, r7
 8003a2e:	beab      	bkpt	0x00ab
 8003a30:	4604      	mov	r4, r0
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <initialise_monitor_handles+0x98>)
 8003a34:	1c62      	adds	r2, r4, #1
 8003a36:	601c      	str	r4, [r3, #0]
 8003a38:	d013      	beq.n	8003a62 <initialise_monitor_handles+0x82>
 8003a3a:	6836      	ldr	r6, [r6, #0]
 8003a3c:	480f      	ldr	r0, [pc, #60]	; (8003a7c <initialise_monitor_handles+0x9c>)
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f04f 31ff 	mov.w	r1, #4294967295
 8003a44:	50c1      	str	r1, [r0, r3]
 8003a46:	3308      	adds	r3, #8
 8003a48:	2ba0      	cmp	r3, #160	; 0xa0
 8003a4a:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <initialise_monitor_handles+0x9c>)
 8003a4c:	d1fa      	bne.n	8003a44 <initialise_monitor_handles+0x64>
 8003a4e:	6829      	ldr	r1, [r5, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	6011      	str	r1, [r2, #0]
 8003a54:	6096      	str	r6, [r2, #8]
 8003a56:	6114      	str	r4, [r2, #16]
 8003a58:	6053      	str	r3, [r2, #4]
 8003a5a:	60d3      	str	r3, [r2, #12]
 8003a5c:	6153      	str	r3, [r2, #20]
 8003a5e:	b005      	add	sp, #20
 8003a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a62:	6832      	ldr	r2, [r6, #0]
 8003a64:	4614      	mov	r4, r2
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	4616      	mov	r6, r2
 8003a6a:	e7e7      	b.n	8003a3c <initialise_monitor_handles+0x5c>
 8003a6c:	080065b8 	.word	0x080065b8
 8003a70:	20000b8c 	.word	0x20000b8c
 8003a74:	20000b88 	.word	0x20000b88
 8003a78:	20000b94 	.word	0x20000b94
 8003a7c:	20000b98 	.word	0x20000b98

08003a80 <_swiread>:
 8003a80:	b530      	push	{r4, r5, lr}
 8003a82:	b085      	sub	sp, #20
 8003a84:	9001      	str	r0, [sp, #4]
 8003a86:	9102      	str	r1, [sp, #8]
 8003a88:	9203      	str	r2, [sp, #12]
 8003a8a:	2406      	movs	r4, #6
 8003a8c:	ad01      	add	r5, sp, #4
 8003a8e:	4620      	mov	r0, r4
 8003a90:	4629      	mov	r1, r5
 8003a92:	beab      	bkpt	0x00ab
 8003a94:	4604      	mov	r4, r0
 8003a96:	1c63      	adds	r3, r4, #1
 8003a98:	d002      	beq.n	8003aa0 <_swiread+0x20>
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	b005      	add	sp, #20
 8003a9e:	bd30      	pop	{r4, r5, pc}
 8003aa0:	f7ff ff90 	bl	80039c4 <checkerror.part.0>
 8003aa4:	b005      	add	sp, #20
 8003aa6:	bd30      	pop	{r4, r5, pc}

08003aa8 <_read>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	460e      	mov	r6, r1
 8003aac:	4615      	mov	r5, r2
 8003aae:	f7ff ff6d 	bl	800398c <findslot>
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	b158      	cbz	r0, 8003ace <_read+0x26>
 8003ab6:	4631      	mov	r1, r6
 8003ab8:	6800      	ldr	r0, [r0, #0]
 8003aba:	462a      	mov	r2, r5
 8003abc:	f7ff ffe0 	bl	8003a80 <_swiread>
 8003ac0:	1c43      	adds	r3, r0, #1
 8003ac2:	d003      	beq.n	8003acc <_read+0x24>
 8003ac4:	6863      	ldr	r3, [r4, #4]
 8003ac6:	1a28      	subs	r0, r5, r0
 8003ac8:	4403      	add	r3, r0
 8003aca:	6063      	str	r3, [r4, #4]
 8003acc:	bd70      	pop	{r4, r5, r6, pc}
 8003ace:	f001 f8cd 	bl	8004c6c <__errno>
 8003ad2:	2309      	movs	r3, #9
 8003ad4:	6003      	str	r3, [r0, #0]
 8003ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8003ada:	bd70      	pop	{r4, r5, r6, pc}

08003adc <_swilseek>:
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	4616      	mov	r6, r2
 8003ae4:	f7ff ff52 	bl	800398c <findslot>
 8003ae8:	4605      	mov	r5, r0
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d039      	beq.n	8003b62 <_swilseek+0x86>
 8003aee:	2e02      	cmp	r6, #2
 8003af0:	d826      	bhi.n	8003b40 <_swilseek+0x64>
 8003af2:	2e01      	cmp	r6, #1
 8003af4:	d021      	beq.n	8003b3a <_swilseek+0x5e>
 8003af6:	2e02      	cmp	r6, #2
 8003af8:	d011      	beq.n	8003b1e <_swilseek+0x42>
 8003afa:	466e      	mov	r6, sp
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	270a      	movs	r7, #10
 8003b00:	e88d 0018 	stmia.w	sp, {r3, r4}
 8003b04:	4638      	mov	r0, r7
 8003b06:	4631      	mov	r1, r6
 8003b08:	beab      	bkpt	0x00ab
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	1c73      	adds	r3, r6, #1
 8003b0e:	d01e      	beq.n	8003b4e <_swilseek+0x72>
 8003b10:	4630      	mov	r0, r6
 8003b12:	2800      	cmp	r0, #0
 8003b14:	db22      	blt.n	8003b5c <_swilseek+0x80>
 8003b16:	606c      	str	r4, [r5, #4]
 8003b18:	4620      	mov	r0, r4
 8003b1a:	b003      	add	sp, #12
 8003b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b1e:	6803      	ldr	r3, [r0, #0]
 8003b20:	ae02      	add	r6, sp, #8
 8003b22:	f846 3d08 	str.w	r3, [r6, #-8]!
 8003b26:	270c      	movs	r7, #12
 8003b28:	4638      	mov	r0, r7
 8003b2a:	4631      	mov	r1, r6
 8003b2c:	beab      	bkpt	0x00ab
 8003b2e:	4607      	mov	r7, r0
 8003b30:	1c79      	adds	r1, r7, #1
 8003b32:	d00f      	beq.n	8003b54 <_swilseek+0x78>
 8003b34:	4638      	mov	r0, r7
 8003b36:	4404      	add	r4, r0
 8003b38:	e7e0      	b.n	8003afc <_swilseek+0x20>
 8003b3a:	6843      	ldr	r3, [r0, #4]
 8003b3c:	18e4      	adds	r4, r4, r3
 8003b3e:	d5dc      	bpl.n	8003afa <_swilseek+0x1e>
 8003b40:	f001 f894 	bl	8004c6c <__errno>
 8003b44:	2316      	movs	r3, #22
 8003b46:	6003      	str	r3, [r0, #0]
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4c:	e7e5      	b.n	8003b1a <_swilseek+0x3e>
 8003b4e:	f7ff ff39 	bl	80039c4 <checkerror.part.0>
 8003b52:	e7de      	b.n	8003b12 <_swilseek+0x36>
 8003b54:	f7ff ff36 	bl	80039c4 <checkerror.part.0>
 8003b58:	1c42      	adds	r2, r0, #1
 8003b5a:	d1ec      	bne.n	8003b36 <_swilseek+0x5a>
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	e7db      	b.n	8003b1a <_swilseek+0x3e>
 8003b62:	f001 f883 	bl	8004c6c <__errno>
 8003b66:	2309      	movs	r3, #9
 8003b68:	6003      	str	r3, [r0, #0]
 8003b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6e:	e7d4      	b.n	8003b1a <_swilseek+0x3e>

08003b70 <_lseek>:
 8003b70:	f7ff bfb4 	b.w	8003adc <_swilseek>

08003b74 <_swiwrite>:
 8003b74:	b530      	push	{r4, r5, lr}
 8003b76:	b085      	sub	sp, #20
 8003b78:	9001      	str	r0, [sp, #4]
 8003b7a:	9102      	str	r1, [sp, #8]
 8003b7c:	9203      	str	r2, [sp, #12]
 8003b7e:	2405      	movs	r4, #5
 8003b80:	ad01      	add	r5, sp, #4
 8003b82:	4620      	mov	r0, r4
 8003b84:	4629      	mov	r1, r5
 8003b86:	beab      	bkpt	0x00ab
 8003b88:	4604      	mov	r4, r0
 8003b8a:	1c63      	adds	r3, r4, #1
 8003b8c:	d002      	beq.n	8003b94 <_swiwrite+0x20>
 8003b8e:	4620      	mov	r0, r4
 8003b90:	b005      	add	sp, #20
 8003b92:	bd30      	pop	{r4, r5, pc}
 8003b94:	f7ff ff16 	bl	80039c4 <checkerror.part.0>
 8003b98:	b005      	add	sp, #20
 8003b9a:	bd30      	pop	{r4, r5, pc}

08003b9c <_write>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	460e      	mov	r6, r1
 8003ba0:	4615      	mov	r5, r2
 8003ba2:	f7ff fef3 	bl	800398c <findslot>
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	b1e0      	cbz	r0, 8003be4 <_write+0x48>
 8003baa:	4631      	mov	r1, r6
 8003bac:	6800      	ldr	r0, [r0, #0]
 8003bae:	462a      	mov	r2, r5
 8003bb0:	f7ff ffe0 	bl	8003b74 <_swiwrite>
 8003bb4:	1e03      	subs	r3, r0, #0
 8003bb6:	db12      	blt.n	8003bde <_write+0x42>
 8003bb8:	6862      	ldr	r2, [r4, #4]
 8003bba:	1ae8      	subs	r0, r5, r3
 8003bbc:	4402      	add	r2, r0
 8003bbe:	429d      	cmp	r5, r3
 8003bc0:	6062      	str	r2, [r4, #4]
 8003bc2:	d000      	beq.n	8003bc6 <_write+0x2a>
 8003bc4:	bd70      	pop	{r4, r5, r6, pc}
 8003bc6:	f001 f851 	bl	8004c6c <__errno>
 8003bca:	2513      	movs	r5, #19
 8003bcc:	4604      	mov	r4, r0
 8003bce:	2600      	movs	r6, #0
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	4631      	mov	r1, r6
 8003bd4:	beab      	bkpt	0x00ab
 8003bd6:	4605      	mov	r5, r0
 8003bd8:	2000      	movs	r0, #0
 8003bda:	6025      	str	r5, [r4, #0]
 8003bdc:	bd70      	pop	{r4, r5, r6, pc}
 8003bde:	f04f 30ff 	mov.w	r0, #4294967295
 8003be2:	e7ef      	b.n	8003bc4 <_write+0x28>
 8003be4:	f001 f842 	bl	8004c6c <__errno>
 8003be8:	2309      	movs	r3, #9
 8003bea:	6003      	str	r3, [r0, #0]
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	bd70      	pop	{r4, r5, r6, pc}
 8003bf2:	bf00      	nop

08003bf4 <_swiclose>:
 8003bf4:	b530      	push	{r4, r5, lr}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	ac02      	add	r4, sp, #8
 8003bfa:	f844 0d04 	str.w	r0, [r4, #-4]!
 8003bfe:	2502      	movs	r5, #2
 8003c00:	4628      	mov	r0, r5
 8003c02:	4621      	mov	r1, r4
 8003c04:	beab      	bkpt	0x00ab
 8003c06:	4604      	mov	r4, r0
 8003c08:	1c63      	adds	r3, r4, #1
 8003c0a:	d002      	beq.n	8003c12 <_swiclose+0x1e>
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	b003      	add	sp, #12
 8003c10:	bd30      	pop	{r4, r5, pc}
 8003c12:	f7ff fed7 	bl	80039c4 <checkerror.part.0>
 8003c16:	b003      	add	sp, #12
 8003c18:	bd30      	pop	{r4, r5, pc}
 8003c1a:	bf00      	nop

08003c1c <_close>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	4604      	mov	r4, r0
 8003c22:	f7ff feb3 	bl	800398c <findslot>
 8003c26:	4605      	mov	r5, r0
 8003c28:	b318      	cbz	r0, 8003c72 <_close+0x56>
 8003c2a:	3c01      	subs	r4, #1
 8003c2c:	2c01      	cmp	r4, #1
 8003c2e:	d911      	bls.n	8003c54 <_close+0x38>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	ac02      	add	r4, sp, #8
 8003c34:	f844 3d04 	str.w	r3, [r4, #-4]!
 8003c38:	2602      	movs	r6, #2
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	beab      	bkpt	0x00ab
 8003c40:	4604      	mov	r4, r0
 8003c42:	1c63      	adds	r3, r4, #1
 8003c44:	d010      	beq.n	8003c68 <_close+0x4c>
 8003c46:	4620      	mov	r0, r4
 8003c48:	b910      	cbnz	r0, 8003c50 <_close+0x34>
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	602b      	str	r3, [r5, #0]
 8003c50:	b002      	add	sp, #8
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <_close+0x64>)
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d1e8      	bne.n	8003c30 <_close+0x14>
 8003c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c62:	6003      	str	r3, [r0, #0]
 8003c64:	2000      	movs	r0, #0
 8003c66:	e7f3      	b.n	8003c50 <_close+0x34>
 8003c68:	f7ff feac 	bl	80039c4 <checkerror.part.0>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d1ef      	bne.n	8003c50 <_close+0x34>
 8003c70:	e7eb      	b.n	8003c4a <_close+0x2e>
 8003c72:	f000 fffb 	bl	8004c6c <__errno>
 8003c76:	2309      	movs	r3, #9
 8003c78:	6003      	str	r3, [r0, #0]
 8003c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7e:	e7e7      	b.n	8003c50 <_close+0x34>
 8003c80:	20000b98 	.word	0x20000b98

08003c84 <_getpid>:
 8003c84:	2001      	movs	r0, #1
 8003c86:	4770      	bx	lr

08003c88 <_sbrk>:
 8003c88:	b508      	push	{r3, lr}
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <_sbrk+0x2c>)
 8003c8c:	4601      	mov	r1, r0
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	b16a      	cbz	r2, 8003cae <_sbrk+0x26>
 8003c92:	4610      	mov	r0, r2
 8003c94:	1842      	adds	r2, r0, r1
 8003c96:	4669      	mov	r1, sp
 8003c98:	428a      	cmp	r2, r1
 8003c9a:	d801      	bhi.n	8003ca0 <_sbrk+0x18>
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	bd08      	pop	{r3, pc}
 8003ca0:	f000 ffe4 	bl	8004c6c <__errno>
 8003ca4:	230c      	movs	r3, #12
 8003ca6:	6003      	str	r3, [r0, #0]
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	bd08      	pop	{r3, pc}
 8003cae:	4802      	ldr	r0, [pc, #8]	; (8003cb8 <_sbrk+0x30>)
 8003cb0:	6018      	str	r0, [r3, #0]
 8003cb2:	e7ef      	b.n	8003c94 <_sbrk+0xc>
 8003cb4:	20000b90 	.word	0x20000b90
 8003cb8:	20000c74 	.word	0x20000c74

08003cbc <_swistat>:
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	f7ff fe64 	bl	800398c <findslot>
 8003cc4:	4605      	mov	r5, r0
 8003cc6:	b1b0      	cbz	r0, 8003cf6 <_swistat+0x3a>
 8003cc8:	6863      	ldr	r3, [r4, #4]
 8003cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cd2:	6063      	str	r3, [r4, #4]
 8003cd4:	62e2      	str	r2, [r4, #44]	; 0x2c
 8003cd6:	260c      	movs	r6, #12
 8003cd8:	4630      	mov	r0, r6
 8003cda:	4629      	mov	r1, r5
 8003cdc:	beab      	bkpt	0x00ab
 8003cde:	4605      	mov	r5, r0
 8003ce0:	1c6a      	adds	r2, r5, #1
 8003ce2:	d003      	beq.n	8003cec <_swistat+0x30>
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	6120      	str	r0, [r4, #16]
 8003ce8:	2000      	movs	r0, #0
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
 8003cec:	f7ff fe6a 	bl	80039c4 <checkerror.part.0>
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	d1f8      	bne.n	8003ce6 <_swistat+0x2a>
 8003cf4:	bd70      	pop	{r4, r5, r6, pc}
 8003cf6:	f000 ffb9 	bl	8004c6c <__errno>
 8003cfa:	2309      	movs	r3, #9
 8003cfc:	6003      	str	r3, [r0, #0]
 8003cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003d02:	bd70      	pop	{r4, r5, r6, pc}

08003d04 <_fstat>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	460c      	mov	r4, r1
 8003d08:	4605      	mov	r5, r0
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	223c      	movs	r2, #60	; 0x3c
 8003d10:	f7ff fcfe 	bl	8003710 <memset>
 8003d14:	4628      	mov	r0, r5
 8003d16:	4621      	mov	r1, r4
 8003d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d1c:	f7ff bfce 	b.w	8003cbc <_swistat>

08003d20 <_stat>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	460d      	mov	r5, r1
 8003d24:	4604      	mov	r4, r0
 8003d26:	2100      	movs	r1, #0
 8003d28:	223c      	movs	r2, #60	; 0x3c
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	f7ff fcf0 	bl	8003710 <memset>
 8003d30:	4620      	mov	r0, r4
 8003d32:	2100      	movs	r1, #0
 8003d34:	f000 f812 	bl	8003d5c <_swiopen>
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	d00b      	beq.n	8003d56 <_stat+0x36>
 8003d3e:	686b      	ldr	r3, [r5, #4]
 8003d40:	4629      	mov	r1, r5
 8003d42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003d46:	606b      	str	r3, [r5, #4]
 8003d48:	f7ff ffb8 	bl	8003cbc <_swistat>
 8003d4c:	4605      	mov	r5, r0
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f7ff ff64 	bl	8003c1c <_close>
 8003d54:	462c      	mov	r4, r5
 8003d56:	4620      	mov	r0, r4
 8003d58:	bd38      	pop	{r3, r4, r5, pc}
 8003d5a:	bf00      	nop

08003d5c <_swiopen>:
 8003d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d60:	4e32      	ldr	r6, [pc, #200]	; (8003e2c <_swiopen+0xd0>)
 8003d62:	b090      	sub	sp, #64	; 0x40
 8003d64:	4682      	mov	sl, r0
 8003d66:	4688      	mov	r8, r1
 8003d68:	2400      	movs	r4, #0
 8003d6a:	f856 5034 	ldr.w	r5, [r6, r4, lsl #3]
 8003d6e:	00e7      	lsls	r7, r4, #3
 8003d70:	1c6b      	adds	r3, r5, #1
 8003d72:	d00c      	beq.n	8003d8e <_swiopen+0x32>
 8003d74:	3401      	adds	r4, #1
 8003d76:	2c14      	cmp	r4, #20
 8003d78:	d1f7      	bne.n	8003d6a <_swiopen+0xe>
 8003d7a:	f000 ff77 	bl	8004c6c <__errno>
 8003d7e:	2318      	movs	r3, #24
 8003d80:	6003      	str	r3, [r0, #0]
 8003d82:	f04f 35ff 	mov.w	r5, #4294967295
 8003d86:	4628      	mov	r0, r5
 8003d88:	b010      	add	sp, #64	; 0x40
 8003d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8e:	f408 6320 	and.w	r3, r8, #2560	; 0xa00
 8003d92:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003d96:	f10d 0904 	add.w	r9, sp, #4
 8003d9a:	d03b      	beq.n	8003e14 <_swiopen+0xb8>
 8003d9c:	f240 6301 	movw	r3, #1537	; 0x601
 8003da0:	f3c8 4500 	ubfx	r5, r8, #16, #1
 8003da4:	f018 0f02 	tst.w	r8, #2
 8003da8:	ea08 0303 	and.w	r3, r8, r3
 8003dac:	bf18      	it	ne
 8003dae:	f045 0502 	orrne.w	r5, r5, #2
 8003db2:	b10b      	cbz	r3, 8003db8 <_swiopen+0x5c>
 8003db4:	f045 0504 	orr.w	r5, r5, #4
 8003db8:	f018 0f08 	tst.w	r8, #8
 8003dbc:	bf18      	it	ne
 8003dbe:	f025 0504 	bicne.w	r5, r5, #4
 8003dc2:	4650      	mov	r0, sl
 8003dc4:	bf18      	it	ne
 8003dc6:	f045 0508 	orrne.w	r5, r5, #8
 8003dca:	f8cd a004 	str.w	sl, [sp, #4]
 8003dce:	f001 fbd5 	bl	800557c <strlen>
 8003dd2:	9502      	str	r5, [sp, #8]
 8003dd4:	9003      	str	r0, [sp, #12]
 8003dd6:	2501      	movs	r5, #1
 8003dd8:	4628      	mov	r0, r5
 8003dda:	4649      	mov	r1, r9
 8003ddc:	beab      	bkpt	0x00ab
 8003dde:	4605      	mov	r5, r0
 8003de0:	2d00      	cmp	r5, #0
 8003de2:	db09      	blt.n	8003df8 <_swiopen+0x9c>
 8003de4:	f846 5034 	str.w	r5, [r6, r4, lsl #3]
 8003de8:	4625      	mov	r5, r4
 8003dea:	4437      	add	r7, r6
 8003dec:	2300      	movs	r3, #0
 8003dee:	4628      	mov	r0, r5
 8003df0:	607b      	str	r3, [r7, #4]
 8003df2:	b010      	add	sp, #64	; 0x40
 8003df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df8:	f000 ff38 	bl	8004c6c <__errno>
 8003dfc:	2613      	movs	r6, #19
 8003dfe:	4604      	mov	r4, r0
 8003e00:	2700      	movs	r7, #0
 8003e02:	4630      	mov	r0, r6
 8003e04:	4639      	mov	r1, r7
 8003e06:	beab      	bkpt	0x00ab
 8003e08:	4606      	mov	r6, r0
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	6026      	str	r6, [r4, #0]
 8003e0e:	b010      	add	sp, #64	; 0x40
 8003e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e14:	4649      	mov	r1, r9
 8003e16:	4650      	mov	r0, sl
 8003e18:	f7ff ff82 	bl	8003d20 <_stat>
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	d0bd      	beq.n	8003d9c <_swiopen+0x40>
 8003e20:	f000 ff24 	bl	8004c6c <__errno>
 8003e24:	2311      	movs	r3, #17
 8003e26:	6003      	str	r3, [r0, #0]
 8003e28:	e7ad      	b.n	8003d86 <_swiopen+0x2a>
 8003e2a:	bf00      	nop
 8003e2c:	20000b98 	.word	0x20000b98

08003e30 <_open>:
 8003e30:	b40e      	push	{r1, r2, r3}
 8003e32:	b500      	push	{lr}
 8003e34:	9901      	ldr	r1, [sp, #4]
 8003e36:	f7ff ff91 	bl	8003d5c <_swiopen>
 8003e3a:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e3e:	b003      	add	sp, #12
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop

08003e44 <_link>:
 8003e44:	b508      	push	{r3, lr}
 8003e46:	f000 ff11 	bl	8004c6c <__errno>
 8003e4a:	2358      	movs	r3, #88	; 0x58
 8003e4c:	6003      	str	r3, [r0, #0]
 8003e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e52:	bd08      	pop	{r3, pc}

08003e54 <_unlink>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	9000      	str	r0, [sp, #0]
 8003e5a:	f001 fb8f 	bl	800557c <strlen>
 8003e5e:	240e      	movs	r4, #14
 8003e60:	9001      	str	r0, [sp, #4]
 8003e62:	466d      	mov	r5, sp
 8003e64:	4620      	mov	r0, r4
 8003e66:	4629      	mov	r1, r5
 8003e68:	beab      	bkpt	0x00ab
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	3401      	adds	r4, #1
 8003e6e:	d002      	beq.n	8003e76 <_unlink+0x22>
 8003e70:	2000      	movs	r0, #0
 8003e72:	b002      	add	sp, #8
 8003e74:	bd70      	pop	{r4, r5, r6, pc}
 8003e76:	f000 fef9 	bl	8004c6c <__errno>
 8003e7a:	2513      	movs	r5, #19
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	2600      	movs	r6, #0
 8003e80:	4628      	mov	r0, r5
 8003e82:	4631      	mov	r1, r6
 8003e84:	beab      	bkpt	0x00ab
 8003e86:	4605      	mov	r5, r0
 8003e88:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8c:	6025      	str	r5, [r4, #0]
 8003e8e:	b002      	add	sp, #8
 8003e90:	bd70      	pop	{r4, r5, r6, pc}
 8003e92:	bf00      	nop

08003e94 <_gettimeofday>:
 8003e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e96:	4605      	mov	r5, r0
 8003e98:	460c      	mov	r4, r1
 8003e9a:	b140      	cbz	r0, 8003eae <_gettimeofday+0x1a>
 8003e9c:	2611      	movs	r6, #17
 8003e9e:	2700      	movs	r7, #0
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	4639      	mov	r1, r7
 8003ea4:	beab      	bkpt	0x00ab
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	602e      	str	r6, [r5, #0]
 8003eac:	606b      	str	r3, [r5, #4]
 8003eae:	b114      	cbz	r4, 8003eb6 <_gettimeofday+0x22>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	6023      	str	r3, [r4, #0]
 8003eb4:	6063      	str	r3, [r4, #4]
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eba:	bf00      	nop

08003ebc <_clock>:
 8003ebc:	b530      	push	{r4, r5, lr}
 8003ebe:	2410      	movs	r4, #16
 8003ec0:	2500      	movs	r5, #0
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	beab      	bkpt	0x00ab
 8003ec8:	4604      	mov	r4, r0
 8003eca:	4620      	mov	r0, r4
 8003ecc:	bd30      	pop	{r4, r5, pc}
 8003ece:	bf00      	nop

08003ed0 <_times>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	2510      	movs	r5, #16
 8003ed6:	2600      	movs	r6, #0
 8003ed8:	4628      	mov	r0, r5
 8003eda:	4631      	mov	r1, r6
 8003edc:	beab      	bkpt	0x00ab
 8003ede:	4605      	mov	r5, r0
 8003ee0:	b124      	cbz	r4, 8003eec <_times+0x1c>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	6025      	str	r5, [r4, #0]
 8003ee6:	6063      	str	r3, [r4, #4]
 8003ee8:	60a3      	str	r3, [r4, #8]
 8003eea:	60e3      	str	r3, [r4, #12]
 8003eec:	4628      	mov	r0, r5
 8003eee:	bd70      	pop	{r4, r5, r6, pc}

08003ef0 <_isatty>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	f7ff fd4b 	bl	800398c <findslot>
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	b198      	cbz	r0, 8003f22 <_isatty+0x32>
 8003efa:	2509      	movs	r5, #9
 8003efc:	4628      	mov	r0, r5
 8003efe:	4621      	mov	r1, r4
 8003f00:	beab      	bkpt	0x00ab
 8003f02:	4604      	mov	r4, r0
 8003f04:	2c01      	cmp	r4, #1
 8003f06:	d00a      	beq.n	8003f1e <_isatty+0x2e>
 8003f08:	f000 feb0 	bl	8004c6c <__errno>
 8003f0c:	2413      	movs	r4, #19
 8003f0e:	4605      	mov	r5, r0
 8003f10:	2600      	movs	r6, #0
 8003f12:	4620      	mov	r0, r4
 8003f14:	4631      	mov	r1, r6
 8003f16:	beab      	bkpt	0x00ab
 8003f18:	4606      	mov	r6, r0
 8003f1a:	2400      	movs	r4, #0
 8003f1c:	602e      	str	r6, [r5, #0]
 8003f1e:	4620      	mov	r0, r4
 8003f20:	bd70      	pop	{r4, r5, r6, pc}
 8003f22:	f000 fea3 	bl	8004c6c <__errno>
 8003f26:	2309      	movs	r3, #9
 8003f28:	6003      	str	r3, [r0, #0]
 8003f2a:	e7f8      	b.n	8003f1e <_isatty+0x2e>

08003f2c <_system>:
 8003f2c:	b530      	push	{r4, r5, lr}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	b1d8      	cbz	r0, 8003f6a <_system+0x3e>
 8003f32:	9000      	str	r0, [sp, #0]
 8003f34:	f001 fb22 	bl	800557c <strlen>
 8003f38:	2412      	movs	r4, #18
 8003f3a:	9001      	str	r0, [sp, #4]
 8003f3c:	466d      	mov	r5, sp
 8003f3e:	4620      	mov	r0, r4
 8003f40:	4629      	mov	r1, r5
 8003f42:	beab      	bkpt	0x00ab
 8003f44:	4604      	mov	r4, r0
 8003f46:	1c63      	adds	r3, r4, #1
 8003f48:	d00b      	beq.n	8003f62 <_system+0x36>
 8003f4a:	2cff      	cmp	r4, #255	; 0xff
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	d806      	bhi.n	8003f5e <_system+0x32>
 8003f50:	b12c      	cbz	r4, 8003f5e <_system+0x32>
 8003f52:	0040      	lsls	r0, r0, #1
 8003f54:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003f58:	d001      	beq.n	8003f5e <_system+0x32>
 8003f5a:	42a3      	cmp	r3, r4
 8003f5c:	d1f9      	bne.n	8003f52 <_system+0x26>
 8003f5e:	b003      	add	sp, #12
 8003f60:	bd30      	pop	{r4, r5, pc}
 8003f62:	f7ff fd2f 	bl	80039c4 <checkerror.part.0>
 8003f66:	4604      	mov	r4, r0
 8003f68:	e7ef      	b.n	8003f4a <_system+0x1e>
 8003f6a:	2001      	movs	r0, #1
 8003f6c:	b003      	add	sp, #12
 8003f6e:	bd30      	pop	{r4, r5, pc}

08003f70 <_rename>:
 8003f70:	b530      	push	{r4, r5, lr}
 8003f72:	b085      	sub	sp, #20
 8003f74:	460c      	mov	r4, r1
 8003f76:	9000      	str	r0, [sp, #0]
 8003f78:	f001 fb00 	bl	800557c <strlen>
 8003f7c:	9001      	str	r0, [sp, #4]
 8003f7e:	4620      	mov	r0, r4
 8003f80:	9402      	str	r4, [sp, #8]
 8003f82:	f001 fafb 	bl	800557c <strlen>
 8003f86:	240f      	movs	r4, #15
 8003f88:	9003      	str	r0, [sp, #12]
 8003f8a:	466d      	mov	r5, sp
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	4629      	mov	r1, r5
 8003f90:	beab      	bkpt	0x00ab
 8003f92:	4604      	mov	r4, r0
 8003f94:	1c63      	adds	r3, r4, #1
 8003f96:	d006      	beq.n	8003fa6 <_rename+0x36>
 8003f98:	4620      	mov	r0, r4
 8003f9a:	3000      	adds	r0, #0
 8003f9c:	bf18      	it	ne
 8003f9e:	2001      	movne	r0, #1
 8003fa0:	4240      	negs	r0, r0
 8003fa2:	b005      	add	sp, #20
 8003fa4:	bd30      	pop	{r4, r5, pc}
 8003fa6:	f7ff fd0d 	bl	80039c4 <checkerror.part.0>
 8003faa:	e7f6      	b.n	8003f9a <_rename+0x2a>

08003fac <_exit>:
 8003fac:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb0:	f000 b800 	b.w	8003fb4 <_kill>

08003fb4 <_kill>:
 8003fb4:	2906      	cmp	r1, #6
 8003fb6:	b530      	push	{r4, r5, lr}
 8003fb8:	bf0c      	ite	eq
 8003fba:	4d04      	ldreq	r5, [pc, #16]	; (8003fcc <_kill+0x18>)
 8003fbc:	4d04      	ldrne	r5, [pc, #16]	; (8003fd0 <_kill+0x1c>)
 8003fbe:	2418      	movs	r4, #24
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	beab      	bkpt	0x00ab
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	4620      	mov	r0, r4
 8003fca:	bd30      	pop	{r4, r5, pc}
 8003fcc:	00020023 	.word	0x00020023
 8003fd0:	00020026 	.word	0x00020026

08003fd4 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003fd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003fd6:	f000 b804 	b.w	8003fe2 <LoopCopyDataInit>

08003fda <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003fda:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <LoopFillZerobss+0xe>)
	ldr	r3, [r3, r1]
 8003fdc:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003fde:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003fe0:	3104      	adds	r1, #4

08003fe2 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003fe2:	480a      	ldr	r0, [pc, #40]	; (800400c <LoopFillZerobss+0x12>)
	ldr	r3, =_edata
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <LoopFillZerobss+0x16>)
	adds	r2, r0, r1
 8003fe6:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003fe8:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003fea:	f4ff aff6 	bcc.w	8003fda <CopyDataInit>
	ldr	r2, =_sbss
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <LoopFillZerobss+0x1a>)
	b	LoopFillZerobss
 8003ff0:	f000 b803 	b.w	8003ffa <LoopFillZerobss>

08003ff4 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003ff4:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003ff6:	f842 3b04 	str.w	r3, [r2], #4

08003ffa <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <LoopFillZerobss+0x1e>)
	cmp	r2, r3
 8003ffc:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ffe:	f4ff aff9 	bcc.w	8003ff4 <FillZerobss>
	
/* Call the clock system intitialization function.*/
/* Call static constructors */
/*  bl __libc_init_array  */
/* Call the application's entry point.*/
	bl	main
 8004002:	f7fc fa8d 	bl	8000520 <main>
	bx	lr
 8004006:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8004008:	080065d8 	.word	0x080065d8
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 800400c:	200001e0 	.word	0x200001e0
	ldr	r3, =_edata
 8004010:	20000b5c 	.word	0x20000b5c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8004014:	20000b6c 	.word	0x20000b6c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8004018:	20000c74 	.word	0x20000c74

0800401c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800401c:	f7ff bffe 	b.w	800401c <ADC1_IRQHandler>

08004020 <gpio_set_mode>:
	     If multiple pins are to be set, use logical OR '|' to separate
	     them.
*/

void gpio_set_mode(uint32_t gpioport, uint8_t mode, uint8_t cnf, uint16_t gpios)
{
 8004020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	crl = GPIO_CRL(gpioport);
 8004024:	6806      	ldr	r6, [r0, #0]
	crh = GPIO_CRH(gpioport);
 8004026:	6845      	ldr	r5, [r0, #4]
 8004028:	f64f 7ce0 	movw	ip, #65504	; 0xffe0
 800402c:	2400      	movs	r4, #0

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
		/* Only set the config if the bit is set in gpios. */
		if (!((1 << i) & gpios)) {
 800402e:	fa43 f704 	asr.w	r7, r3, r4
 8004032:	07ff      	lsls	r7, r7, #31
 8004034:	d521      	bpl.n	800407a <gpio_set_mode+0x5a>
 8004036:	fa1f f884 	uxth.w	r8, r4
			continue;
		}

		/* Calculate bit offset. */
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 800403a:	f1b8 0f07 	cmp.w	r8, #7
 800403e:	d804      	bhi.n	800404a <gpio_set_mode+0x2a>
 8004040:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8004044:	b2bf      	uxth	r7, r7
 8004046:	46b1      	mov	r9, r6
 8004048:	e001      	b.n	800404e <gpio_set_mode+0x2e>
 800404a:	4667      	mov	r7, ip
 800404c:	46a9      	mov	r9, r5

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 800404e:	f04f 0a0f 	mov.w	sl, #15
 8004052:	fa0a fa07 	lsl.w	sl, sl, r7
 8004056:	ea29 090a 	bic.w	r9, r9, sl
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 800405a:	f107 0a02 	add.w	sl, r7, #2
 800405e:	fa02 fa0a 	lsl.w	sl, r2, sl
 8004062:	fa01 f707 	lsl.w	r7, r1, r7
 8004066:	ea4a 0707 	orr.w	r7, sl, r7
 800406a:	ea47 0709 	orr.w	r7, r7, r9

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
 800406e:	f1b8 0f07 	cmp.w	r8, #7
 8004072:	bf98      	it	ls
 8004074:	463e      	movls	r6, r7
 8004076:	bf88      	it	hi
 8004078:	463d      	movhi	r5, r7
 800407a:	3401      	adds	r4, #1
 800407c:	f10c 0c04 	add.w	ip, ip, #4
	 */
	crl = GPIO_CRL(gpioport);
	crh = GPIO_CRH(gpioport);

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 8004080:	2c10      	cmp	r4, #16
 8004082:	fa1f fc8c 	uxth.w	ip, ip
 8004086:	d1d2      	bne.n	800402e <gpio_set_mode+0xe>
		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
		crh = (i >= 8) ? tmp32 : crh;
	}

	GPIO_CRL(gpioport) = crl;
 8004088:	6006      	str	r6, [r0, #0]
	GPIO_CRH(gpioport) = crh;
 800408a:	6045      	str	r5, [r0, #4]
 800408c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004090 <gpio_set_eventout>:
@param[in] evoutport Unsigned int8. Port for EVENTOUT signal @ref afio_evcr_port
@param[in] evoutpin Unsigned int8. Pin for EVENTOUT signal @ref afio_evcr_pin
*/
void gpio_set_eventout(uint8_t evoutport, uint8_t evoutpin)
{
	AFIO_EVCR = AFIO_EVCR_EVOE | evoutport | evoutpin;
 8004090:	4301      	orrs	r1, r0
 8004092:	4b02      	ldr	r3, [pc, #8]	; (800409c <gpio_set_eventout+0xc>)
 8004094:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004098:	6019      	str	r1, [r3, #0]
 800409a:	4770      	bx	lr
 800409c:	40010000 	.word	0x40010000

080040a0 <gpio_primary_remap>:
@ref afio_remap_tim1, @ref afio_remap_usart3. For connectivity line devices
only @ref afio_remap_cld are also available.
*/
void gpio_primary_remap(uint32_t swjdisable, uint32_t maps)
{
	AFIO_MAPR |= (swjdisable & AFIO_MAPR_SWJ_MASK) | (maps & 0x1FFFFF);
 80040a0:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <gpio_primary_remap+0x14>)
 80040a2:	f3c1 0114 	ubfx	r1, r1, #0, #21
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	f000 60e0 	and.w	r0, r0, #117440512	; 0x7000000
 80040ac:	430a      	orrs	r2, r1
 80040ae:	4302      	orrs	r2, r0
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	4770      	bx	lr
 80040b4:	40010004 	.word	0x40010004

080040b8 <gpio_secondary_remap>:
@param[in] maps Unsigned int32. Logical OR of map enable controls from @ref
afio_remap2
*/
void gpio_secondary_remap(uint32_t maps)
{
	AFIO_MAPR2 |= maps;
 80040b8:	4b02      	ldr	r3, [pc, #8]	; (80040c4 <gpio_secondary_remap+0xc>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4310      	orrs	r0, r2
 80040be:	6018      	str	r0, [r3, #0]
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	4001001c 	.word	0x4001001c

080040c8 <timer_reset>:
			    tim_reg_base (TIM9 .. TIM14 not yet supported here).
*/

void timer_reset(uint32_t timer_peripheral)
{
	switch (timer_peripheral) {
 80040c8:	4b1c      	ldr	r3, [pc, #112]	; (800413c <timer_reset+0x74>)
 80040ca:	4298      	cmp	r0, r3
 80040cc:	d028      	beq.n	8004120 <timer_reset+0x58>
 80040ce:	d80d      	bhi.n	80040ec <timer_reset+0x24>
 80040d0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80040d4:	4298      	cmp	r0, r3
 80040d6:	d01d      	beq.n	8004114 <timer_reset+0x4c>
 80040d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040dc:	4298      	cmp	r0, r3
 80040de:	d01c      	beq.n	800411a <timer_reset+0x52>
 80040e0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80040e4:	d129      	bne.n	800413a <timer_reset+0x72>
	case TIM1:
		rcc_periph_reset_pulse(RST_TIM1);
		break;
#endif
	case TIM2:
		rcc_periph_reset_pulse(RST_TIM2);
 80040e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80040ea:	e024      	b.n	8004136 <timer_reset+0x6e>
			    tim_reg_base (TIM9 .. TIM14 not yet supported here).
*/

void timer_reset(uint32_t timer_peripheral)
{
	switch (timer_peripheral) {
 80040ec:	4b14      	ldr	r3, [pc, #80]	; (8004140 <timer_reset+0x78>)
 80040ee:	4298      	cmp	r0, r3
 80040f0:	d01c      	beq.n	800412c <timer_reset+0x64>
 80040f2:	d804      	bhi.n	80040fe <timer_reset+0x36>
 80040f4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80040f8:	4298      	cmp	r0, r3
 80040fa:	d014      	beq.n	8004126 <timer_reset+0x5e>
 80040fc:	4770      	bx	lr
 80040fe:	4b11      	ldr	r3, [pc, #68]	; (8004144 <timer_reset+0x7c>)
 8004100:	4298      	cmp	r0, r3
 8004102:	d004      	beq.n	800410e <timer_reset+0x46>
 8004104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004108:	4298      	cmp	r0, r3
 800410a:	d012      	beq.n	8004132 <timer_reset+0x6a>
 800410c:	4770      	bx	lr
#if defined(TIM1_BASE)
	case TIM1:
		rcc_periph_reset_pulse(RST_TIM1);
 800410e:	f240 108b 	movw	r0, #395	; 0x18b
 8004112:	e010      	b.n	8004136 <timer_reset+0x6e>
#endif
	case TIM2:
		rcc_periph_reset_pulse(RST_TIM2);
		break;
	case TIM3:
		rcc_periph_reset_pulse(RST_TIM3);
 8004114:	f240 2001 	movw	r0, #513	; 0x201
 8004118:	e00d      	b.n	8004136 <timer_reset+0x6e>
		break;
#if defined(TIM4_BASE)
	case TIM4:
		rcc_periph_reset_pulse(RST_TIM4);
 800411a:	f240 2002 	movw	r0, #514	; 0x202
 800411e:	e00a      	b.n	8004136 <timer_reset+0x6e>
		break;
#endif
#if defined(TIM5_BASE)
	case TIM5:
		rcc_periph_reset_pulse(RST_TIM5);
 8004120:	f240 2003 	movw	r0, #515	; 0x203
 8004124:	e007      	b.n	8004136 <timer_reset+0x6e>
		break;
#endif
	case TIM6:
		rcc_periph_reset_pulse(RST_TIM6);
 8004126:	f44f 7001 	mov.w	r0, #516	; 0x204
 800412a:	e004      	b.n	8004136 <timer_reset+0x6e>
		break;
	case TIM7:
		rcc_periph_reset_pulse(RST_TIM7);
 800412c:	f240 2005 	movw	r0, #517	; 0x205
 8004130:	e001      	b.n	8004136 <timer_reset+0x6e>
		break;
#if defined(TIM8_BASE)
	case TIM8:
		rcc_periph_reset_pulse(RST_TIM8);
 8004132:	f240 108d 	movw	r0, #397	; 0x18d
 8004136:	f000 bd6a 	b.w	8004c0e <rcc_periph_reset_pulse>
 800413a:	4770      	bx	lr
 800413c:	40000c00 	.word	0x40000c00
 8004140:	40001400 	.word	0x40001400
 8004144:	40012c00 	.word	0x40012c00

08004148 <timer_enable_irq>:
enable bits to be set
*/

void timer_enable_irq(uint32_t timer_peripheral, uint32_t irq)
{
	TIM_DIER(timer_peripheral) |= irq;
 8004148:	68c3      	ldr	r3, [r0, #12]
 800414a:	4319      	orrs	r1, r3
 800414c:	60c1      	str	r1, [r0, #12]
 800414e:	4770      	bx	lr

08004150 <timer_disable_irq>:
enable bits to be cleared
*/

void timer_disable_irq(uint32_t timer_peripheral, uint32_t irq)
{
	TIM_DIER(timer_peripheral) &= ~irq;
 8004150:	68c3      	ldr	r3, [r0, #12]
 8004152:	ea23 0101 	bic.w	r1, r3, r1
 8004156:	60c1      	str	r1, [r0, #12]
 8004158:	4770      	bx	lr
	...

0800415c <timer_interrupt_source>:
*/

bool timer_interrupt_source(uint32_t timer_peripheral, uint32_t flag)
{
/* flag not set or interrupt disabled or not an interrupt source */
	if (((TIM_SR(timer_peripheral) &
 800415c:	6902      	ldr	r2, [r0, #16]
		TIM_DIER(timer_peripheral) & flag) == 0) ||
 800415e:	68c3      	ldr	r3, [r0, #12]
*/

bool timer_interrupt_source(uint32_t timer_peripheral, uint32_t flag)
{
/* flag not set or interrupt disabled or not an interrupt source */
	if (((TIM_SR(timer_peripheral) &
 8004160:	4013      	ands	r3, r2
 8004162:	400b      	ands	r3, r1
 8004164:	d00d      	beq.n	8004182 <timer_interrupt_source+0x26>
		TIM_DIER(timer_peripheral) & flag) == 0) ||
 8004166:	2980      	cmp	r1, #128	; 0x80
 8004168:	d80d      	bhi.n	8004186 <timer_interrupt_source+0x2a>
		(flag > TIM_SR_BIF)) {
		return false;
	}
/* Only an interrupt source for advanced timers */
#if ADVANCED_TIMERS
	if ((flag == TIM_SR_BIF) || (flag == TIM_SR_COMIF)) {
 800416a:	d001      	beq.n	8004170 <timer_interrupt_source+0x14>
 800416c:	2920      	cmp	r1, #32
 800416e:	d10c      	bne.n	800418a <timer_interrupt_source+0x2e>
		return TIMER_IS_ADVANCED(timer_peripheral);
 8004170:	4b07      	ldr	r3, [pc, #28]	; (8004190 <timer_interrupt_source+0x34>)
 8004172:	4298      	cmp	r0, r3
 8004174:	d009      	beq.n	800418a <timer_interrupt_source+0x2e>
 8004176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417a:	1ac3      	subs	r3, r0, r3
 800417c:	4258      	negs	r0, r3
 800417e:	4158      	adcs	r0, r3
 8004180:	4770      	bx	lr
{
/* flag not set or interrupt disabled or not an interrupt source */
	if (((TIM_SR(timer_peripheral) &
		TIM_DIER(timer_peripheral) & flag) == 0) ||
		(flag > TIM_SR_BIF)) {
		return false;
 8004182:	4618      	mov	r0, r3
 8004184:	4770      	bx	lr
 8004186:	2000      	movs	r0, #0
 8004188:	4770      	bx	lr
#if ADVANCED_TIMERS
	if ((flag == TIM_SR_BIF) || (flag == TIM_SR_COMIF)) {
		return TIMER_IS_ADVANCED(timer_peripheral);
	}
#endif
	return true;
 800418a:	2001      	movs	r0, #1
}
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40012c00 	.word	0x40012c00

08004194 <timer_get_flag>:
@returns boolean: flag set.
*/

bool timer_get_flag(uint32_t timer_peripheral, uint32_t flag)
{
	if ((TIM_SR(timer_peripheral) & flag) != 0) {
 8004194:	6903      	ldr	r3, [r0, #16]
 8004196:	420b      	tst	r3, r1
		return true;
	}

	return false;
}
 8004198:	bf0c      	ite	eq
 800419a:	2000      	moveq	r0, #0
 800419c:	2001      	movne	r0, #1
 800419e:	4770      	bx	lr

080041a0 <timer_clear_flag>:
@param[in] flag Unsigned int32. @ref tim_sr_values. Status register flag.
*/

void timer_clear_flag(uint32_t timer_peripheral, uint32_t flag)
{
	TIM_SR(timer_peripheral) &= ~flag;
 80041a0:	6903      	ldr	r3, [r0, #16]
 80041a2:	ea23 0101 	bic.w	r1, r3, r1
 80041a6:	6101      	str	r1, [r0, #16]
 80041a8:	4770      	bx	lr

080041aa <timer_set_mode>:
tim_x_cr1_dir
*/

void timer_set_mode(uint32_t timer_peripheral, uint32_t clock_div,
		    uint32_t alignment, uint32_t direction)
{
 80041aa:	b510      	push	{r4, lr}
	uint32_t cr1;

	cr1 = TIM_CR1(timer_peripheral);
 80041ac:	6804      	ldr	r4, [r0, #0]

	cr1 &= ~(TIM_CR1_CKD_CK_INT_MASK | TIM_CR1_CMS_MASK | TIM_CR1_DIR_DOWN);

	cr1 |= clock_div | alignment | direction;
 80041ae:	4313      	orrs	r3, r2
{
	uint32_t cr1;

	cr1 = TIM_CR1(timer_peripheral);

	cr1 &= ~(TIM_CR1_CKD_CK_INT_MASK | TIM_CR1_CMS_MASK | TIM_CR1_DIR_DOWN);
 80041b0:	f424 745c 	bic.w	r4, r4, #880	; 0x370

	cr1 |= clock_div | alignment | direction;
 80041b4:	4319      	orrs	r1, r3
 80041b6:	430c      	orrs	r4, r1

	TIM_CR1(timer_peripheral) = cr1;
 80041b8:	6004      	str	r4, [r0, #0]
 80041ba:	bd10      	pop	{r4, pc}

080041bc <timer_set_clock_division>:
*/

void timer_set_clock_division(uint32_t timer_peripheral, uint32_t clock_div)
{
	clock_div &= TIM_CR1_CKD_CK_INT_MASK;
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CKD_CK_INT_MASK;
 80041bc:	6803      	ldr	r3, [r0, #0]
tim_x_cr1_cdr
*/

void timer_set_clock_division(uint32_t timer_peripheral, uint32_t clock_div)
{
	clock_div &= TIM_CR1_CKD_CK_INT_MASK;
 80041be:	f401 7140 	and.w	r1, r1, #768	; 0x300
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CKD_CK_INT_MASK;
 80041c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c6:	6003      	str	r3, [r0, #0]
	TIM_CR1(timer_peripheral) |= clock_div;
 80041c8:	6803      	ldr	r3, [r0, #0]
 80041ca:	430b      	orrs	r3, r1
 80041cc:	6003      	str	r3, [r0, #0]
 80041ce:	4770      	bx	lr

080041d0 <timer_enable_preload>:
tim_reg_base
*/

void timer_enable_preload(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_ARPE;
 80041d0:	6803      	ldr	r3, [r0, #0]
 80041d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d6:	6003      	str	r3, [r0, #0]
 80041d8:	4770      	bx	lr

080041da <timer_disable_preload>:
tim_reg_base
*/

void timer_disable_preload(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_ARPE;
 80041da:	6803      	ldr	r3, [r0, #0]
 80041dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041e0:	6003      	str	r3, [r0, #0]
 80041e2:	4770      	bx	lr

080041e4 <timer_set_alignment>:
*/

void timer_set_alignment(uint32_t timer_peripheral, uint32_t alignment)
{
	alignment &= TIM_CR1_CMS_MASK;
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CMS_MASK;
 80041e4:	6803      	ldr	r3, [r0, #0]
@param[in] alignment Unsigned int32. Alignment bits in 5,6: @ref tim_x_cr1_cms
*/

void timer_set_alignment(uint32_t timer_peripheral, uint32_t alignment)
{
	alignment &= TIM_CR1_CMS_MASK;
 80041e6:	f001 0160 	and.w	r1, r1, #96	; 0x60
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CMS_MASK;
 80041ea:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80041ee:	6003      	str	r3, [r0, #0]
	TIM_CR1(timer_peripheral) |= alignment;
 80041f0:	6803      	ldr	r3, [r0, #0]
 80041f2:	430b      	orrs	r3, r1
 80041f4:	6003      	str	r3, [r0, #0]
 80041f6:	4770      	bx	lr

080041f8 <timer_direction_up>:
tim_reg_base
*/

void timer_direction_up(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_DIR_DOWN;
 80041f8:	6803      	ldr	r3, [r0, #0]
 80041fa:	f023 0310 	bic.w	r3, r3, #16
 80041fe:	6003      	str	r3, [r0, #0]
 8004200:	4770      	bx	lr

08004202 <timer_direction_down>:
tim_reg_base
*/

void timer_direction_down(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_DIR_DOWN;
 8004202:	6803      	ldr	r3, [r0, #0]
 8004204:	f043 0310 	orr.w	r3, r3, #16
 8004208:	6003      	str	r3, [r0, #0]
 800420a:	4770      	bx	lr

0800420c <timer_one_shot_mode>:
tim_reg_base
*/

void timer_one_shot_mode(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_OPM;
 800420c:	6803      	ldr	r3, [r0, #0]
 800420e:	f043 0308 	orr.w	r3, r3, #8
 8004212:	6003      	str	r3, [r0, #0]
 8004214:	4770      	bx	lr

08004216 <timer_continuous_mode>:
tim_reg_base
*/

void timer_continuous_mode(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_OPM;
 8004216:	6803      	ldr	r3, [r0, #0]
 8004218:	f023 0308 	bic.w	r3, r3, #8
 800421c:	6003      	str	r3, [r0, #0]
 800421e:	4770      	bx	lr

08004220 <timer_update_on_any>:
tim_reg_base
*/

void timer_update_on_any(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_URS;
 8004220:	6803      	ldr	r3, [r0, #0]
 8004222:	f023 0304 	bic.w	r3, r3, #4
 8004226:	6003      	str	r3, [r0, #0]
 8004228:	4770      	bx	lr

0800422a <timer_update_on_overflow>:
tim_reg_base
*/

void timer_update_on_overflow(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_URS;
 800422a:	6803      	ldr	r3, [r0, #0]
 800422c:	f043 0304 	orr.w	r3, r3, #4
 8004230:	6003      	str	r3, [r0, #0]
 8004232:	4770      	bx	lr

08004234 <timer_enable_update_event>:
tim_reg_base
*/

void timer_enable_update_event(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_UDIS;
 8004234:	6803      	ldr	r3, [r0, #0]
 8004236:	f023 0302 	bic.w	r3, r3, #2
 800423a:	6003      	str	r3, [r0, #0]
 800423c:	4770      	bx	lr

0800423e <timer_disable_update_event>:
tim_reg_base
*/

void timer_disable_update_event(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_UDIS;
 800423e:	6803      	ldr	r3, [r0, #0]
 8004240:	f043 0302 	orr.w	r3, r3, #2
 8004244:	6003      	str	r3, [r0, #0]
 8004246:	4770      	bx	lr

08004248 <timer_enable_counter>:
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 8004248:	6803      	ldr	r3, [r0, #0]
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	6003      	str	r3, [r0, #0]
 8004250:	4770      	bx	lr

08004252 <timer_disable_counter>:
tim_reg_base
*/

void timer_disable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CEN;
 8004252:	6803      	ldr	r3, [r0, #0]
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	6003      	str	r3, [r0, #0]
 800425a:	4770      	bx	lr

0800425c <timer_set_output_idle_state>:
*/

void timer_set_output_idle_state(uint32_t timer_peripheral, uint32_t outputs)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <timer_set_output_idle_state+0x1c>)
 800425e:	4298      	cmp	r0, r3
 8004260:	d003      	beq.n	800426a <timer_set_output_idle_state+0xe>
 8004262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004266:	4298      	cmp	r0, r3
 8004268:	d104      	bne.n	8004274 <timer_set_output_idle_state+0x18>
		TIM_CR2(timer_peripheral) |= outputs & TIM_CR2_OIS_MASK;
 800426a:	6843      	ldr	r3, [r0, #4]
 800426c:	f401 41fe 	and.w	r1, r1, #32512	; 0x7f00
 8004270:	4319      	orrs	r1, r3
 8004272:	6041      	str	r1, [r0, #4]
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40012c00 	.word	0x40012c00

0800427c <timer_reset_output_idle_state>:
*/

void timer_reset_output_idle_state(uint32_t timer_peripheral, uint32_t outputs)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <timer_reset_output_idle_state+0x1c>)
 800427e:	4298      	cmp	r0, r3
 8004280:	d003      	beq.n	800428a <timer_reset_output_idle_state+0xe>
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	4298      	cmp	r0, r3
 8004288:	d105      	bne.n	8004296 <timer_reset_output_idle_state+0x1a>
		TIM_CR2(timer_peripheral) &= ~(outputs & TIM_CR2_OIS_MASK);
 800428a:	6843      	ldr	r3, [r0, #4]
 800428c:	f401 41fe 	and.w	r1, r1, #32512	; 0x7f00
 8004290:	ea23 0101 	bic.w	r1, r3, r1
 8004294:	6041      	str	r1, [r0, #4]
 8004296:	4770      	bx	lr
 8004298:	40012c00 	.word	0x40012c00

0800429c <timer_set_ti1_ch123_xor>:
tim_reg_base
*/

void timer_set_ti1_ch123_xor(uint32_t timer_peripheral)
{
	TIM_CR2(timer_peripheral) |= TIM_CR2_TI1S;
 800429c:	6843      	ldr	r3, [r0, #4]
 800429e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a2:	6043      	str	r3, [r0, #4]
 80042a4:	4770      	bx	lr

080042a6 <timer_set_ti1_ch1>:
tim_reg_base
*/

void timer_set_ti1_ch1(uint32_t timer_peripheral)
{
	TIM_CR2(timer_peripheral) &= ~TIM_CR2_TI1S;
 80042a6:	6843      	ldr	r3, [r0, #4]
 80042a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ac:	6043      	str	r3, [r0, #4]
 80042ae:	4770      	bx	lr

080042b0 <timer_set_master_mode>:
@param[in] mode Unsigned int32. Master Mode @ref tim_mastermode
*/

void timer_set_master_mode(uint32_t timer_peripheral, uint32_t mode)
{
	TIM_CR2(timer_peripheral) &= ~TIM_CR2_MMS_MASK;
 80042b0:	6843      	ldr	r3, [r0, #4]
 80042b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b6:	6043      	str	r3, [r0, #4]
	TIM_CR2(timer_peripheral) |= mode;
 80042b8:	6843      	ldr	r3, [r0, #4]
 80042ba:	4319      	orrs	r1, r3
 80042bc:	6041      	str	r1, [r0, #4]
 80042be:	4770      	bx	lr

080042c0 <timer_set_dma_on_compare_event>:
tim_reg_base
*/

void timer_set_dma_on_compare_event(uint32_t timer_peripheral)
{
	TIM_CR2(timer_peripheral) &= ~TIM_CR2_CCDS;
 80042c0:	6843      	ldr	r3, [r0, #4]
 80042c2:	f023 0308 	bic.w	r3, r3, #8
 80042c6:	6043      	str	r3, [r0, #4]
 80042c8:	4770      	bx	lr

080042ca <timer_set_dma_on_update_event>:
tim_reg_base
*/

void timer_set_dma_on_update_event(uint32_t timer_peripheral)
{
	TIM_CR2(timer_peripheral) |= TIM_CR2_CCDS;
 80042ca:	6843      	ldr	r3, [r0, #4]
 80042cc:	f043 0308 	orr.w	r3, r3, #8
 80042d0:	6043      	str	r3, [r0, #4]
 80042d2:	4770      	bx	lr

080042d4 <timer_enable_compare_control_update_on_trigger>:
*/

void timer_enable_compare_control_update_on_trigger(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <timer_enable_compare_control_update_on_trigger+0x18>)
 80042d6:	4298      	cmp	r0, r3
 80042d8:	d003      	beq.n	80042e2 <timer_enable_compare_control_update_on_trigger+0xe>
 80042da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042de:	4298      	cmp	r0, r3
 80042e0:	d103      	bne.n	80042ea <timer_enable_compare_control_update_on_trigger+0x16>
		TIM_CR2(timer_peripheral) |= TIM_CR2_CCUS;
 80042e2:	6843      	ldr	r3, [r0, #4]
 80042e4:	f043 0304 	orr.w	r3, r3, #4
 80042e8:	6043      	str	r3, [r0, #4]
 80042ea:	4770      	bx	lr
 80042ec:	40012c00 	.word	0x40012c00

080042f0 <timer_disable_compare_control_update_on_trigger>:
*/

void timer_disable_compare_control_update_on_trigger(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <timer_disable_compare_control_update_on_trigger+0x18>)
 80042f2:	4298      	cmp	r0, r3
 80042f4:	d003      	beq.n	80042fe <timer_disable_compare_control_update_on_trigger+0xe>
 80042f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fa:	4298      	cmp	r0, r3
 80042fc:	d103      	bne.n	8004306 <timer_disable_compare_control_update_on_trigger+0x16>
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_CCUS;
 80042fe:	6843      	ldr	r3, [r0, #4]
 8004300:	f023 0304 	bic.w	r3, r3, #4
 8004304:	6043      	str	r3, [r0, #4]
 8004306:	4770      	bx	lr
 8004308:	40012c00 	.word	0x40012c00

0800430c <timer_enable_preload_complementry_enable_bits>:
*/

void timer_enable_preload_complementry_enable_bits(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <timer_enable_preload_complementry_enable_bits+0x18>)
 800430e:	4298      	cmp	r0, r3
 8004310:	d003      	beq.n	800431a <timer_enable_preload_complementry_enable_bits+0xe>
 8004312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004316:	4298      	cmp	r0, r3
 8004318:	d103      	bne.n	8004322 <timer_enable_preload_complementry_enable_bits+0x16>
		TIM_CR2(timer_peripheral) |= TIM_CR2_CCPC;
 800431a:	6843      	ldr	r3, [r0, #4]
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6043      	str	r3, [r0, #4]
 8004322:	4770      	bx	lr
 8004324:	40012c00 	.word	0x40012c00

08004328 <timer_disable_preload_complementry_enable_bits>:
*/

void timer_disable_preload_complementry_enable_bits(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <timer_disable_preload_complementry_enable_bits+0x18>)
 800432a:	4298      	cmp	r0, r3
 800432c:	d003      	beq.n	8004336 <timer_disable_preload_complementry_enable_bits+0xe>
 800432e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004332:	4298      	cmp	r0, r3
 8004334:	d103      	bne.n	800433e <timer_disable_preload_complementry_enable_bits+0x16>
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_CCPC;
 8004336:	6843      	ldr	r3, [r0, #4]
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	6043      	str	r3, [r0, #4]
 800433e:	4770      	bx	lr
 8004340:	40012c00 	.word	0x40012c00

08004344 <timer_set_prescaler>:
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
	TIM_PSC(timer_peripheral) = value;
 8004344:	6281      	str	r1, [r0, #40]	; 0x28
 8004346:	4770      	bx	lr

08004348 <timer_set_repetition_counter>:
*/

void timer_set_repetition_counter(uint32_t timer_peripheral, uint32_t value)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 8004348:	4b04      	ldr	r3, [pc, #16]	; (800435c <timer_set_repetition_counter+0x14>)
 800434a:	4298      	cmp	r0, r3
 800434c:	d003      	beq.n	8004356 <timer_set_repetition_counter+0xe>
 800434e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004352:	4298      	cmp	r0, r3
 8004354:	d100      	bne.n	8004358 <timer_set_repetition_counter+0x10>
		TIM_RCR(timer_peripheral) = value;
 8004356:	6301      	str	r1, [r0, #48]	; 0x30
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40012c00 	.word	0x40012c00

08004360 <timer_set_period>:
@param[in] period Unsigned int32. Period in counter clock ticks.
*/

void timer_set_period(uint32_t timer_peripheral, uint32_t period)
{
	TIM_ARR(timer_peripheral) = period;
 8004360:	62c1      	str	r1, [r0, #44]	; 0x2c
 8004362:	4770      	bx	lr

08004364 <timer_enable_oc_clear>:
		TIM_OCx where x=1..4, TIM_OCxN where x=1..3 (no action taken)
*/

void timer_enable_oc_clear(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 8004364:	2906      	cmp	r1, #6
 8004366:	d816      	bhi.n	8004396 <timer_enable_oc_clear+0x32>
 8004368:	e8df f001 	tbb	[pc, r1]
 800436c:	15081504 	.word	0x15081504
 8004370:	150d      	.short	0x150d
 8004372:	11          	.byte	0x11
 8004373:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1CE;
 8004374:	6983      	ldr	r3, [r0, #24]
 8004376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437a:	e002      	b.n	8004382 <timer_enable_oc_clear+0x1e>
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2CE;
 800437c:	6983      	ldr	r3, [r0, #24]
 800437e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004382:	6183      	str	r3, [r0, #24]
		break;
 8004384:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3CE;
 8004386:	69c3      	ldr	r3, [r0, #28]
 8004388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438c:	e002      	b.n	8004394 <timer_enable_oc_clear+0x30>
		break;
	case TIM_OC4:
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4CE;
 800438e:	69c3      	ldr	r3, [r0, #28]
 8004390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004394:	61c3      	str	r3, [r0, #28]
 8004396:	4770      	bx	lr

08004398 <timer_disable_oc_clear>:
		TIM_OCx where x=1..4, TIM_OCxN where x=1..3 (no action taken)
*/

void timer_disable_oc_clear(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 8004398:	2906      	cmp	r1, #6
 800439a:	d816      	bhi.n	80043ca <timer_disable_oc_clear+0x32>
 800439c:	e8df f001 	tbb	[pc, r1]
 80043a0:	15081504 	.word	0x15081504
 80043a4:	150d      	.short	0x150d
 80043a6:	11          	.byte	0x11
 80043a7:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC1CE;
 80043a8:	6983      	ldr	r3, [r0, #24]
 80043aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ae:	e002      	b.n	80043b6 <timer_disable_oc_clear+0x1e>
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC2CE;
 80043b0:	6983      	ldr	r3, [r0, #24]
 80043b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043b6:	6183      	str	r3, [r0, #24]
		break;
 80043b8:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC3CE;
 80043ba:	69c3      	ldr	r3, [r0, #28]
 80043bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c0:	e002      	b.n	80043c8 <timer_disable_oc_clear+0x30>
		break;
	case TIM_OC4:
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC4CE;
 80043c2:	69c3      	ldr	r3, [r0, #28]
 80043c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043c8:	61c3      	str	r3, [r0, #28]
 80043ca:	4770      	bx	lr

080043cc <timer_set_oc_fast_mode>:
		TIM_OCx where x=1..4, TIM_OCxN where x=1..3 (no action taken)
*/

void timer_set_oc_fast_mode(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 80043cc:	2906      	cmp	r1, #6
 80043ce:	d816      	bhi.n	80043fe <timer_set_oc_fast_mode+0x32>
 80043d0:	e8df f001 	tbb	[pc, r1]
 80043d4:	15081504 	.word	0x15081504
 80043d8:	150d      	.short	0x150d
 80043da:	11          	.byte	0x11
 80043db:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1FE;
 80043dc:	6983      	ldr	r3, [r0, #24]
 80043de:	f043 0304 	orr.w	r3, r3, #4
 80043e2:	e002      	b.n	80043ea <timer_set_oc_fast_mode+0x1e>
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2FE;
 80043e4:	6983      	ldr	r3, [r0, #24]
 80043e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ea:	6183      	str	r3, [r0, #24]
		break;
 80043ec:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3FE;
 80043ee:	69c3      	ldr	r3, [r0, #28]
 80043f0:	f043 0304 	orr.w	r3, r3, #4
 80043f4:	e002      	b.n	80043fc <timer_set_oc_fast_mode+0x30>
		break;
	case TIM_OC4:
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4FE;
 80043f6:	69c3      	ldr	r3, [r0, #28]
 80043f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043fc:	61c3      	str	r3, [r0, #28]
 80043fe:	4770      	bx	lr

08004400 <timer_set_oc_slow_mode>:
		TIM_OCx where x=1..4, TIM_OCxN where x=1..3 (no action taken)
*/

void timer_set_oc_slow_mode(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 8004400:	2906      	cmp	r1, #6
 8004402:	d816      	bhi.n	8004432 <timer_set_oc_slow_mode+0x32>
 8004404:	e8df f001 	tbb	[pc, r1]
 8004408:	15081504 	.word	0x15081504
 800440c:	150d      	.short	0x150d
 800440e:	11          	.byte	0x11
 800440f:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC1FE;
 8004410:	6983      	ldr	r3, [r0, #24]
 8004412:	f023 0304 	bic.w	r3, r3, #4
 8004416:	e002      	b.n	800441e <timer_set_oc_slow_mode+0x1e>
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC2FE;
 8004418:	6983      	ldr	r3, [r0, #24]
 800441a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800441e:	6183      	str	r3, [r0, #24]
		break;
 8004420:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC3FE;
 8004422:	69c3      	ldr	r3, [r0, #28]
 8004424:	f023 0304 	bic.w	r3, r3, #4
 8004428:	e002      	b.n	8004430 <timer_set_oc_slow_mode+0x30>
		break;
	case TIM_OC4:
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC4FE;
 800442a:	69c3      	ldr	r3, [r0, #28]
 800442c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004430:	61c3      	str	r3, [r0, #28]
 8004432:	4770      	bx	lr

08004434 <timer_set_oc_mode>:
*/

void timer_set_oc_mode(uint32_t timer_peripheral, enum tim_oc_id oc_id,
		       enum tim_oc_mode oc_mode)
{
	switch (oc_id) {
 8004434:	2906      	cmp	r1, #6
 8004436:	f200 80bf 	bhi.w	80045b8 <timer_set_oc_mode+0x184>
 800443a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800443e:	0007      	.short	0x0007
 8004440:	003200bd 	.word	0x003200bd
 8004444:	005e00bd 	.word	0x005e00bd
 8004448:	008c00bd 	.word	0x008c00bd
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_CC1S_MASK;
 800444c:	6983      	ldr	r3, [r0, #24]
 800444e:	f023 0303 	bic.w	r3, r3, #3
 8004452:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_CC1S_OUT;
 8004454:	6983      	ldr	r3, [r0, #24]
 8004456:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC1M_MASK;
 8004458:	6983      	ldr	r3, [r0, #24]
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	6183      	str	r3, [r0, #24]
		switch (oc_mode) {
 8004460:	2a07      	cmp	r2, #7
 8004462:	f200 80a9 	bhi.w	80045b8 <timer_set_oc_mode+0x184>
 8004466:	e8df f002 	tbb	[pc, r2]
 800446a:	5a2e      	.short	0x5a2e
 800446c:	100c0804 	.word	0x100c0804
 8004470:	1814      	.short	0x1814
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_ACTIVE;
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_INACTIVE;
 8004472:	6983      	ldr	r3, [r0, #24]
 8004474:	f043 0320 	orr.w	r3, r3, #32
 8004478:	e084      	b.n	8004584 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_TOGGLE;
 800447a:	6983      	ldr	r3, [r0, #24]
 800447c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004480:	e080      	b.n	8004584 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_FORCE_LOW;
 8004482:	6983      	ldr	r3, [r0, #24]
 8004484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004488:	e07c      	b.n	8004584 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR1(timer_peripheral) |=
 800448a:	6983      	ldr	r3, [r0, #24]
 800448c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8004490:	e078      	b.n	8004584 <timer_set_oc_mode+0x150>
			    TIM_CCMR1_OC1M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_PWM1;
 8004492:	6983      	ldr	r3, [r0, #24]
 8004494:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004498:	e074      	b.n	8004584 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_PWM2;
 800449a:	6983      	ldr	r3, [r0, #24]
 800449c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80044a0:	e070      	b.n	8004584 <timer_set_oc_mode+0x150>
			break;
		}
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_CC2S_MASK;
 80044a2:	6983      	ldr	r3, [r0, #24]
 80044a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a8:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_CC2S_OUT;
 80044aa:	6983      	ldr	r3, [r0, #24]
 80044ac:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC2M_MASK;
 80044ae:	6983      	ldr	r3, [r0, #24]
 80044b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b4:	6183      	str	r3, [r0, #24]
		switch (oc_mode) {
 80044b6:	2a07      	cmp	r2, #7
 80044b8:	d87e      	bhi.n	80045b8 <timer_set_oc_mode+0x184>
 80044ba:	e8df f002 	tbb	[pc, r2]
 80044be:	6004      	.short	0x6004
 80044c0:	120e0a06 	.word	0x120e0a06
 80044c4:	1a16      	.short	0x1a16
		case TIM_OCM_FROZEN:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_FROZEN;
 80044c6:	6983      	ldr	r3, [r0, #24]
 80044c8:	e05c      	b.n	8004584 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_ACTIVE;
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_INACTIVE;
 80044ca:	6983      	ldr	r3, [r0, #24]
 80044cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044d0:	e058      	b.n	8004584 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_TOGGLE;
 80044d2:	6983      	ldr	r3, [r0, #24]
 80044d4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80044d8:	e054      	b.n	8004584 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_FORCE_LOW;
 80044da:	6983      	ldr	r3, [r0, #24]
 80044dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e0:	e050      	b.n	8004584 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR1(timer_peripheral) |=
 80044e2:	6983      	ldr	r3, [r0, #24]
 80044e4:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80044e8:	e04c      	b.n	8004584 <timer_set_oc_mode+0x150>
			    TIM_CCMR1_OC2M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_PWM1;
 80044ea:	6983      	ldr	r3, [r0, #24]
 80044ec:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80044f0:	e048      	b.n	8004584 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_PWM2;
 80044f2:	6983      	ldr	r3, [r0, #24]
 80044f4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80044f8:	e044      	b.n	8004584 <timer_set_oc_mode+0x150>
			break;
		}
		break;
	case TIM_OC3:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR2_CC3S_MASK;
 80044fa:	6983      	ldr	r3, [r0, #24]
 80044fc:	f023 0303 	bic.w	r3, r3, #3
 8004500:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_CC3S_OUT;
 8004502:	6983      	ldr	r3, [r0, #24]
 8004504:	6183      	str	r3, [r0, #24]
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC3M_MASK;
 8004506:	69c3      	ldr	r3, [r0, #28]
 8004508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450c:	61c3      	str	r3, [r0, #28]
		switch (oc_mode) {
 800450e:	2a07      	cmp	r2, #7
 8004510:	d852      	bhi.n	80045b8 <timer_set_oc_mode+0x184>
 8004512:	e8df f002 	tbb	[pc, r2]
 8004516:	0432      	.short	0x0432
 8004518:	14100c08 	.word	0x14100c08
 800451c:	1c18      	.short	0x1c18
		case TIM_OCM_FROZEN:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_FROZEN;
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_OC3M_ACTIVE;
 800451e:	6983      	ldr	r3, [r0, #24]
 8004520:	f043 0310 	orr.w	r3, r3, #16
 8004524:	e02e      	b.n	8004584 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_INACTIVE;
 8004526:	69c3      	ldr	r3, [r0, #28]
 8004528:	f043 0320 	orr.w	r3, r3, #32
 800452c:	e043      	b.n	80045b6 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_TOGGLE;
 800452e:	69c3      	ldr	r3, [r0, #28]
 8004530:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004534:	e03f      	b.n	80045b6 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_FORCE_LOW;
 8004536:	69c3      	ldr	r3, [r0, #28]
 8004538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800453c:	e03b      	b.n	80045b6 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR2(timer_peripheral) |=
 800453e:	69c3      	ldr	r3, [r0, #28]
 8004540:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8004544:	e037      	b.n	80045b6 <timer_set_oc_mode+0x182>
			    TIM_CCMR2_OC3M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_PWM1;
 8004546:	69c3      	ldr	r3, [r0, #28]
 8004548:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800454c:	e033      	b.n	80045b6 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_PWM2;
 800454e:	69c3      	ldr	r3, [r0, #28]
 8004550:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004554:	e02f      	b.n	80045b6 <timer_set_oc_mode+0x182>
			break;
		}
		break;
	case TIM_OC4:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR2_CC4S_MASK;
 8004556:	6983      	ldr	r3, [r0, #24]
 8004558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455c:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_CC4S_OUT;
 800455e:	6983      	ldr	r3, [r0, #24]
 8004560:	6183      	str	r3, [r0, #24]
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC4M_MASK;
 8004562:	69c3      	ldr	r3, [r0, #28]
 8004564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004568:	61c3      	str	r3, [r0, #28]
		switch (oc_mode) {
 800456a:	2a07      	cmp	r2, #7
 800456c:	d824      	bhi.n	80045b8 <timer_set_oc_mode+0x184>
 800456e:	e8df f002 	tbb	[pc, r2]
 8004572:	0604      	.short	0x0604
 8004574:	17130f0b 	.word	0x17130f0b
 8004578:	1f1b      	.short	0x1f1b
		case TIM_OCM_FROZEN:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_FROZEN;
 800457a:	69c3      	ldr	r3, [r0, #28]
 800457c:	e01b      	b.n	80045b6 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_OC4M_ACTIVE;
 800457e:	6983      	ldr	r3, [r0, #24]
 8004580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004584:	6183      	str	r3, [r0, #24]
			break;
 8004586:	4770      	bx	lr
		case TIM_OCM_INACTIVE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_INACTIVE;
 8004588:	69c3      	ldr	r3, [r0, #28]
 800458a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800458e:	e012      	b.n	80045b6 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_TOGGLE;
 8004590:	69c3      	ldr	r3, [r0, #28]
 8004592:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8004596:	e00e      	b.n	80045b6 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_FORCE_LOW;
 8004598:	69c3      	ldr	r3, [r0, #28]
 800459a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800459e:	e00a      	b.n	80045b6 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR2(timer_peripheral) |=
 80045a0:	69c3      	ldr	r3, [r0, #28]
 80045a2:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80045a6:	e006      	b.n	80045b6 <timer_set_oc_mode+0x182>
			    TIM_CCMR2_OC4M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_PWM1;
 80045a8:	69c3      	ldr	r3, [r0, #28]
 80045aa:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80045ae:	e002      	b.n	80045b6 <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_PWM2;
 80045b0:	69c3      	ldr	r3, [r0, #28]
 80045b2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80045b6:	61c3      	str	r3, [r0, #28]
 80045b8:	4770      	bx	lr

080045ba <timer_enable_oc_preload>:
		TIM_OCx where x=1..4, TIM_OCxN where x=1..3 (no action taken)
*/

void timer_enable_oc_preload(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 80045ba:	2906      	cmp	r1, #6
 80045bc:	d816      	bhi.n	80045ec <timer_enable_oc_preload+0x32>
 80045be:	e8df f001 	tbb	[pc, r1]
 80045c2:	1504      	.short	0x1504
 80045c4:	150d1508 	.word	0x150d1508
 80045c8:	11          	.byte	0x11
 80045c9:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1PE;
 80045ca:	6983      	ldr	r3, [r0, #24]
 80045cc:	f043 0308 	orr.w	r3, r3, #8
 80045d0:	e002      	b.n	80045d8 <timer_enable_oc_preload+0x1e>
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2PE;
 80045d2:	6983      	ldr	r3, [r0, #24]
 80045d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045d8:	6183      	str	r3, [r0, #24]
		break;
 80045da:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3PE;
 80045dc:	69c3      	ldr	r3, [r0, #28]
 80045de:	f043 0308 	orr.w	r3, r3, #8
 80045e2:	e002      	b.n	80045ea <timer_enable_oc_preload+0x30>
		break;
	case TIM_OC4:
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4PE;
 80045e4:	69c3      	ldr	r3, [r0, #28]
 80045e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045ea:	61c3      	str	r3, [r0, #28]
 80045ec:	4770      	bx	lr

080045ee <timer_disable_oc_preload>:
		TIM_OCx where x=1..4, TIM_OCxN where x=1..3 (no action)
*/

void timer_disable_oc_preload(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 80045ee:	2906      	cmp	r1, #6
 80045f0:	d816      	bhi.n	8004620 <timer_disable_oc_preload+0x32>
 80045f2:	e8df f001 	tbb	[pc, r1]
 80045f6:	1504      	.short	0x1504
 80045f8:	150d1508 	.word	0x150d1508
 80045fc:	11          	.byte	0x11
 80045fd:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC1PE;
 80045fe:	6983      	ldr	r3, [r0, #24]
 8004600:	f023 0308 	bic.w	r3, r3, #8
 8004604:	e002      	b.n	800460c <timer_disable_oc_preload+0x1e>
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC2PE;
 8004606:	6983      	ldr	r3, [r0, #24]
 8004608:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800460c:	6183      	str	r3, [r0, #24]
		break;
 800460e:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC3PE;
 8004610:	69c3      	ldr	r3, [r0, #28]
 8004612:	f023 0308 	bic.w	r3, r3, #8
 8004616:	e002      	b.n	800461e <timer_disable_oc_preload+0x30>
		break;
	case TIM_OC4:
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC4PE;
 8004618:	69c3      	ldr	r3, [r0, #28]
 800461a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800461e:	61c3      	str	r3, [r0, #28]
 8004620:	4770      	bx	lr
	...

08004624 <timer_set_oc_polarity_high>:
		timers 1 and 8)
*/

void timer_set_oc_polarity_high(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 8004624:	2906      	cmp	r1, #6
 8004626:	d815      	bhi.n	8004654 <timer_set_oc_polarity_high+0x30>
 8004628:	e8df f001 	tbb	[pc, r1]
 800462c:	14081404 	.word	0x14081404
 8004630:	140c      	.short	0x140c
 8004632:	10          	.byte	0x10
 8004633:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1P;
 8004634:	6a03      	ldr	r3, [r0, #32]
 8004636:	f023 0302 	bic.w	r3, r3, #2
 800463a:	e00a      	b.n	8004652 <timer_set_oc_polarity_high+0x2e>
		break;
	case TIM_OC2:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2P;
 800463c:	6a03      	ldr	r3, [r0, #32]
 800463e:	f023 0320 	bic.w	r3, r3, #32
 8004642:	e006      	b.n	8004652 <timer_set_oc_polarity_high+0x2e>
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3P;
 8004644:	6a03      	ldr	r3, [r0, #32]
 8004646:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800464a:	e002      	b.n	8004652 <timer_set_oc_polarity_high+0x2e>
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC4P;
 800464c:	6a03      	ldr	r3, [r0, #32]
 800464e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004652:	6203      	str	r3, [r0, #32]
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if ADVANCED_TIMERS
	if (!TIMER_IS_ADVANCED(timer_peripheral)) {
 8004654:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <timer_set_oc_polarity_high+0x64>)
 8004656:	4298      	cmp	r0, r3
 8004658:	d003      	beq.n	8004662 <timer_set_oc_polarity_high+0x3e>
 800465a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465e:	4298      	cmp	r0, r3
 8004660:	d111      	bne.n	8004686 <timer_set_oc_polarity_high+0x62>
	}
#else
	return;
#endif

	switch (oc_id) {
 8004662:	2903      	cmp	r1, #3
 8004664:	d007      	beq.n	8004676 <timer_set_oc_polarity_high+0x52>
 8004666:	2905      	cmp	r1, #5
 8004668:	d009      	beq.n	800467e <timer_set_oc_polarity_high+0x5a>
 800466a:	2901      	cmp	r1, #1
 800466c:	d10b      	bne.n	8004686 <timer_set_oc_polarity_high+0x62>
	case TIM_OC1N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1NP;
 800466e:	6a03      	ldr	r3, [r0, #32]
 8004670:	f023 0308 	bic.w	r3, r3, #8
 8004674:	e006      	b.n	8004684 <timer_set_oc_polarity_high+0x60>
		break;
	case TIM_OC2N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2NP;
 8004676:	6a03      	ldr	r3, [r0, #32]
 8004678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800467c:	e002      	b.n	8004684 <timer_set_oc_polarity_high+0x60>
		break;
	case TIM_OC3N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3NP;
 800467e:	6a03      	ldr	r3, [r0, #32]
 8004680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004684:	6203      	str	r3, [r0, #32]
 8004686:	4770      	bx	lr
 8004688:	40012c00 	.word	0x40012c00

0800468c <timer_set_oc_polarity_low>:
		timers 1 and 8)
*/

void timer_set_oc_polarity_low(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 800468c:	2906      	cmp	r1, #6
 800468e:	d815      	bhi.n	80046bc <timer_set_oc_polarity_low+0x30>
 8004690:	e8df f001 	tbb	[pc, r1]
 8004694:	14081404 	.word	0x14081404
 8004698:	140c      	.short	0x140c
 800469a:	10          	.byte	0x10
 800469b:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC1P;
 800469c:	6a03      	ldr	r3, [r0, #32]
 800469e:	f043 0302 	orr.w	r3, r3, #2
 80046a2:	e00a      	b.n	80046ba <timer_set_oc_polarity_low+0x2e>
		break;
	case TIM_OC2:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC2P;
 80046a4:	6a03      	ldr	r3, [r0, #32]
 80046a6:	f043 0320 	orr.w	r3, r3, #32
 80046aa:	e006      	b.n	80046ba <timer_set_oc_polarity_low+0x2e>
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC3P;
 80046ac:	6a03      	ldr	r3, [r0, #32]
 80046ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046b2:	e002      	b.n	80046ba <timer_set_oc_polarity_low+0x2e>
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC4P;
 80046b4:	6a03      	ldr	r3, [r0, #32]
 80046b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046ba:	6203      	str	r3, [r0, #32]
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if ADVANCED_TIMERS
	if (!TIMER_IS_ADVANCED(timer_peripheral)) {
 80046bc:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <timer_set_oc_polarity_low+0x64>)
 80046be:	4298      	cmp	r0, r3
 80046c0:	d003      	beq.n	80046ca <timer_set_oc_polarity_low+0x3e>
 80046c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c6:	4298      	cmp	r0, r3
 80046c8:	d111      	bne.n	80046ee <timer_set_oc_polarity_low+0x62>
	}
#else
	return;
#endif

	switch (oc_id) {
 80046ca:	2903      	cmp	r1, #3
 80046cc:	d007      	beq.n	80046de <timer_set_oc_polarity_low+0x52>
 80046ce:	2905      	cmp	r1, #5
 80046d0:	d009      	beq.n	80046e6 <timer_set_oc_polarity_low+0x5a>
 80046d2:	2901      	cmp	r1, #1
 80046d4:	d10b      	bne.n	80046ee <timer_set_oc_polarity_low+0x62>
	case TIM_OC1N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC1NP;
 80046d6:	6a03      	ldr	r3, [r0, #32]
 80046d8:	f043 0308 	orr.w	r3, r3, #8
 80046dc:	e006      	b.n	80046ec <timer_set_oc_polarity_low+0x60>
		break;
	case TIM_OC2N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC2NP;
 80046de:	6a03      	ldr	r3, [r0, #32]
 80046e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e4:	e002      	b.n	80046ec <timer_set_oc_polarity_low+0x60>
		break;
	case TIM_OC3N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC3NP;
 80046e6:	6a03      	ldr	r3, [r0, #32]
 80046e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046ec:	6203      	str	r3, [r0, #32]
 80046ee:	4770      	bx	lr
 80046f0:	40012c00 	.word	0x40012c00

080046f4 <timer_enable_oc_output>:
		timers 1 and 8)
*/

void timer_enable_oc_output(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 80046f4:	2906      	cmp	r1, #6
 80046f6:	d815      	bhi.n	8004724 <timer_enable_oc_output+0x30>
 80046f8:	e8df f001 	tbb	[pc, r1]
 80046fc:	14081404 	.word	0x14081404
 8004700:	140c      	.short	0x140c
 8004702:	10          	.byte	0x10
 8004703:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC1E;
 8004704:	6a03      	ldr	r3, [r0, #32]
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	e00a      	b.n	8004722 <timer_enable_oc_output+0x2e>
		break;
	case TIM_OC2:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC2E;
 800470c:	6a03      	ldr	r3, [r0, #32]
 800470e:	f043 0310 	orr.w	r3, r3, #16
 8004712:	e006      	b.n	8004722 <timer_enable_oc_output+0x2e>
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC3E;
 8004714:	6a03      	ldr	r3, [r0, #32]
 8004716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471a:	e002      	b.n	8004722 <timer_enable_oc_output+0x2e>
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC4E;
 800471c:	6a03      	ldr	r3, [r0, #32]
 800471e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004722:	6203      	str	r3, [r0, #32]
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if ADVANCED_TIMERS
	if (!TIMER_IS_ADVANCED(timer_peripheral)) {
 8004724:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <timer_enable_oc_output+0x64>)
 8004726:	4298      	cmp	r0, r3
 8004728:	d003      	beq.n	8004732 <timer_enable_oc_output+0x3e>
 800472a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472e:	4298      	cmp	r0, r3
 8004730:	d111      	bne.n	8004756 <timer_enable_oc_output+0x62>
	}
#else
	return;
#endif

	switch (oc_id) {
 8004732:	2903      	cmp	r1, #3
 8004734:	d007      	beq.n	8004746 <timer_enable_oc_output+0x52>
 8004736:	2905      	cmp	r1, #5
 8004738:	d009      	beq.n	800474e <timer_enable_oc_output+0x5a>
 800473a:	2901      	cmp	r1, #1
 800473c:	d10b      	bne.n	8004756 <timer_enable_oc_output+0x62>
	case TIM_OC1N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC1NE;
 800473e:	6a03      	ldr	r3, [r0, #32]
 8004740:	f043 0304 	orr.w	r3, r3, #4
 8004744:	e006      	b.n	8004754 <timer_enable_oc_output+0x60>
		break;
	case TIM_OC2N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC2NE;
 8004746:	6a03      	ldr	r3, [r0, #32]
 8004748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474c:	e002      	b.n	8004754 <timer_enable_oc_output+0x60>
		break;
	case TIM_OC3N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC3NE;
 800474e:	6a03      	ldr	r3, [r0, #32]
 8004750:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004754:	6203      	str	r3, [r0, #32]
 8004756:	4770      	bx	lr
 8004758:	40012c00 	.word	0x40012c00

0800475c <timer_disable_oc_output>:
		timers 1 and 8)
*/

void timer_disable_oc_output(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 800475c:	2906      	cmp	r1, #6
 800475e:	d815      	bhi.n	800478c <timer_disable_oc_output+0x30>
 8004760:	e8df f001 	tbb	[pc, r1]
 8004764:	14081404 	.word	0x14081404
 8004768:	140c      	.short	0x140c
 800476a:	10          	.byte	0x10
 800476b:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1E;
 800476c:	6a03      	ldr	r3, [r0, #32]
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	e00a      	b.n	800478a <timer_disable_oc_output+0x2e>
		break;
	case TIM_OC2:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2E;
 8004774:	6a03      	ldr	r3, [r0, #32]
 8004776:	f023 0310 	bic.w	r3, r3, #16
 800477a:	e006      	b.n	800478a <timer_disable_oc_output+0x2e>
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3E;
 800477c:	6a03      	ldr	r3, [r0, #32]
 800477e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004782:	e002      	b.n	800478a <timer_disable_oc_output+0x2e>
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC4E;
 8004784:	6a03      	ldr	r3, [r0, #32]
 8004786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800478a:	6203      	str	r3, [r0, #32]
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if ADVANCED_TIMERS
	if (!TIMER_IS_ADVANCED(timer_peripheral)) {
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <timer_disable_oc_output+0x64>)
 800478e:	4298      	cmp	r0, r3
 8004790:	d003      	beq.n	800479a <timer_disable_oc_output+0x3e>
 8004792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004796:	4298      	cmp	r0, r3
 8004798:	d111      	bne.n	80047be <timer_disable_oc_output+0x62>
	}
#else
	return;
#endif

	switch (oc_id) {
 800479a:	2903      	cmp	r1, #3
 800479c:	d007      	beq.n	80047ae <timer_disable_oc_output+0x52>
 800479e:	2905      	cmp	r1, #5
 80047a0:	d009      	beq.n	80047b6 <timer_disable_oc_output+0x5a>
 80047a2:	2901      	cmp	r1, #1
 80047a4:	d10b      	bne.n	80047be <timer_disable_oc_output+0x62>
	case TIM_OC1N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1NE;
 80047a6:	6a03      	ldr	r3, [r0, #32]
 80047a8:	f023 0304 	bic.w	r3, r3, #4
 80047ac:	e006      	b.n	80047bc <timer_disable_oc_output+0x60>
		break;
	case TIM_OC2N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2NE;
 80047ae:	6a03      	ldr	r3, [r0, #32]
 80047b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b4:	e002      	b.n	80047bc <timer_disable_oc_output+0x60>
		break;
	case TIM_OC3N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3NE;
 80047b6:	6a03      	ldr	r3, [r0, #32]
 80047b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047bc:	6203      	str	r3, [r0, #32]
 80047be:	4770      	bx	lr
 80047c0:	40012c00 	.word	0x40012c00

080047c4 <timer_set_oc_idle_state_set>:
void timer_set_oc_idle_state_set(uint32_t timer_peripheral,
				 enum tim_oc_id oc_id)
{
#if ADVANCED_TIMERS
	/* Acting for TIM1 and TIM8 only. */
	if (!TIMER_IS_ADVANCED(timer_peripheral)) {
 80047c4:	4b15      	ldr	r3, [pc, #84]	; (800481c <timer_set_oc_idle_state_set+0x58>)
 80047c6:	4298      	cmp	r0, r3
 80047c8:	d003      	beq.n	80047d2 <timer_set_oc_idle_state_set+0xe>
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	4298      	cmp	r0, r3
 80047d0:	d123      	bne.n	800481a <timer_set_oc_idle_state_set+0x56>
		return;
	}

	switch (oc_id) {
 80047d2:	2906      	cmp	r1, #6
 80047d4:	d821      	bhi.n	800481a <timer_set_oc_idle_state_set+0x56>
 80047d6:	e8df f001 	tbb	[pc, r1]
 80047da:	0804      	.short	0x0804
 80047dc:	1814100c 	.word	0x1814100c
 80047e0:	1c          	.byte	0x1c
 80047e1:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CR2(timer_peripheral) |= TIM_CR2_OIS1;
 80047e2:	6843      	ldr	r3, [r0, #4]
 80047e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e8:	e016      	b.n	8004818 <timer_set_oc_idle_state_set+0x54>
		break;
	case TIM_OC1N:
		TIM_CR2(timer_peripheral) |= TIM_CR2_OIS1N;
 80047ea:	6843      	ldr	r3, [r0, #4]
 80047ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047f0:	e012      	b.n	8004818 <timer_set_oc_idle_state_set+0x54>
		break;
	case TIM_OC2:
		TIM_CR2(timer_peripheral) |= TIM_CR2_OIS2;
 80047f2:	6843      	ldr	r3, [r0, #4]
 80047f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047f8:	e00e      	b.n	8004818 <timer_set_oc_idle_state_set+0x54>
		break;
	case TIM_OC2N:
		TIM_CR2(timer_peripheral) |= TIM_CR2_OIS2N;
 80047fa:	6843      	ldr	r3, [r0, #4]
 80047fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004800:	e00a      	b.n	8004818 <timer_set_oc_idle_state_set+0x54>
		break;
	case TIM_OC3:
		TIM_CR2(timer_peripheral) |= TIM_CR2_OIS3;
 8004802:	6843      	ldr	r3, [r0, #4]
 8004804:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004808:	e006      	b.n	8004818 <timer_set_oc_idle_state_set+0x54>
		break;
	case TIM_OC3N:
		TIM_CR2(timer_peripheral) |= TIM_CR2_OIS3N;
 800480a:	6843      	ldr	r3, [r0, #4]
 800480c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004810:	e002      	b.n	8004818 <timer_set_oc_idle_state_set+0x54>
		break;
	case TIM_OC4:
		TIM_CR2(timer_peripheral) |= TIM_CR2_OIS4;
 8004812:	6843      	ldr	r3, [r0, #4]
 8004814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004818:	6043      	str	r3, [r0, #4]
 800481a:	4770      	bx	lr
 800481c:	40012c00 	.word	0x40012c00

08004820 <timer_set_oc_idle_state_unset>:
void timer_set_oc_idle_state_unset(uint32_t timer_peripheral,
				   enum tim_oc_id oc_id)
{
#if ADVANCED_TIMERS
	/* Acting for TIM1 and TIM8 only. */
	if (!TIMER_IS_ADVANCED(timer_peripheral)) {
 8004820:	4b15      	ldr	r3, [pc, #84]	; (8004878 <timer_set_oc_idle_state_unset+0x58>)
 8004822:	4298      	cmp	r0, r3
 8004824:	d003      	beq.n	800482e <timer_set_oc_idle_state_unset+0xe>
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	4298      	cmp	r0, r3
 800482c:	d123      	bne.n	8004876 <timer_set_oc_idle_state_unset+0x56>
		return;
	}

	switch (oc_id) {
 800482e:	2906      	cmp	r1, #6
 8004830:	d821      	bhi.n	8004876 <timer_set_oc_idle_state_unset+0x56>
 8004832:	e8df f001 	tbb	[pc, r1]
 8004836:	0804      	.short	0x0804
 8004838:	1814100c 	.word	0x1814100c
 800483c:	1c          	.byte	0x1c
 800483d:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS1;
 800483e:	6843      	ldr	r3, [r0, #4]
 8004840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004844:	e016      	b.n	8004874 <timer_set_oc_idle_state_unset+0x54>
		break;
	case TIM_OC1N:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS1N;
 8004846:	6843      	ldr	r3, [r0, #4]
 8004848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800484c:	e012      	b.n	8004874 <timer_set_oc_idle_state_unset+0x54>
		break;
	case TIM_OC2:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS2;
 800484e:	6843      	ldr	r3, [r0, #4]
 8004850:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004854:	e00e      	b.n	8004874 <timer_set_oc_idle_state_unset+0x54>
		break;
	case TIM_OC2N:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS2N;
 8004856:	6843      	ldr	r3, [r0, #4]
 8004858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800485c:	e00a      	b.n	8004874 <timer_set_oc_idle_state_unset+0x54>
		break;
	case TIM_OC3:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS3;
 800485e:	6843      	ldr	r3, [r0, #4]
 8004860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004864:	e006      	b.n	8004874 <timer_set_oc_idle_state_unset+0x54>
		break;
	case TIM_OC3N:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS3N;
 8004866:	6843      	ldr	r3, [r0, #4]
 8004868:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800486c:	e002      	b.n	8004874 <timer_set_oc_idle_state_unset+0x54>
		break;
	case TIM_OC4:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS4;
 800486e:	6843      	ldr	r3, [r0, #4]
 8004870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004874:	6043      	str	r3, [r0, #4]
 8004876:	4770      	bx	lr
 8004878:	40012c00 	.word	0x40012c00

0800487c <timer_set_oc_value>:
*/

void timer_set_oc_value(uint32_t timer_peripheral, enum tim_oc_id oc_id,
			uint32_t value)
{
	switch (oc_id) {
 800487c:	2906      	cmp	r1, #6
 800487e:	d80c      	bhi.n	800489a <timer_set_oc_value+0x1e>
 8004880:	e8df f001 	tbb	[pc, r1]
 8004884:	0b060b04 	.word	0x0b060b04
 8004888:	0b08      	.short	0x0b08
 800488a:	0a          	.byte	0x0a
 800488b:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCR1(timer_peripheral) = value;
 800488c:	6342      	str	r2, [r0, #52]	; 0x34
		break;
 800488e:	4770      	bx	lr
	case TIM_OC2:
		TIM_CCR2(timer_peripheral) = value;
 8004890:	6382      	str	r2, [r0, #56]	; 0x38
		break;
 8004892:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCR3(timer_peripheral) = value;
 8004894:	63c2      	str	r2, [r0, #60]	; 0x3c
		break;
 8004896:	4770      	bx	lr
	case TIM_OC4:
		TIM_CCR4(timer_peripheral) = value;
 8004898:	6402      	str	r2, [r0, #64]	; 0x40
 800489a:	4770      	bx	lr

0800489c <timer_enable_break_main_output>:
*/

void timer_enable_break_main_output(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <timer_enable_break_main_output+0x18>)
 800489e:	4298      	cmp	r0, r3
 80048a0:	d003      	beq.n	80048aa <timer_enable_break_main_output+0xe>
 80048a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a6:	4298      	cmp	r0, r3
 80048a8:	d103      	bne.n	80048b2 <timer_enable_break_main_output+0x16>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_MOE;
 80048aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b0:	6443      	str	r3, [r0, #68]	; 0x44
 80048b2:	4770      	bx	lr
 80048b4:	40012c00 	.word	0x40012c00

080048b8 <timer_disable_break_main_output>:
*/

void timer_disable_break_main_output(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <timer_disable_break_main_output+0x18>)
 80048ba:	4298      	cmp	r0, r3
 80048bc:	d003      	beq.n	80048c6 <timer_disable_break_main_output+0xe>
 80048be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c2:	4298      	cmp	r0, r3
 80048c4:	d103      	bne.n	80048ce <timer_disable_break_main_output+0x16>
		TIM_BDTR(timer_peripheral) &= ~TIM_BDTR_MOE;
 80048c6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048cc:	6443      	str	r3, [r0, #68]	; 0x44
 80048ce:	4770      	bx	lr
 80048d0:	40012c00 	.word	0x40012c00

080048d4 <timer_enable_break_automatic_output>:
*/

void timer_enable_break_automatic_output(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <timer_enable_break_automatic_output+0x18>)
 80048d6:	4298      	cmp	r0, r3
 80048d8:	d003      	beq.n	80048e2 <timer_enable_break_automatic_output+0xe>
 80048da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048de:	4298      	cmp	r0, r3
 80048e0:	d103      	bne.n	80048ea <timer_enable_break_automatic_output+0x16>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_AOE;
 80048e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048e8:	6443      	str	r3, [r0, #68]	; 0x44
 80048ea:	4770      	bx	lr
 80048ec:	40012c00 	.word	0x40012c00

080048f0 <timer_disable_break_automatic_output>:
*/

void timer_disable_break_automatic_output(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <timer_disable_break_automatic_output+0x18>)
 80048f2:	4298      	cmp	r0, r3
 80048f4:	d003      	beq.n	80048fe <timer_disable_break_automatic_output+0xe>
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	4298      	cmp	r0, r3
 80048fc:	d103      	bne.n	8004906 <timer_disable_break_automatic_output+0x16>
		TIM_BDTR(timer_peripheral) &= ~TIM_BDTR_AOE;
 80048fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004904:	6443      	str	r3, [r0, #68]	; 0x44
 8004906:	4770      	bx	lr
 8004908:	40012c00 	.word	0x40012c00

0800490c <timer_set_break_polarity_high>:
*/

void timer_set_break_polarity_high(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <timer_set_break_polarity_high+0x18>)
 800490e:	4298      	cmp	r0, r3
 8004910:	d003      	beq.n	800491a <timer_set_break_polarity_high+0xe>
 8004912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004916:	4298      	cmp	r0, r3
 8004918:	d103      	bne.n	8004922 <timer_set_break_polarity_high+0x16>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_BKP;
 800491a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800491c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004920:	6443      	str	r3, [r0, #68]	; 0x44
 8004922:	4770      	bx	lr
 8004924:	40012c00 	.word	0x40012c00

08004928 <timer_set_break_polarity_low>:
*/

void timer_set_break_polarity_low(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <timer_set_break_polarity_low+0x18>)
 800492a:	4298      	cmp	r0, r3
 800492c:	d003      	beq.n	8004936 <timer_set_break_polarity_low+0xe>
 800492e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004932:	4298      	cmp	r0, r3
 8004934:	d103      	bne.n	800493e <timer_set_break_polarity_low+0x16>
		TIM_BDTR(timer_peripheral) &= ~TIM_BDTR_BKP;
 8004936:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004938:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800493c:	6443      	str	r3, [r0, #68]	; 0x44
 800493e:	4770      	bx	lr
 8004940:	40012c00 	.word	0x40012c00

08004944 <timer_enable_break>:
*/

void timer_enable_break(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <timer_enable_break+0x18>)
 8004946:	4298      	cmp	r0, r3
 8004948:	d003      	beq.n	8004952 <timer_enable_break+0xe>
 800494a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494e:	4298      	cmp	r0, r3
 8004950:	d103      	bne.n	800495a <timer_enable_break+0x16>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_BKE;
 8004952:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004954:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004958:	6443      	str	r3, [r0, #68]	; 0x44
 800495a:	4770      	bx	lr
 800495c:	40012c00 	.word	0x40012c00

08004960 <timer_disable_break>:
*/

void timer_disable_break(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <timer_disable_break+0x18>)
 8004962:	4298      	cmp	r0, r3
 8004964:	d003      	beq.n	800496e <timer_disable_break+0xe>
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	4298      	cmp	r0, r3
 800496c:	d103      	bne.n	8004976 <timer_disable_break+0x16>
		TIM_BDTR(timer_peripheral) &= ~TIM_BDTR_BKE;
 800496e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004970:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004974:	6443      	str	r3, [r0, #68]	; 0x44
 8004976:	4770      	bx	lr
 8004978:	40012c00 	.word	0x40012c00

0800497c <timer_set_enabled_off_state_in_run_mode>:
*/

void timer_set_enabled_off_state_in_run_mode(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <timer_set_enabled_off_state_in_run_mode+0x18>)
 800497e:	4298      	cmp	r0, r3
 8004980:	d003      	beq.n	800498a <timer_set_enabled_off_state_in_run_mode+0xe>
 8004982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004986:	4298      	cmp	r0, r3
 8004988:	d103      	bne.n	8004992 <timer_set_enabled_off_state_in_run_mode+0x16>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_OSSR;
 800498a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800498c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004990:	6443      	str	r3, [r0, #68]	; 0x44
 8004992:	4770      	bx	lr
 8004994:	40012c00 	.word	0x40012c00

08004998 <timer_set_disabled_off_state_in_run_mode>:
*/

void timer_set_disabled_off_state_in_run_mode(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <timer_set_disabled_off_state_in_run_mode+0x18>)
 800499a:	4298      	cmp	r0, r3
 800499c:	d003      	beq.n	80049a6 <timer_set_disabled_off_state_in_run_mode+0xe>
 800499e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a2:	4298      	cmp	r0, r3
 80049a4:	d103      	bne.n	80049ae <timer_set_disabled_off_state_in_run_mode+0x16>
		TIM_BDTR(timer_peripheral) &= ~TIM_BDTR_OSSR;
 80049a6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80049a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ac:	6443      	str	r3, [r0, #68]	; 0x44
 80049ae:	4770      	bx	lr
 80049b0:	40012c00 	.word	0x40012c00

080049b4 <timer_set_enabled_off_state_in_idle_mode>:
*/

void timer_set_enabled_off_state_in_idle_mode(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <timer_set_enabled_off_state_in_idle_mode+0x18>)
 80049b6:	4298      	cmp	r0, r3
 80049b8:	d003      	beq.n	80049c2 <timer_set_enabled_off_state_in_idle_mode+0xe>
 80049ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049be:	4298      	cmp	r0, r3
 80049c0:	d103      	bne.n	80049ca <timer_set_enabled_off_state_in_idle_mode+0x16>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_OSSI;
 80049c2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80049c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049c8:	6443      	str	r3, [r0, #68]	; 0x44
 80049ca:	4770      	bx	lr
 80049cc:	40012c00 	.word	0x40012c00

080049d0 <timer_set_disabled_off_state_in_idle_mode>:
*/

void timer_set_disabled_off_state_in_idle_mode(uint32_t timer_peripheral)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <timer_set_disabled_off_state_in_idle_mode+0x18>)
 80049d2:	4298      	cmp	r0, r3
 80049d4:	d003      	beq.n	80049de <timer_set_disabled_off_state_in_idle_mode+0xe>
 80049d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049da:	4298      	cmp	r0, r3
 80049dc:	d103      	bne.n	80049e6 <timer_set_disabled_off_state_in_idle_mode+0x16>
		TIM_BDTR(timer_peripheral) &= ~TIM_BDTR_OSSI;
 80049de:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80049e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049e4:	6443      	str	r3, [r0, #68]	; 0x44
 80049e6:	4770      	bx	lr
 80049e8:	40012c00 	.word	0x40012c00

080049ec <timer_set_break_lock>:
*/

void timer_set_break_lock(uint32_t timer_peripheral, uint32_t lock)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <timer_set_break_lock+0x18>)
 80049ee:	4298      	cmp	r0, r3
 80049f0:	d003      	beq.n	80049fa <timer_set_break_lock+0xe>
 80049f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f6:	4298      	cmp	r0, r3
 80049f8:	d102      	bne.n	8004a00 <timer_set_break_lock+0x14>
		TIM_BDTR(timer_peripheral) |= lock;
 80049fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80049fc:	4319      	orrs	r1, r3
 80049fe:	6441      	str	r1, [r0, #68]	; 0x44
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40012c00 	.word	0x40012c00

08004a08 <timer_set_deadtime>:
*/

void timer_set_deadtime(uint32_t timer_peripheral, uint32_t deadtime)
{
#if ADVANCED_TIMERS
	if (TIMER_IS_ADVANCED(timer_peripheral)) {
 8004a08:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <timer_set_deadtime+0x18>)
 8004a0a:	4298      	cmp	r0, r3
 8004a0c:	d003      	beq.n	8004a16 <timer_set_deadtime+0xe>
 8004a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a12:	4298      	cmp	r0, r3
 8004a14:	d102      	bne.n	8004a1c <timer_set_deadtime+0x14>
		TIM_BDTR(timer_peripheral) |= deadtime;
 8004a16:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004a18:	4319      	orrs	r1, r3
 8004a1a:	6441      	str	r1, [r0, #68]	; 0x44
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40012c00 	.word	0x40012c00

08004a24 <timer_generate_event>:
@param[in] event Unsigned int32. Event specification @ref tim_event_gen
*/

void timer_generate_event(uint32_t timer_peripheral, uint32_t event)
{
	TIM_EGR(timer_peripheral) |= event;
 8004a24:	6943      	ldr	r3, [r0, #20]
 8004a26:	4319      	orrs	r1, r3
 8004a28:	6141      	str	r1, [r0, #20]
 8004a2a:	4770      	bx	lr

08004a2c <timer_get_counter>:
@returns Unsigned int32. Counter value.
*/

uint32_t timer_get_counter(uint32_t timer_peripheral)
{
	return TIM_CNT(timer_peripheral);
 8004a2c:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8004a2e:	4770      	bx	lr

08004a30 <timer_set_counter>:
@param[in] count Unsigned int32. Counter value.
*/

void timer_set_counter(uint32_t timer_peripheral, uint32_t count)
{
	TIM_CNT(timer_peripheral) = count;
 8004a30:	6241      	str	r1, [r0, #36]	; 0x24
 8004a32:	4770      	bx	lr

08004a34 <timer_ic_set_filter>:
*/

void timer_ic_set_filter(uint32_t timer_peripheral, enum tim_ic_id ic,
			 enum tim_ic_filter flt)
{
	switch (ic) {
 8004a34:	2903      	cmp	r1, #3
 8004a36:	d824      	bhi.n	8004a82 <timer_ic_set_filter+0x4e>
 8004a38:	e8df f001 	tbb	[pc, r1]
 8004a3c:	1b130a02 	.word	0x1b130a02
	case TIM_IC1:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_IC1F_MASK;
 8004a40:	6983      	ldr	r3, [r0, #24]
 8004a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a46:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= flt << 4;
 8004a48:	6983      	ldr	r3, [r0, #24]
 8004a4a:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 8004a4e:	e006      	b.n	8004a5e <timer_ic_set_filter+0x2a>
		break;
	case TIM_IC2:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_IC2F_MASK;
 8004a50:	6983      	ldr	r3, [r0, #24]
 8004a52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a56:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= flt << 12;
 8004a58:	6983      	ldr	r3, [r0, #24]
 8004a5a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8004a5e:	6182      	str	r2, [r0, #24]
		break;
 8004a60:	4770      	bx	lr
	case TIM_IC3:
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_IC3F_MASK;
 8004a62:	69c3      	ldr	r3, [r0, #28]
 8004a64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a68:	61c3      	str	r3, [r0, #28]
		TIM_CCMR2(timer_peripheral) |= flt << 4;
 8004a6a:	69c3      	ldr	r3, [r0, #28]
 8004a6c:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 8004a70:	e006      	b.n	8004a80 <timer_ic_set_filter+0x4c>
		break;
	case TIM_IC4:
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_IC4F_MASK;
 8004a72:	69c3      	ldr	r3, [r0, #28]
 8004a74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a78:	61c3      	str	r3, [r0, #28]
		TIM_CCMR2(timer_peripheral) |= flt << 12;
 8004a7a:	69c3      	ldr	r3, [r0, #28]
 8004a7c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8004a80:	61c2      	str	r2, [r0, #28]
 8004a82:	4770      	bx	lr

08004a84 <timer_ic_set_prescaler>:
*/

void timer_ic_set_prescaler(uint32_t timer_peripheral, enum tim_ic_id ic,
			    enum tim_ic_psc psc)
{
	switch (ic) {
 8004a84:	2903      	cmp	r1, #3
 8004a86:	d824      	bhi.n	8004ad2 <timer_ic_set_prescaler+0x4e>
 8004a88:	e8df f001 	tbb	[pc, r1]
 8004a8c:	1b130a02 	.word	0x1b130a02
	case TIM_IC1:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_IC1PSC_MASK;
 8004a90:	6983      	ldr	r3, [r0, #24]
 8004a92:	f023 030c 	bic.w	r3, r3, #12
 8004a96:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= psc << 2;
 8004a98:	6983      	ldr	r3, [r0, #24]
 8004a9a:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
 8004a9e:	e006      	b.n	8004aae <timer_ic_set_prescaler+0x2a>
		break;
	case TIM_IC2:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_IC2PSC_MASK;
 8004aa0:	6983      	ldr	r3, [r0, #24]
 8004aa2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004aa6:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= psc << 10;
 8004aa8:	6983      	ldr	r3, [r0, #24]
 8004aaa:	ea43 2282 	orr.w	r2, r3, r2, lsl #10
 8004aae:	6182      	str	r2, [r0, #24]
		break;
 8004ab0:	4770      	bx	lr
	case TIM_IC3:
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_IC3PSC_MASK;
 8004ab2:	69c3      	ldr	r3, [r0, #28]
 8004ab4:	f023 030c 	bic.w	r3, r3, #12
 8004ab8:	61c3      	str	r3, [r0, #28]
		TIM_CCMR2(timer_peripheral) |= psc << 2;
 8004aba:	69c3      	ldr	r3, [r0, #28]
 8004abc:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
 8004ac0:	e006      	b.n	8004ad0 <timer_ic_set_prescaler+0x4c>
		break;
	case TIM_IC4:
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_IC4PSC_MASK;
 8004ac2:	69c3      	ldr	r3, [r0, #28]
 8004ac4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ac8:	61c3      	str	r3, [r0, #28]
		TIM_CCMR2(timer_peripheral) |= psc << 10;
 8004aca:	69c3      	ldr	r3, [r0, #28]
 8004acc:	ea43 2282 	orr.w	r2, r3, r2, lsl #10
 8004ad0:	61c2      	str	r2, [r0, #28]
 8004ad2:	4770      	bx	lr

08004ad4 <timer_ic_set_input>:
void timer_ic_set_input(uint32_t timer_peripheral, enum tim_ic_id ic,
			enum tim_ic_input in)
{
	in &= 3;

	if (((ic == TIM_IC2) || (ic == TIM_IC4)) &&
 8004ad4:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8004ad8:	2b01      	cmp	r3, #1
*/

void timer_ic_set_input(uint32_t timer_peripheral, enum tim_ic_id ic,
			enum tim_ic_input in)
{
	in &= 3;
 8004ada:	f002 0203 	and.w	r2, r2, #3

	if (((ic == TIM_IC2) || (ic == TIM_IC4)) &&
 8004ade:	d105      	bne.n	8004aec <timer_ic_set_input+0x18>
	    ((in == TIM_IC_IN_TI1) || (in == TIM_IC_IN_TI2))) {
 8004ae0:	1e53      	subs	r3, r2, #1
void timer_ic_set_input(uint32_t timer_peripheral, enum tim_ic_id ic,
			enum tim_ic_input in)
{
	in &= 3;

	if (((ic == TIM_IC2) || (ic == TIM_IC4)) &&
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
	    ((in == TIM_IC_IN_TI1) || (in == TIM_IC_IN_TI2))) {
		/* Input select bits are flipped for these combinations */
		in ^= 3;
 8004ae6:	bf98      	it	ls
 8004ae8:	f082 0203 	eorls.w	r2, r2, #3
	}

	switch (ic) {
 8004aec:	2903      	cmp	r1, #3
 8004aee:	d822      	bhi.n	8004b36 <timer_ic_set_input+0x62>
 8004af0:	e8df f001 	tbb	[pc, r1]
 8004af4:	19120902 	.word	0x19120902
	case TIM_IC1:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_CC1S_MASK;
 8004af8:	6983      	ldr	r3, [r0, #24]
 8004afa:	f023 0303 	bic.w	r3, r3, #3
 8004afe:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= in;
 8004b00:	6983      	ldr	r3, [r0, #24]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	e006      	b.n	8004b14 <timer_ic_set_input+0x40>
		break;
	case TIM_IC2:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_CC2S_MASK;
 8004b06:	6983      	ldr	r3, [r0, #24]
 8004b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0c:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= in << 8;
 8004b0e:	6983      	ldr	r3, [r0, #24]
 8004b10:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8004b14:	6182      	str	r2, [r0, #24]
		break;
 8004b16:	4770      	bx	lr
	case TIM_IC3:
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_CC3S_MASK;
 8004b18:	69c3      	ldr	r3, [r0, #28]
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
 8004b1e:	61c3      	str	r3, [r0, #28]
		TIM_CCMR2(timer_peripheral) |= in;
 8004b20:	69c3      	ldr	r3, [r0, #28]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	e006      	b.n	8004b34 <timer_ic_set_input+0x60>
		break;
	case TIM_IC4:
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_CC4S_MASK;
 8004b26:	69c3      	ldr	r3, [r0, #28]
 8004b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2c:	61c3      	str	r3, [r0, #28]
		TIM_CCMR2(timer_peripheral) |= in << 8;
 8004b2e:	69c3      	ldr	r3, [r0, #28]
 8004b30:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8004b34:	61c2      	str	r2, [r0, #28]
 8004b36:	4770      	bx	lr

08004b38 <timer_ic_enable>:
@param[in] ic ::tim_ic_id. Input Capture channel designator.
*/

void timer_ic_enable(uint32_t timer_peripheral, enum tim_ic_id ic)
{
	TIM_CCER(timer_peripheral) |= (0x1 << (ic * 4));
 8004b38:	0089      	lsls	r1, r1, #2
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	fa02 f101 	lsl.w	r1, r2, r1
 8004b40:	6a03      	ldr	r3, [r0, #32]
 8004b42:	430b      	orrs	r3, r1
 8004b44:	6203      	str	r3, [r0, #32]
 8004b46:	4770      	bx	lr

08004b48 <timer_ic_disable>:
@param[in] ic ::tim_ic_id. Input Capture channel designator.
*/

void timer_ic_disable(uint32_t timer_peripheral, enum tim_ic_id ic)
{
	TIM_CCER(timer_peripheral) &= ~(0x1 << (ic * 4));
 8004b48:	0089      	lsls	r1, r1, #2
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	fa02 f101 	lsl.w	r1, r2, r1
 8004b50:	6a03      	ldr	r3, [r0, #32]
 8004b52:	ea23 0301 	bic.w	r3, r3, r1
 8004b56:	6203      	str	r3, [r0, #32]
 8004b58:	4770      	bx	lr

08004b5a <timer_slave_set_filter>:
@param[in] flt ::tim_ic_filter. Input Capture Filter identifier.
*/

void timer_slave_set_filter(uint32_t timer_peripheral, enum tim_ic_filter flt)
{
	TIM_SMCR(timer_peripheral) &= ~TIM_SMCR_ETF_MASK;
 8004b5a:	6883      	ldr	r3, [r0, #8]
 8004b5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b60:	6083      	str	r3, [r0, #8]
	TIM_SMCR(timer_peripheral) |= flt << 8;
 8004b62:	6883      	ldr	r3, [r0, #8]
 8004b64:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004b68:	6081      	str	r1, [r0, #8]
 8004b6a:	4770      	bx	lr

08004b6c <timer_slave_set_prescaler>:
@param[in] psc ::tim_ic_psc. Input Capture sample clock prescaler.
*/

void timer_slave_set_prescaler(uint32_t timer_peripheral, enum tim_ic_psc psc)
{
	TIM_SMCR(timer_peripheral) &= ~TIM_SMCR_ETPS_MASK;
 8004b6c:	6883      	ldr	r3, [r0, #8]
 8004b6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b72:	6083      	str	r3, [r0, #8]
	TIM_SMCR(timer_peripheral) |= psc << 12;
 8004b74:	6883      	ldr	r3, [r0, #8]
 8004b76:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8004b7a:	6081      	str	r1, [r0, #8]
 8004b7c:	4770      	bx	lr

08004b7e <timer_slave_set_polarity>:
*/

void timer_slave_set_polarity(uint32_t timer_peripheral, enum tim_et_pol pol)
{
	if (pol) {
		TIM_SMCR(timer_peripheral) |= TIM_SMCR_ETP;
 8004b7e:	6883      	ldr	r3, [r0, #8]
@param[in] pol ::tim_et_pol. Slave External Trigger polarity.
*/

void timer_slave_set_polarity(uint32_t timer_peripheral, enum tim_et_pol pol)
{
	if (pol) {
 8004b80:	b111      	cbz	r1, 8004b88 <timer_slave_set_polarity+0xa>
		TIM_SMCR(timer_peripheral) |= TIM_SMCR_ETP;
 8004b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b86:	e001      	b.n	8004b8c <timer_slave_set_polarity+0xe>
	} else {
		TIM_SMCR(timer_peripheral) &= ~TIM_SMCR_ETP;
 8004b88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b8c:	6083      	str	r3, [r0, #8]
 8004b8e:	4770      	bx	lr

08004b90 <timer_slave_set_mode>:
@param[in] mode Unsigned int8. Slave mode @ref tim_sms
*/

void timer_slave_set_mode(uint32_t timer_peripheral, uint8_t mode)
{
	TIM_SMCR(timer_peripheral) &= ~TIM_SMCR_SMS_MASK;
 8004b90:	6883      	ldr	r3, [r0, #8]
 8004b92:	f023 0307 	bic.w	r3, r3, #7
 8004b96:	6083      	str	r3, [r0, #8]
	TIM_SMCR(timer_peripheral) |= mode;
 8004b98:	6883      	ldr	r3, [r0, #8]
 8004b9a:	4319      	orrs	r1, r3
 8004b9c:	6081      	str	r1, [r0, #8]
 8004b9e:	4770      	bx	lr

08004ba0 <timer_slave_set_trigger>:
@param[in] trigger Unsigned int8. Slave trigger source @ref tim_ts
*/

void timer_slave_set_trigger(uint32_t timer_peripheral, uint8_t trigger)
{
	TIM_SMCR(timer_peripheral) &= ~TIM_SMCR_TS_MASK;
 8004ba0:	6883      	ldr	r3, [r0, #8]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	6083      	str	r3, [r0, #8]
	TIM_SMCR(timer_peripheral) |= trigger;
 8004ba8:	6883      	ldr	r3, [r0, #8]
 8004baa:	4319      	orrs	r1, r3
 8004bac:	6081      	str	r1, [r0, #8]
 8004bae:	4770      	bx	lr

08004bb0 <rcc_peripheral_enable_clock>:
 * @li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
 */

void rcc_peripheral_enable_clock(volatile uint32_t *reg, uint32_t en)
{
	*reg |= en;
 8004bb0:	6803      	ldr	r3, [r0, #0]
 8004bb2:	4319      	orrs	r1, r3
 8004bb4:	6001      	str	r1, [r0, #0]
 8004bb6:	4770      	bx	lr

08004bb8 <rcc_peripheral_disable_clock>:
 * @li If register is RCC_APB1ENR, from @ref rcc_apb1enr_en
 * @li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
 */
void rcc_peripheral_disable_clock(volatile uint32_t *reg, uint32_t en)
{
	*reg &= ~en;
 8004bb8:	6803      	ldr	r3, [r0, #0]
 8004bba:	ea23 0101 	bic.w	r1, r3, r1
 8004bbe:	6001      	str	r1, [r0, #0]
 8004bc0:	4770      	bx	lr

08004bc2 <rcc_peripheral_reset>:
 * @li If register is RCC_APB1RSTR, from @ref rcc_apb1rstr_rst
 * @li If register is RCC_APB2RSTR, from @ref rcc_apb2rstr_rst
 */
void rcc_peripheral_reset(volatile uint32_t *reg, uint32_t reset)
{
	*reg |= reset;
 8004bc2:	6803      	ldr	r3, [r0, #0]
 8004bc4:	4319      	orrs	r1, r3
 8004bc6:	6001      	str	r1, [r0, #0]
 8004bc8:	4770      	bx	lr

08004bca <rcc_peripheral_clear_reset>:
 * @li If register is RCC_APB1RSTR, from @ref rcc_apb1rstr_rst
 * @li If register is RCC_APB2RSTR, from @ref rcc_apb2rstr_rst
 */
void rcc_peripheral_clear_reset(volatile uint32_t *reg, uint32_t clear_reset)
{
	*reg &= ~clear_reset;
 8004bca:	6803      	ldr	r3, [r0, #0]
 8004bcc:	ea23 0101 	bic.w	r1, r3, r1
 8004bd0:	6001      	str	r1, [r0, #0]
 8004bd2:	4770      	bx	lr

08004bd4 <rcc_periph_clock_enable>:
 * For available constants, see #periph_t (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8004bd4:	0943      	lsrs	r3, r0, #5
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	f000 001f 	and.w	r0, r0, #31
 8004bdc:	fa01 f000 	lsl.w	r0, r1, r0
 8004be0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004be4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4310      	orrs	r0, r2
 8004bec:	6018      	str	r0, [r3, #0]
 8004bee:	4770      	bx	lr

08004bf0 <rcc_periph_clock_disable>:
 * For available constants, see #periph_t (RCC_UART1 for example)
 */

void rcc_periph_clock_disable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) &= ~_RCC_BIT(clken);
 8004bf0:	0943      	lsrs	r3, r0, #5
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	f000 001f 	and.w	r0, r0, #31
 8004bf8:	fa01 f000 	lsl.w	r0, r1, r0
 8004bfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c00:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	ea22 0000 	bic.w	r0, r2, r0
 8004c0a:	6018      	str	r0, [r3, #0]
 8004c0c:	4770      	bx	lr

08004c0e <rcc_periph_reset_pulse>:
 * For available constants, see #periph_t (RCC_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8004c0e:	0943      	lsrs	r3, r0, #5
 8004c10:	2101      	movs	r1, #1
 8004c12:	f000 001f 	and.w	r0, r0, #31
 8004c16:	fa01 f000 	lsl.w	r0, r1, r0
 8004c1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c1e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4302      	orrs	r2, r0
 8004c26:	601a      	str	r2, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	ea22 0000 	bic.w	r0, r2, r0
 8004c2e:	6018      	str	r0, [r3, #0]
 8004c30:	4770      	bx	lr

08004c32 <rcc_periph_reset_hold>:
 * For available constants, see #periph_t  (RCC_UART1 for example)
 */

void rcc_periph_reset_hold(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8004c32:	0943      	lsrs	r3, r0, #5
 8004c34:	2101      	movs	r1, #1
 8004c36:	f000 001f 	and.w	r0, r0, #31
 8004c3a:	fa01 f000 	lsl.w	r0, r1, r0
 8004c3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c42:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4310      	orrs	r0, r2
 8004c4a:	6018      	str	r0, [r3, #0]
 8004c4c:	4770      	bx	lr

08004c4e <rcc_periph_reset_release>:
 * For available constants, see #periph_t (RCC_UART1 for example)
 */

void rcc_periph_reset_release(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8004c4e:	0943      	lsrs	r3, r0, #5
 8004c50:	2101      	movs	r1, #1
 8004c52:	f000 001f 	and.w	r0, r0, #31
 8004c56:	fa01 f000 	lsl.w	r0, r1, r0
 8004c5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c5e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	ea22 0000 	bic.w	r0, r2, r0
 8004c68:	6018      	str	r0, [r3, #0]
 8004c6a:	4770      	bx	lr

08004c6c <__errno>:
 8004c6c:	4b01      	ldr	r3, [pc, #4]	; (8004c74 <__errno+0x8>)
 8004c6e:	6818      	ldr	r0, [r3, #0]
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20000748 	.word	0x20000748

08004c78 <__fp_lock>:
 8004c78:	2000      	movs	r0, #0
 8004c7a:	4770      	bx	lr

08004c7c <__fp_unlock>:
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	4770      	bx	lr

08004c80 <_cleanup_r>:
 8004c80:	4901      	ldr	r1, [pc, #4]	; (8004c88 <_cleanup_r+0x8>)
 8004c82:	f000 b901 	b.w	8004e88 <_fwalk>
 8004c86:	bf00      	nop
 8004c88:	080056a9 	.word	0x080056a9

08004c8c <__sfmoreglue>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	1e4b      	subs	r3, r1, #1
 8004c90:	2568      	movs	r5, #104	; 0x68
 8004c92:	fb05 f503 	mul.w	r5, r5, r3
 8004c96:	460e      	mov	r6, r1
 8004c98:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c9c:	f000 f93e 	bl	8004f1c <_malloc_r>
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	b140      	cbz	r0, 8004cb6 <__sfmoreglue+0x2a>
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	300c      	adds	r0, #12
 8004ca8:	6066      	str	r6, [r4, #4]
 8004caa:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cae:	6021      	str	r1, [r4, #0]
 8004cb0:	60a0      	str	r0, [r4, #8]
 8004cb2:	f7fe fd2d 	bl	8003710 <memset>
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	bd70      	pop	{r4, r5, r6, pc}
 8004cba:	bf00      	nop

08004cbc <_cleanup>:
 8004cbc:	4b02      	ldr	r3, [pc, #8]	; (8004cc8 <_cleanup+0xc>)
 8004cbe:	4903      	ldr	r1, [pc, #12]	; (8004ccc <_cleanup+0x10>)
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	f000 b8e1 	b.w	8004e88 <_fwalk>
 8004cc6:	bf00      	nop
 8004cc8:	080065b4 	.word	0x080065b4
 8004ccc:	080056a9 	.word	0x080056a9

08004cd0 <__sinit>:
 8004cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	4607      	mov	r7, r0
 8004cda:	2c00      	cmp	r4, #0
 8004cdc:	d165      	bne.n	8004daa <__sinit+0xda>
 8004cde:	687d      	ldr	r5, [r7, #4]
 8004ce0:	4833      	ldr	r0, [pc, #204]	; (8004db0 <__sinit+0xe0>)
 8004ce2:	2304      	movs	r3, #4
 8004ce4:	2103      	movs	r1, #3
 8004ce6:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8004cea:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004cec:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
 8004cf0:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
 8004cf4:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 8004cf8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8004cfc:	81ab      	strh	r3, [r5, #12]
 8004cfe:	602c      	str	r4, [r5, #0]
 8004d00:	606c      	str	r4, [r5, #4]
 8004d02:	60ac      	str	r4, [r5, #8]
 8004d04:	666c      	str	r4, [r5, #100]	; 0x64
 8004d06:	81ec      	strh	r4, [r5, #14]
 8004d08:	612c      	str	r4, [r5, #16]
 8004d0a:	616c      	str	r4, [r5, #20]
 8004d0c:	61ac      	str	r4, [r5, #24]
 8004d0e:	4621      	mov	r1, r4
 8004d10:	2208      	movs	r2, #8
 8004d12:	f7fe fcfd 	bl	8003710 <memset>
 8004d16:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8004db4 <__sinit+0xe4>
 8004d1a:	68be      	ldr	r6, [r7, #8]
 8004d1c:	f8df a098 	ldr.w	sl, [pc, #152]	; 8004db8 <__sinit+0xe8>
 8004d20:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004dbc <__sinit+0xec>
 8004d24:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004dc0 <__sinit+0xf0>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	2209      	movs	r2, #9
 8004d2c:	61ed      	str	r5, [r5, #28]
 8004d2e:	f8c5 b020 	str.w	fp, [r5, #32]
 8004d32:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8004d36:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8004d3a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8004d3e:	4621      	mov	r1, r4
 8004d40:	81f3      	strh	r3, [r6, #14]
 8004d42:	81b2      	strh	r2, [r6, #12]
 8004d44:	6034      	str	r4, [r6, #0]
 8004d46:	6074      	str	r4, [r6, #4]
 8004d48:	60b4      	str	r4, [r6, #8]
 8004d4a:	6674      	str	r4, [r6, #100]	; 0x64
 8004d4c:	6134      	str	r4, [r6, #16]
 8004d4e:	6174      	str	r4, [r6, #20]
 8004d50:	61b4      	str	r4, [r6, #24]
 8004d52:	2208      	movs	r2, #8
 8004d54:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8004d58:	9301      	str	r3, [sp, #4]
 8004d5a:	f7fe fcd9 	bl	8003710 <memset>
 8004d5e:	68fd      	ldr	r5, [r7, #12]
 8004d60:	2012      	movs	r0, #18
 8004d62:	2202      	movs	r2, #2
 8004d64:	61f6      	str	r6, [r6, #28]
 8004d66:	f8c6 b020 	str.w	fp, [r6, #32]
 8004d6a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8004d6e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8004d72:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8004d76:	4621      	mov	r1, r4
 8004d78:	81a8      	strh	r0, [r5, #12]
 8004d7a:	81ea      	strh	r2, [r5, #14]
 8004d7c:	602c      	str	r4, [r5, #0]
 8004d7e:	606c      	str	r4, [r5, #4]
 8004d80:	60ac      	str	r4, [r5, #8]
 8004d82:	666c      	str	r4, [r5, #100]	; 0x64
 8004d84:	612c      	str	r4, [r5, #16]
 8004d86:	616c      	str	r4, [r5, #20]
 8004d88:	61ac      	str	r4, [r5, #24]
 8004d8a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8004d8e:	2208      	movs	r2, #8
 8004d90:	f7fe fcbe 	bl	8003710 <memset>
 8004d94:	9b01      	ldr	r3, [sp, #4]
 8004d96:	61ed      	str	r5, [r5, #28]
 8004d98:	f8c5 b020 	str.w	fp, [r5, #32]
 8004d9c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8004da0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8004da4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8004da8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004daa:	b003      	add	sp, #12
 8004dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db0:	08004c81 	.word	0x08004c81
 8004db4:	080054f1 	.word	0x080054f1
 8004db8:	08005519 	.word	0x08005519
 8004dbc:	08005551 	.word	0x08005551
 8004dc0:	08005575 	.word	0x08005575

08004dc4 <__sfp>:
 8004dc4:	4b21      	ldr	r3, [pc, #132]	; (8004e4c <__sfp+0x88>)
 8004dc6:	b570      	push	{r4, r5, r6, lr}
 8004dc8:	681d      	ldr	r5, [r3, #0]
 8004dca:	4606      	mov	r6, r0
 8004dcc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d02c      	beq.n	8004e2c <__sfp+0x68>
 8004dd2:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 8004dd6:	686b      	ldr	r3, [r5, #4]
 8004dd8:	68ac      	ldr	r4, [r5, #8]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	d505      	bpl.n	8004dea <__sfp+0x26>
 8004dde:	e021      	b.n	8004e24 <__sfp+0x60>
 8004de0:	3b01      	subs	r3, #1
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8004de8:	d01c      	beq.n	8004e24 <__sfp+0x60>
 8004dea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dee:	2a00      	cmp	r2, #0
 8004df0:	d1f6      	bne.n	8004de0 <__sfp+0x1c>
 8004df2:	2500      	movs	r5, #0
 8004df4:	2301      	movs	r3, #1
 8004df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dfa:	81e2      	strh	r2, [r4, #14]
 8004dfc:	81a3      	strh	r3, [r4, #12]
 8004dfe:	6665      	str	r5, [r4, #100]	; 0x64
 8004e00:	6025      	str	r5, [r4, #0]
 8004e02:	60a5      	str	r5, [r4, #8]
 8004e04:	6065      	str	r5, [r4, #4]
 8004e06:	6125      	str	r5, [r4, #16]
 8004e08:	6165      	str	r5, [r4, #20]
 8004e0a:	61a5      	str	r5, [r4, #24]
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e12:	2208      	movs	r2, #8
 8004e14:	f7fe fc7c 	bl	8003710 <memset>
 8004e18:	6325      	str	r5, [r4, #48]	; 0x30
 8004e1a:	6365      	str	r5, [r4, #52]	; 0x34
 8004e1c:	6465      	str	r5, [r4, #68]	; 0x44
 8004e1e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004e20:	4620      	mov	r0, r4
 8004e22:	bd70      	pop	{r4, r5, r6, pc}
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	b12b      	cbz	r3, 8004e34 <__sfp+0x70>
 8004e28:	461d      	mov	r5, r3
 8004e2a:	e7d4      	b.n	8004dd6 <__sfp+0x12>
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f7ff ff4f 	bl	8004cd0 <__sinit>
 8004e32:	e7ce      	b.n	8004dd2 <__sfp+0xe>
 8004e34:	4630      	mov	r0, r6
 8004e36:	2104      	movs	r1, #4
 8004e38:	f7ff ff28 	bl	8004c8c <__sfmoreglue>
 8004e3c:	6028      	str	r0, [r5, #0]
 8004e3e:	b108      	cbz	r0, 8004e44 <__sfp+0x80>
 8004e40:	4605      	mov	r5, r0
 8004e42:	e7c8      	b.n	8004dd6 <__sfp+0x12>
 8004e44:	230c      	movs	r3, #12
 8004e46:	6033      	str	r3, [r6, #0]
 8004e48:	bd70      	pop	{r4, r5, r6, pc}
 8004e4a:	bf00      	nop
 8004e4c:	080065b4 	.word	0x080065b4

08004e50 <__sfp_lock_acquire>:
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop

08004e54 <__sfp_lock_release>:
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop

08004e58 <__sinit_lock_acquire>:
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop

08004e5c <__sinit_lock_release>:
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop

08004e60 <__fp_lock_all>:
 8004e60:	4b02      	ldr	r3, [pc, #8]	; (8004e6c <__fp_lock_all+0xc>)
 8004e62:	4903      	ldr	r1, [pc, #12]	; (8004e70 <__fp_lock_all+0x10>)
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	f000 b80f 	b.w	8004e88 <_fwalk>
 8004e6a:	bf00      	nop
 8004e6c:	20000748 	.word	0x20000748
 8004e70:	08004c79 	.word	0x08004c79

08004e74 <__fp_unlock_all>:
 8004e74:	4b02      	ldr	r3, [pc, #8]	; (8004e80 <__fp_unlock_all+0xc>)
 8004e76:	4903      	ldr	r1, [pc, #12]	; (8004e84 <__fp_unlock_all+0x10>)
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	f000 b805 	b.w	8004e88 <_fwalk>
 8004e7e:	bf00      	nop
 8004e80:	20000748 	.word	0x20000748
 8004e84:	08004c7d 	.word	0x08004c7d

08004e88 <_fwalk>:
 8004e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8004e90:	4688      	mov	r8, r1
 8004e92:	d019      	beq.n	8004ec8 <_fwalk+0x40>
 8004e94:	2600      	movs	r6, #0
 8004e96:	687d      	ldr	r5, [r7, #4]
 8004e98:	68bc      	ldr	r4, [r7, #8]
 8004e9a:	3d01      	subs	r5, #1
 8004e9c:	d40e      	bmi.n	8004ebc <_fwalk+0x34>
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	3d01      	subs	r5, #1
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d906      	bls.n	8004eb4 <_fwalk+0x2c>
 8004ea6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004eaa:	4620      	mov	r0, r4
 8004eac:	3301      	adds	r3, #1
 8004eae:	d001      	beq.n	8004eb4 <_fwalk+0x2c>
 8004eb0:	47c0      	blx	r8
 8004eb2:	4306      	orrs	r6, r0
 8004eb4:	1c6b      	adds	r3, r5, #1
 8004eb6:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8004eba:	d1f0      	bne.n	8004e9e <_fwalk+0x16>
 8004ebc:	683f      	ldr	r7, [r7, #0]
 8004ebe:	2f00      	cmp	r7, #0
 8004ec0:	d1e9      	bne.n	8004e96 <_fwalk+0xe>
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec8:	463e      	mov	r6, r7
 8004eca:	4630      	mov	r0, r6
 8004ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004ed0 <_fwalk_reent>:
 8004ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ed4:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
 8004ed8:	4680      	mov	r8, r0
 8004eda:	4689      	mov	r9, r1
 8004edc:	d01a      	beq.n	8004f14 <_fwalk_reent+0x44>
 8004ede:	2700      	movs	r7, #0
 8004ee0:	6875      	ldr	r5, [r6, #4]
 8004ee2:	68b4      	ldr	r4, [r6, #8]
 8004ee4:	3d01      	subs	r5, #1
 8004ee6:	d40f      	bmi.n	8004f08 <_fwalk_reent+0x38>
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	3d01      	subs	r5, #1
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d907      	bls.n	8004f00 <_fwalk_reent+0x30>
 8004ef0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	4640      	mov	r0, r8
 8004efa:	d001      	beq.n	8004f00 <_fwalk_reent+0x30>
 8004efc:	47c8      	blx	r9
 8004efe:	4307      	orrs	r7, r0
 8004f00:	1c6b      	adds	r3, r5, #1
 8004f02:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8004f06:	d1ef      	bne.n	8004ee8 <_fwalk_reent+0x18>
 8004f08:	6836      	ldr	r6, [r6, #0]
 8004f0a:	2e00      	cmp	r6, #0
 8004f0c:	d1e8      	bne.n	8004ee0 <_fwalk_reent+0x10>
 8004f0e:	4638      	mov	r0, r7
 8004f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f14:	4637      	mov	r7, r6
 8004f16:	4638      	mov	r0, r7
 8004f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004f1c <_malloc_r>:
 8004f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f20:	f101 050b 	add.w	r5, r1, #11
 8004f24:	2d16      	cmp	r5, #22
 8004f26:	b083      	sub	sp, #12
 8004f28:	4606      	mov	r6, r0
 8004f2a:	d927      	bls.n	8004f7c <_malloc_r+0x60>
 8004f2c:	f035 0507 	bics.w	r5, r5, #7
 8004f30:	d427      	bmi.n	8004f82 <_malloc_r+0x66>
 8004f32:	42a9      	cmp	r1, r5
 8004f34:	d825      	bhi.n	8004f82 <_malloc_r+0x66>
 8004f36:	4630      	mov	r0, r6
 8004f38:	f000 fa8c 	bl	8005454 <__malloc_lock>
 8004f3c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8004f40:	d226      	bcs.n	8004f90 <_malloc_r+0x74>
 8004f42:	4fc1      	ldr	r7, [pc, #772]	; (8005248 <_malloc_r+0x32c>)
 8004f44:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 8004f48:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
 8004f4c:	68dc      	ldr	r4, [r3, #12]
 8004f4e:	429c      	cmp	r4, r3
 8004f50:	f000 81d2 	beq.w	80052f8 <_malloc_r+0x3dc>
 8004f54:	6863      	ldr	r3, [r4, #4]
 8004f56:	68e2      	ldr	r2, [r4, #12]
 8004f58:	f023 0303 	bic.w	r3, r3, #3
 8004f5c:	4423      	add	r3, r4
 8004f5e:	6858      	ldr	r0, [r3, #4]
 8004f60:	68a1      	ldr	r1, [r4, #8]
 8004f62:	f040 0501 	orr.w	r5, r0, #1
 8004f66:	60ca      	str	r2, [r1, #12]
 8004f68:	4630      	mov	r0, r6
 8004f6a:	6091      	str	r1, [r2, #8]
 8004f6c:	605d      	str	r5, [r3, #4]
 8004f6e:	f000 fa73 	bl	8005458 <__malloc_unlock>
 8004f72:	3408      	adds	r4, #8
 8004f74:	4620      	mov	r0, r4
 8004f76:	b003      	add	sp, #12
 8004f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7c:	2510      	movs	r5, #16
 8004f7e:	42a9      	cmp	r1, r5
 8004f80:	d9d9      	bls.n	8004f36 <_malloc_r+0x1a>
 8004f82:	2400      	movs	r4, #0
 8004f84:	230c      	movs	r3, #12
 8004f86:	4620      	mov	r0, r4
 8004f88:	6033      	str	r3, [r6, #0]
 8004f8a:	b003      	add	sp, #12
 8004f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f90:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 8004f94:	f000 8089 	beq.w	80050aa <_malloc_r+0x18e>
 8004f98:	f1bc 0f04 	cmp.w	ip, #4
 8004f9c:	f200 8160 	bhi.w	8005260 <_malloc_r+0x344>
 8004fa0:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8004fa4:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8004fa8:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8004fac:	4fa6      	ldr	r7, [pc, #664]	; (8005248 <_malloc_r+0x32c>)
 8004fae:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8004fb2:	68cc      	ldr	r4, [r1, #12]
 8004fb4:	42a1      	cmp	r1, r4
 8004fb6:	d105      	bne.n	8004fc4 <_malloc_r+0xa8>
 8004fb8:	e00c      	b.n	8004fd4 <_malloc_r+0xb8>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	da79      	bge.n	80050b2 <_malloc_r+0x196>
 8004fbe:	68e4      	ldr	r4, [r4, #12]
 8004fc0:	42a1      	cmp	r1, r4
 8004fc2:	d007      	beq.n	8004fd4 <_malloc_r+0xb8>
 8004fc4:	6862      	ldr	r2, [r4, #4]
 8004fc6:	f022 0203 	bic.w	r2, r2, #3
 8004fca:	1b53      	subs	r3, r2, r5
 8004fcc:	2b0f      	cmp	r3, #15
 8004fce:	ddf4      	ble.n	8004fba <_malloc_r+0x9e>
 8004fd0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004fd4:	f10c 0c01 	add.w	ip, ip, #1
 8004fd8:	4b9b      	ldr	r3, [pc, #620]	; (8005248 <_malloc_r+0x32c>)
 8004fda:	693c      	ldr	r4, [r7, #16]
 8004fdc:	f103 0e08 	add.w	lr, r3, #8
 8004fe0:	4574      	cmp	r4, lr
 8004fe2:	f000 817e 	beq.w	80052e2 <_malloc_r+0x3c6>
 8004fe6:	6861      	ldr	r1, [r4, #4]
 8004fe8:	f021 0103 	bic.w	r1, r1, #3
 8004fec:	1b4a      	subs	r2, r1, r5
 8004fee:	2a0f      	cmp	r2, #15
 8004ff0:	f300 8164 	bgt.w	80052bc <_malloc_r+0x3a0>
 8004ff4:	2a00      	cmp	r2, #0
 8004ff6:	f8c3 e014 	str.w	lr, [r3, #20]
 8004ffa:	f8c3 e010 	str.w	lr, [r3, #16]
 8004ffe:	da69      	bge.n	80050d4 <_malloc_r+0x1b8>
 8005000:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005004:	f080 813a 	bcs.w	800527c <_malloc_r+0x360>
 8005008:	08c9      	lsrs	r1, r1, #3
 800500a:	108a      	asrs	r2, r1, #2
 800500c:	f04f 0801 	mov.w	r8, #1
 8005010:	fa08 f802 	lsl.w	r8, r8, r2
 8005014:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	6888      	ldr	r0, [r1, #8]
 800501c:	ea48 0202 	orr.w	r2, r8, r2
 8005020:	60a0      	str	r0, [r4, #8]
 8005022:	60e1      	str	r1, [r4, #12]
 8005024:	605a      	str	r2, [r3, #4]
 8005026:	608c      	str	r4, [r1, #8]
 8005028:	60c4      	str	r4, [r0, #12]
 800502a:	ea4f 03ac 	mov.w	r3, ip, asr #2
 800502e:	2001      	movs	r0, #1
 8005030:	4098      	lsls	r0, r3
 8005032:	4290      	cmp	r0, r2
 8005034:	d85b      	bhi.n	80050ee <_malloc_r+0x1d2>
 8005036:	4202      	tst	r2, r0
 8005038:	d106      	bne.n	8005048 <_malloc_r+0x12c>
 800503a:	f02c 0c03 	bic.w	ip, ip, #3
 800503e:	0040      	lsls	r0, r0, #1
 8005040:	4202      	tst	r2, r0
 8005042:	f10c 0c04 	add.w	ip, ip, #4
 8005046:	d0fa      	beq.n	800503e <_malloc_r+0x122>
 8005048:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
 800504c:	4644      	mov	r4, r8
 800504e:	46e1      	mov	r9, ip
 8005050:	68e3      	ldr	r3, [r4, #12]
 8005052:	429c      	cmp	r4, r3
 8005054:	d107      	bne.n	8005066 <_malloc_r+0x14a>
 8005056:	e146      	b.n	80052e6 <_malloc_r+0x3ca>
 8005058:	2a00      	cmp	r2, #0
 800505a:	f280 8157 	bge.w	800530c <_malloc_r+0x3f0>
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	429c      	cmp	r4, r3
 8005062:	f000 8140 	beq.w	80052e6 <_malloc_r+0x3ca>
 8005066:	6859      	ldr	r1, [r3, #4]
 8005068:	f021 0103 	bic.w	r1, r1, #3
 800506c:	1b4a      	subs	r2, r1, r5
 800506e:	2a0f      	cmp	r2, #15
 8005070:	ddf2      	ble.n	8005058 <_malloc_r+0x13c>
 8005072:	461c      	mov	r4, r3
 8005074:	f854 cf08 	ldr.w	ip, [r4, #8]!
 8005078:	68d9      	ldr	r1, [r3, #12]
 800507a:	f045 0901 	orr.w	r9, r5, #1
 800507e:	f042 0801 	orr.w	r8, r2, #1
 8005082:	441d      	add	r5, r3
 8005084:	f8c3 9004 	str.w	r9, [r3, #4]
 8005088:	4630      	mov	r0, r6
 800508a:	f8cc 100c 	str.w	r1, [ip, #12]
 800508e:	f8c1 c008 	str.w	ip, [r1, #8]
 8005092:	617d      	str	r5, [r7, #20]
 8005094:	613d      	str	r5, [r7, #16]
 8005096:	f8c5 e00c 	str.w	lr, [r5, #12]
 800509a:	f8c5 e008 	str.w	lr, [r5, #8]
 800509e:	f8c5 8004 	str.w	r8, [r5, #4]
 80050a2:	50aa      	str	r2, [r5, r2]
 80050a4:	f000 f9d8 	bl	8005458 <__malloc_unlock>
 80050a8:	e764      	b.n	8004f74 <_malloc_r+0x58>
 80050aa:	217e      	movs	r1, #126	; 0x7e
 80050ac:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 80050b0:	e77c      	b.n	8004fac <_malloc_r+0x90>
 80050b2:	4422      	add	r2, r4
 80050b4:	6850      	ldr	r0, [r2, #4]
 80050b6:	68e3      	ldr	r3, [r4, #12]
 80050b8:	68a1      	ldr	r1, [r4, #8]
 80050ba:	f040 0501 	orr.w	r5, r0, #1
 80050be:	60cb      	str	r3, [r1, #12]
 80050c0:	4630      	mov	r0, r6
 80050c2:	6099      	str	r1, [r3, #8]
 80050c4:	6055      	str	r5, [r2, #4]
 80050c6:	f000 f9c7 	bl	8005458 <__malloc_unlock>
 80050ca:	3408      	adds	r4, #8
 80050cc:	4620      	mov	r0, r4
 80050ce:	b003      	add	sp, #12
 80050d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d4:	4421      	add	r1, r4
 80050d6:	684b      	ldr	r3, [r1, #4]
 80050d8:	4630      	mov	r0, r6
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	604b      	str	r3, [r1, #4]
 80050e0:	f000 f9ba 	bl	8005458 <__malloc_unlock>
 80050e4:	3408      	adds	r4, #8
 80050e6:	4620      	mov	r0, r4
 80050e8:	b003      	add	sp, #12
 80050ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ee:	68bc      	ldr	r4, [r7, #8]
 80050f0:	6863      	ldr	r3, [r4, #4]
 80050f2:	f023 0903 	bic.w	r9, r3, #3
 80050f6:	45a9      	cmp	r9, r5
 80050f8:	d304      	bcc.n	8005104 <_malloc_r+0x1e8>
 80050fa:	ebc5 0309 	rsb	r3, r5, r9
 80050fe:	2b0f      	cmp	r3, #15
 8005100:	f300 8091 	bgt.w	8005226 <_malloc_r+0x30a>
 8005104:	4b51      	ldr	r3, [pc, #324]	; (800524c <_malloc_r+0x330>)
 8005106:	4a52      	ldr	r2, [pc, #328]	; (8005250 <_malloc_r+0x334>)
 8005108:	6819      	ldr	r1, [r3, #0]
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	eb05 0a01 	add.w	sl, r5, r1
 8005110:	3301      	adds	r3, #1
 8005112:	eb04 0b09 	add.w	fp, r4, r9
 8005116:	f000 8161 	beq.w	80053dc <_malloc_r+0x4c0>
 800511a:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
 800511e:	f10a 0a0f 	add.w	sl, sl, #15
 8005122:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
 8005126:	f02a 0a0f 	bic.w	sl, sl, #15
 800512a:	4630      	mov	r0, r6
 800512c:	4651      	mov	r1, sl
 800512e:	9201      	str	r2, [sp, #4]
 8005130:	f000 f9cc 	bl	80054cc <_sbrk_r>
 8005134:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005138:	4680      	mov	r8, r0
 800513a:	9a01      	ldr	r2, [sp, #4]
 800513c:	f000 8101 	beq.w	8005342 <_malloc_r+0x426>
 8005140:	4583      	cmp	fp, r0
 8005142:	f200 80fb 	bhi.w	800533c <_malloc_r+0x420>
 8005146:	f8df c114 	ldr.w	ip, [pc, #276]	; 800525c <_malloc_r+0x340>
 800514a:	45c3      	cmp	fp, r8
 800514c:	f8dc 3000 	ldr.w	r3, [ip]
 8005150:	4453      	add	r3, sl
 8005152:	f8cc 3000 	str.w	r3, [ip]
 8005156:	f000 814a 	beq.w	80053ee <_malloc_r+0x4d2>
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	493c      	ldr	r1, [pc, #240]	; (8005250 <_malloc_r+0x334>)
 800515e:	3201      	adds	r2, #1
 8005160:	bf1b      	ittet	ne
 8005162:	ebcb 0b08 	rsbne	fp, fp, r8
 8005166:	445b      	addne	r3, fp
 8005168:	f8c1 8000 	streq.w	r8, [r1]
 800516c:	f8cc 3000 	strne.w	r3, [ip]
 8005170:	f018 0307 	ands.w	r3, r8, #7
 8005174:	f000 8114 	beq.w	80053a0 <_malloc_r+0x484>
 8005178:	f1c3 0208 	rsb	r2, r3, #8
 800517c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005180:	4490      	add	r8, r2
 8005182:	3308      	adds	r3, #8
 8005184:	44c2      	add	sl, r8
 8005186:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 800518a:	ebca 0a03 	rsb	sl, sl, r3
 800518e:	4651      	mov	r1, sl
 8005190:	4630      	mov	r0, r6
 8005192:	f8cd c004 	str.w	ip, [sp, #4]
 8005196:	f000 f999 	bl	80054cc <_sbrk_r>
 800519a:	1c43      	adds	r3, r0, #1
 800519c:	f8dd c004 	ldr.w	ip, [sp, #4]
 80051a0:	f000 8135 	beq.w	800540e <_malloc_r+0x4f2>
 80051a4:	ebc8 0200 	rsb	r2, r8, r0
 80051a8:	4452      	add	r2, sl
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	f8dc 3000 	ldr.w	r3, [ip]
 80051b2:	42bc      	cmp	r4, r7
 80051b4:	4453      	add	r3, sl
 80051b6:	f8c7 8008 	str.w	r8, [r7, #8]
 80051ba:	f8cc 3000 	str.w	r3, [ip]
 80051be:	f8c8 2004 	str.w	r2, [r8, #4]
 80051c2:	f8df a098 	ldr.w	sl, [pc, #152]	; 800525c <_malloc_r+0x340>
 80051c6:	d015      	beq.n	80051f4 <_malloc_r+0x2d8>
 80051c8:	f1b9 0f0f 	cmp.w	r9, #15
 80051cc:	f240 80eb 	bls.w	80053a6 <_malloc_r+0x48a>
 80051d0:	6861      	ldr	r1, [r4, #4]
 80051d2:	f1a9 020c 	sub.w	r2, r9, #12
 80051d6:	f022 0207 	bic.w	r2, r2, #7
 80051da:	f001 0101 	and.w	r1, r1, #1
 80051de:	ea42 0e01 	orr.w	lr, r2, r1
 80051e2:	2005      	movs	r0, #5
 80051e4:	18a1      	adds	r1, r4, r2
 80051e6:	2a0f      	cmp	r2, #15
 80051e8:	f8c4 e004 	str.w	lr, [r4, #4]
 80051ec:	6048      	str	r0, [r1, #4]
 80051ee:	6088      	str	r0, [r1, #8]
 80051f0:	f200 8111 	bhi.w	8005416 <_malloc_r+0x4fa>
 80051f4:	4a17      	ldr	r2, [pc, #92]	; (8005254 <_malloc_r+0x338>)
 80051f6:	68bc      	ldr	r4, [r7, #8]
 80051f8:	6811      	ldr	r1, [r2, #0]
 80051fa:	428b      	cmp	r3, r1
 80051fc:	bf88      	it	hi
 80051fe:	6013      	strhi	r3, [r2, #0]
 8005200:	4a15      	ldr	r2, [pc, #84]	; (8005258 <_malloc_r+0x33c>)
 8005202:	6811      	ldr	r1, [r2, #0]
 8005204:	428b      	cmp	r3, r1
 8005206:	bf88      	it	hi
 8005208:	6013      	strhi	r3, [r2, #0]
 800520a:	6862      	ldr	r2, [r4, #4]
 800520c:	f022 0203 	bic.w	r2, r2, #3
 8005210:	4295      	cmp	r5, r2
 8005212:	ebc5 0302 	rsb	r3, r5, r2
 8005216:	d801      	bhi.n	800521c <_malloc_r+0x300>
 8005218:	2b0f      	cmp	r3, #15
 800521a:	dc04      	bgt.n	8005226 <_malloc_r+0x30a>
 800521c:	4630      	mov	r0, r6
 800521e:	f000 f91b 	bl	8005458 <__malloc_unlock>
 8005222:	2400      	movs	r4, #0
 8005224:	e6a6      	b.n	8004f74 <_malloc_r+0x58>
 8005226:	f045 0201 	orr.w	r2, r5, #1
 800522a:	f043 0301 	orr.w	r3, r3, #1
 800522e:	4425      	add	r5, r4
 8005230:	6062      	str	r2, [r4, #4]
 8005232:	4630      	mov	r0, r6
 8005234:	60bd      	str	r5, [r7, #8]
 8005236:	606b      	str	r3, [r5, #4]
 8005238:	f000 f90e 	bl	8005458 <__malloc_unlock>
 800523c:	3408      	adds	r4, #8
 800523e:	4620      	mov	r0, r4
 8005240:	b003      	add	sp, #12
 8005242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005246:	bf00      	nop
 8005248:	2000074c 	.word	0x2000074c
 800524c:	20000c40 	.word	0x20000c40
 8005250:	20000b58 	.word	0x20000b58
 8005254:	20000c3c 	.word	0x20000c3c
 8005258:	20000c38 	.word	0x20000c38
 800525c:	20000c44 	.word	0x20000c44
 8005260:	f1bc 0f14 	cmp.w	ip, #20
 8005264:	d961      	bls.n	800532a <_malloc_r+0x40e>
 8005266:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 800526a:	f200 808f 	bhi.w	800538c <_malloc_r+0x470>
 800526e:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 8005272:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 8005276:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800527a:	e697      	b.n	8004fac <_malloc_r+0x90>
 800527c:	0a4b      	lsrs	r3, r1, #9
 800527e:	2b04      	cmp	r3, #4
 8005280:	d958      	bls.n	8005334 <_malloc_r+0x418>
 8005282:	2b14      	cmp	r3, #20
 8005284:	f200 80ad 	bhi.w	80053e2 <_malloc_r+0x4c6>
 8005288:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800528c:	0050      	lsls	r0, r2, #1
 800528e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8005292:	6883      	ldr	r3, [r0, #8]
 8005294:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8005450 <_malloc_r+0x534>
 8005298:	4283      	cmp	r3, r0
 800529a:	f000 808a 	beq.w	80053b2 <_malloc_r+0x496>
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	f022 0203 	bic.w	r2, r2, #3
 80052a4:	4291      	cmp	r1, r2
 80052a6:	d202      	bcs.n	80052ae <_malloc_r+0x392>
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	4298      	cmp	r0, r3
 80052ac:	d1f7      	bne.n	800529e <_malloc_r+0x382>
 80052ae:	68d9      	ldr	r1, [r3, #12]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	60e1      	str	r1, [r4, #12]
 80052b4:	60a3      	str	r3, [r4, #8]
 80052b6:	608c      	str	r4, [r1, #8]
 80052b8:	60dc      	str	r4, [r3, #12]
 80052ba:	e6b6      	b.n	800502a <_malloc_r+0x10e>
 80052bc:	f045 0701 	orr.w	r7, r5, #1
 80052c0:	f042 0101 	orr.w	r1, r2, #1
 80052c4:	4425      	add	r5, r4
 80052c6:	6067      	str	r7, [r4, #4]
 80052c8:	4630      	mov	r0, r6
 80052ca:	615d      	str	r5, [r3, #20]
 80052cc:	611d      	str	r5, [r3, #16]
 80052ce:	f8c5 e00c 	str.w	lr, [r5, #12]
 80052d2:	f8c5 e008 	str.w	lr, [r5, #8]
 80052d6:	6069      	str	r1, [r5, #4]
 80052d8:	50aa      	str	r2, [r5, r2]
 80052da:	3408      	adds	r4, #8
 80052dc:	f000 f8bc 	bl	8005458 <__malloc_unlock>
 80052e0:	e648      	b.n	8004f74 <_malloc_r+0x58>
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	e6a1      	b.n	800502a <_malloc_r+0x10e>
 80052e6:	f109 0901 	add.w	r9, r9, #1
 80052ea:	f019 0f03 	tst.w	r9, #3
 80052ee:	f104 0408 	add.w	r4, r4, #8
 80052f2:	f47f aead 	bne.w	8005050 <_malloc_r+0x134>
 80052f6:	e02d      	b.n	8005354 <_malloc_r+0x438>
 80052f8:	f104 0308 	add.w	r3, r4, #8
 80052fc:	6964      	ldr	r4, [r4, #20]
 80052fe:	42a3      	cmp	r3, r4
 8005300:	bf08      	it	eq
 8005302:	f10c 0c02 	addeq.w	ip, ip, #2
 8005306:	f43f ae67 	beq.w	8004fd8 <_malloc_r+0xbc>
 800530a:	e623      	b.n	8004f54 <_malloc_r+0x38>
 800530c:	4419      	add	r1, r3
 800530e:	6848      	ldr	r0, [r1, #4]
 8005310:	461c      	mov	r4, r3
 8005312:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f040 0501 	orr.w	r5, r0, #1
 800531c:	604d      	str	r5, [r1, #4]
 800531e:	4630      	mov	r0, r6
 8005320:	60d3      	str	r3, [r2, #12]
 8005322:	609a      	str	r2, [r3, #8]
 8005324:	f000 f898 	bl	8005458 <__malloc_unlock>
 8005328:	e624      	b.n	8004f74 <_malloc_r+0x58>
 800532a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
 800532e:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8005332:	e63b      	b.n	8004fac <_malloc_r+0x90>
 8005334:	098a      	lsrs	r2, r1, #6
 8005336:	3238      	adds	r2, #56	; 0x38
 8005338:	0050      	lsls	r0, r2, #1
 800533a:	e7a8      	b.n	800528e <_malloc_r+0x372>
 800533c:	42bc      	cmp	r4, r7
 800533e:	f43f af02 	beq.w	8005146 <_malloc_r+0x22a>
 8005342:	68bc      	ldr	r4, [r7, #8]
 8005344:	6862      	ldr	r2, [r4, #4]
 8005346:	f022 0203 	bic.w	r2, r2, #3
 800534a:	e761      	b.n	8005210 <_malloc_r+0x2f4>
 800534c:	f8d8 8000 	ldr.w	r8, [r8]
 8005350:	4598      	cmp	r8, r3
 8005352:	d17a      	bne.n	800544a <_malloc_r+0x52e>
 8005354:	f01c 0f03 	tst.w	ip, #3
 8005358:	f1a8 0308 	sub.w	r3, r8, #8
 800535c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005360:	d1f4      	bne.n	800534c <_malloc_r+0x430>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	ea23 0300 	bic.w	r3, r3, r0
 8005368:	607b      	str	r3, [r7, #4]
 800536a:	0040      	lsls	r0, r0, #1
 800536c:	4298      	cmp	r0, r3
 800536e:	f63f aebe 	bhi.w	80050ee <_malloc_r+0x1d2>
 8005372:	2800      	cmp	r0, #0
 8005374:	f43f aebb 	beq.w	80050ee <_malloc_r+0x1d2>
 8005378:	4203      	tst	r3, r0
 800537a:	46cc      	mov	ip, r9
 800537c:	f47f ae64 	bne.w	8005048 <_malloc_r+0x12c>
 8005380:	0040      	lsls	r0, r0, #1
 8005382:	4203      	tst	r3, r0
 8005384:	f10c 0c04 	add.w	ip, ip, #4
 8005388:	d0fa      	beq.n	8005380 <_malloc_r+0x464>
 800538a:	e65d      	b.n	8005048 <_malloc_r+0x12c>
 800538c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 8005390:	d819      	bhi.n	80053c6 <_malloc_r+0x4aa>
 8005392:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 8005396:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 800539a:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800539e:	e605      	b.n	8004fac <_malloc_r+0x90>
 80053a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053a4:	e6ee      	b.n	8005184 <_malloc_r+0x268>
 80053a6:	2301      	movs	r3, #1
 80053a8:	f8c8 3004 	str.w	r3, [r8, #4]
 80053ac:	4644      	mov	r4, r8
 80053ae:	2200      	movs	r2, #0
 80053b0:	e72e      	b.n	8005210 <_malloc_r+0x2f4>
 80053b2:	1092      	asrs	r2, r2, #2
 80053b4:	2001      	movs	r0, #1
 80053b6:	4090      	lsls	r0, r2
 80053b8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80053bc:	4619      	mov	r1, r3
 80053be:	4302      	orrs	r2, r0
 80053c0:	f8c8 2004 	str.w	r2, [r8, #4]
 80053c4:	e775      	b.n	80052b2 <_malloc_r+0x396>
 80053c6:	f240 5354 	movw	r3, #1364	; 0x554
 80053ca:	459c      	cmp	ip, r3
 80053cc:	d81b      	bhi.n	8005406 <_malloc_r+0x4ea>
 80053ce:	ea4f 4c95 	mov.w	ip, r5, lsr #18
 80053d2:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
 80053d6:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80053da:	e5e7      	b.n	8004fac <_malloc_r+0x90>
 80053dc:	f10a 0a10 	add.w	sl, sl, #16
 80053e0:	e6a3      	b.n	800512a <_malloc_r+0x20e>
 80053e2:	2b54      	cmp	r3, #84	; 0x54
 80053e4:	d81f      	bhi.n	8005426 <_malloc_r+0x50a>
 80053e6:	0b0a      	lsrs	r2, r1, #12
 80053e8:	326e      	adds	r2, #110	; 0x6e
 80053ea:	0050      	lsls	r0, r2, #1
 80053ec:	e74f      	b.n	800528e <_malloc_r+0x372>
 80053ee:	f3cb 010b 	ubfx	r1, fp, #0, #12
 80053f2:	2900      	cmp	r1, #0
 80053f4:	f47f aeb1 	bne.w	800515a <_malloc_r+0x23e>
 80053f8:	eb0a 0109 	add.w	r1, sl, r9
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	f041 0101 	orr.w	r1, r1, #1
 8005402:	6051      	str	r1, [r2, #4]
 8005404:	e6f6      	b.n	80051f4 <_malloc_r+0x2d8>
 8005406:	21fc      	movs	r1, #252	; 0xfc
 8005408:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800540c:	e5ce      	b.n	8004fac <_malloc_r+0x90>
 800540e:	2201      	movs	r2, #1
 8005410:	f04f 0a00 	mov.w	sl, #0
 8005414:	e6cb      	b.n	80051ae <_malloc_r+0x292>
 8005416:	f104 0108 	add.w	r1, r4, #8
 800541a:	4630      	mov	r0, r6
 800541c:	f000 fa66 	bl	80058ec <_free_r>
 8005420:	f8da 3000 	ldr.w	r3, [sl]
 8005424:	e6e6      	b.n	80051f4 <_malloc_r+0x2d8>
 8005426:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800542a:	d803      	bhi.n	8005434 <_malloc_r+0x518>
 800542c:	0bca      	lsrs	r2, r1, #15
 800542e:	3277      	adds	r2, #119	; 0x77
 8005430:	0050      	lsls	r0, r2, #1
 8005432:	e72c      	b.n	800528e <_malloc_r+0x372>
 8005434:	f240 5254 	movw	r2, #1364	; 0x554
 8005438:	4293      	cmp	r3, r2
 800543a:	d803      	bhi.n	8005444 <_malloc_r+0x528>
 800543c:	0c8a      	lsrs	r2, r1, #18
 800543e:	327c      	adds	r2, #124	; 0x7c
 8005440:	0050      	lsls	r0, r2, #1
 8005442:	e724      	b.n	800528e <_malloc_r+0x372>
 8005444:	20fc      	movs	r0, #252	; 0xfc
 8005446:	227e      	movs	r2, #126	; 0x7e
 8005448:	e721      	b.n	800528e <_malloc_r+0x372>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	e78d      	b.n	800536a <_malloc_r+0x44e>
 800544e:	bf00      	nop
 8005450:	2000074c 	.word	0x2000074c

08005454 <__malloc_lock>:
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop

08005458 <__malloc_unlock>:
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop

0800545c <_puts_r>:
 800545c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545e:	4604      	mov	r4, r0
 8005460:	b089      	sub	sp, #36	; 0x24
 8005462:	4608      	mov	r0, r1
 8005464:	460d      	mov	r5, r1
 8005466:	f000 f889 	bl	800557c <strlen>
 800546a:	68a3      	ldr	r3, [r4, #8]
 800546c:	2102      	movs	r1, #2
 800546e:	899a      	ldrh	r2, [r3, #12]
 8005470:	f8df e044 	ldr.w	lr, [pc, #68]	; 80054b8 <_puts_r+0x5c>
 8005474:	f100 0c01 	add.w	ip, r0, #1
 8005478:	2701      	movs	r7, #1
 800547a:	ae04      	add	r6, sp, #16
 800547c:	9102      	str	r1, [sp, #8]
 800547e:	0491      	lsls	r1, r2, #18
 8005480:	9504      	str	r5, [sp, #16]
 8005482:	9005      	str	r0, [sp, #20]
 8005484:	f8cd c00c 	str.w	ip, [sp, #12]
 8005488:	f8cd e018 	str.w	lr, [sp, #24]
 800548c:	9707      	str	r7, [sp, #28]
 800548e:	9601      	str	r6, [sp, #4]
 8005490:	d406      	bmi.n	80054a0 <_puts_r+0x44>
 8005492:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005498:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800549c:	819a      	strh	r2, [r3, #12]
 800549e:	6659      	str	r1, [r3, #100]	; 0x64
 80054a0:	4620      	mov	r0, r4
 80054a2:	4619      	mov	r1, r3
 80054a4:	aa01      	add	r2, sp, #4
 80054a6:	f000 faed 	bl	8005a84 <__sfvwrite_r>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	bf0c      	ite	eq
 80054ae:	200a      	moveq	r0, #10
 80054b0:	f04f 30ff 	movne.w	r0, #4294967295
 80054b4:	b009      	add	sp, #36	; 0x24
 80054b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b8:	080065bc 	.word	0x080065bc

080054bc <puts>:
 80054bc:	4b02      	ldr	r3, [pc, #8]	; (80054c8 <puts+0xc>)
 80054be:	4601      	mov	r1, r0
 80054c0:	6818      	ldr	r0, [r3, #0]
 80054c2:	f7ff bfcb 	b.w	800545c <_puts_r>
 80054c6:	bf00      	nop
 80054c8:	20000748 	.word	0x20000748

080054cc <_sbrk_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4c07      	ldr	r4, [pc, #28]	; (80054ec <_sbrk_r+0x20>)
 80054d0:	2300      	movs	r3, #0
 80054d2:	4605      	mov	r5, r0
 80054d4:	4608      	mov	r0, r1
 80054d6:	6023      	str	r3, [r4, #0]
 80054d8:	f7fe fbd6 	bl	8003c88 <_sbrk>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d000      	beq.n	80054e2 <_sbrk_r+0x16>
 80054e0:	bd38      	pop	{r3, r4, r5, pc}
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0fb      	beq.n	80054e0 <_sbrk_r+0x14>
 80054e8:	602b      	str	r3, [r5, #0]
 80054ea:	bd38      	pop	{r3, r4, r5, pc}
 80054ec:	20000c70 	.word	0x20000c70

080054f0 <__sread>:
 80054f0:	b510      	push	{r4, lr}
 80054f2:	460c      	mov	r4, r1
 80054f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f8:	f000 fd12 	bl	8005f20 <_read_r>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	db03      	blt.n	8005508 <__sread+0x18>
 8005500:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005502:	4403      	add	r3, r0
 8005504:	6523      	str	r3, [r4, #80]	; 0x50
 8005506:	bd10      	pop	{r4, pc}
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800550e:	81a3      	strh	r3, [r4, #12]
 8005510:	bd10      	pop	{r4, pc}
 8005512:	bf00      	nop

08005514 <__seofread>:
 8005514:	2000      	movs	r0, #0
 8005516:	4770      	bx	lr

08005518 <__swrite>:
 8005518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800551c:	460c      	mov	r4, r1
 800551e:	8989      	ldrh	r1, [r1, #12]
 8005520:	461d      	mov	r5, r3
 8005522:	05cb      	lsls	r3, r1, #23
 8005524:	4616      	mov	r6, r2
 8005526:	4607      	mov	r7, r0
 8005528:	d506      	bpl.n	8005538 <__swrite+0x20>
 800552a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800552e:	2200      	movs	r2, #0
 8005530:	2302      	movs	r3, #2
 8005532:	f000 fc31 	bl	8005d98 <_lseek_r>
 8005536:	89a1      	ldrh	r1, [r4, #12]
 8005538:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800553c:	81a1      	strh	r1, [r4, #12]
 800553e:	4638      	mov	r0, r7
 8005540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005544:	4632      	mov	r2, r6
 8005546:	462b      	mov	r3, r5
 8005548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800554c:	f000 b846 	b.w	80055dc <_write_r>

08005550 <__sseek>:
 8005550:	b510      	push	{r4, lr}
 8005552:	460c      	mov	r4, r1
 8005554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005558:	f000 fc1e 	bl	8005d98 <_lseek_r>
 800555c:	1c42      	adds	r2, r0, #1
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	d004      	beq.n	800556c <__sseek+0x1c>
 8005562:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005566:	6520      	str	r0, [r4, #80]	; 0x50
 8005568:	81a3      	strh	r3, [r4, #12]
 800556a:	bd10      	pop	{r4, pc}
 800556c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	bd10      	pop	{r4, pc}

08005574 <__sclose>:
 8005574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005578:	f000 b844 	b.w	8005604 <_close_r>

0800557c <strlen>:
 800557c:	f020 0103 	bic.w	r1, r0, #3
 8005580:	f010 0003 	ands.w	r0, r0, #3
 8005584:	f1c0 0000 	rsb	r0, r0, #0
 8005588:	f851 3b04 	ldr.w	r3, [r1], #4
 800558c:	f100 0c04 	add.w	ip, r0, #4
 8005590:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8005594:	f06f 0200 	mvn.w	r2, #0
 8005598:	bf1c      	itt	ne
 800559a:	fa22 f20c 	lsrne.w	r2, r2, ip
 800559e:	4313      	orrne	r3, r2
 80055a0:	f04f 0c01 	mov.w	ip, #1
 80055a4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80055a8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80055ac:	eba3 020c 	sub.w	r2, r3, ip
 80055b0:	ea22 0203 	bic.w	r2, r2, r3
 80055b4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80055b8:	bf04      	itt	eq
 80055ba:	f851 3b04 	ldreq.w	r3, [r1], #4
 80055be:	3004      	addeq	r0, #4
 80055c0:	d0f4      	beq.n	80055ac <strlen+0x30>
 80055c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80055c6:	bf1f      	itttt	ne
 80055c8:	3001      	addne	r0, #1
 80055ca:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80055ce:	3001      	addne	r0, #1
 80055d0:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 80055d4:	bf18      	it	ne
 80055d6:	3001      	addne	r0, #1
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop

080055dc <_write_r>:
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	4c08      	ldr	r4, [pc, #32]	; (8005600 <_write_r+0x24>)
 80055e0:	4606      	mov	r6, r0
 80055e2:	2500      	movs	r5, #0
 80055e4:	4608      	mov	r0, r1
 80055e6:	4611      	mov	r1, r2
 80055e8:	461a      	mov	r2, r3
 80055ea:	6025      	str	r5, [r4, #0]
 80055ec:	f7fe fad6 	bl	8003b9c <_write>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d000      	beq.n	80055f6 <_write_r+0x1a>
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0fb      	beq.n	80055f4 <_write_r+0x18>
 80055fc:	6033      	str	r3, [r6, #0]
 80055fe:	bd70      	pop	{r4, r5, r6, pc}
 8005600:	20000c70 	.word	0x20000c70

08005604 <_close_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	4c07      	ldr	r4, [pc, #28]	; (8005624 <_close_r+0x20>)
 8005608:	2300      	movs	r3, #0
 800560a:	4605      	mov	r5, r0
 800560c:	4608      	mov	r0, r1
 800560e:	6023      	str	r3, [r4, #0]
 8005610:	f7fe fb04 	bl	8003c1c <_close>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d000      	beq.n	800561a <_close_r+0x16>
 8005618:	bd38      	pop	{r3, r4, r5, pc}
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0fb      	beq.n	8005618 <_close_r+0x14>
 8005620:	602b      	str	r3, [r5, #0]
 8005622:	bd38      	pop	{r3, r4, r5, pc}
 8005624:	20000c70 	.word	0x20000c70

08005628 <_fclose_r>:
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	460c      	mov	r4, r1
 800562c:	4605      	mov	r5, r0
 800562e:	b131      	cbz	r1, 800563e <_fclose_r+0x16>
 8005630:	b110      	cbz	r0, 8005638 <_fclose_r+0x10>
 8005632:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005634:	2b00      	cmp	r3, #0
 8005636:	d02f      	beq.n	8005698 <_fclose_r+0x70>
 8005638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563c:	b90b      	cbnz	r3, 8005642 <_fclose_r+0x1a>
 800563e:	2000      	movs	r0, #0
 8005640:	bd70      	pop	{r4, r5, r6, pc}
 8005642:	4628      	mov	r0, r5
 8005644:	4621      	mov	r1, r4
 8005646:	f000 f8db 	bl	8005800 <_fflush_r>
 800564a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800564c:	4606      	mov	r6, r0
 800564e:	b133      	cbz	r3, 800565e <_fclose_r+0x36>
 8005650:	4628      	mov	r0, r5
 8005652:	69e1      	ldr	r1, [r4, #28]
 8005654:	4798      	blx	r3
 8005656:	2800      	cmp	r0, #0
 8005658:	bfb8      	it	lt
 800565a:	f04f 36ff 	movlt.w	r6, #4294967295
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	061b      	lsls	r3, r3, #24
 8005662:	d41c      	bmi.n	800569e <_fclose_r+0x76>
 8005664:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005666:	b141      	cbz	r1, 800567a <_fclose_r+0x52>
 8005668:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800566c:	4299      	cmp	r1, r3
 800566e:	d002      	beq.n	8005676 <_fclose_r+0x4e>
 8005670:	4628      	mov	r0, r5
 8005672:	f000 f93b 	bl	80058ec <_free_r>
 8005676:	2300      	movs	r3, #0
 8005678:	6323      	str	r3, [r4, #48]	; 0x30
 800567a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800567c:	b121      	cbz	r1, 8005688 <_fclose_r+0x60>
 800567e:	4628      	mov	r0, r5
 8005680:	f000 f934 	bl	80058ec <_free_r>
 8005684:	2300      	movs	r3, #0
 8005686:	6463      	str	r3, [r4, #68]	; 0x44
 8005688:	f7ff fbe2 	bl	8004e50 <__sfp_lock_acquire>
 800568c:	2300      	movs	r3, #0
 800568e:	81a3      	strh	r3, [r4, #12]
 8005690:	f7ff fbe0 	bl	8004e54 <__sfp_lock_release>
 8005694:	4630      	mov	r0, r6
 8005696:	bd70      	pop	{r4, r5, r6, pc}
 8005698:	f7ff fb1a 	bl	8004cd0 <__sinit>
 800569c:	e7cc      	b.n	8005638 <_fclose_r+0x10>
 800569e:	4628      	mov	r0, r5
 80056a0:	6921      	ldr	r1, [r4, #16]
 80056a2:	f000 f923 	bl	80058ec <_free_r>
 80056a6:	e7dd      	b.n	8005664 <_fclose_r+0x3c>

080056a8 <fclose>:
 80056a8:	4b02      	ldr	r3, [pc, #8]	; (80056b4 <fclose+0xc>)
 80056aa:	4601      	mov	r1, r0
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	f7ff bfbb 	b.w	8005628 <_fclose_r>
 80056b2:	bf00      	nop
 80056b4:	20000748 	.word	0x20000748

080056b8 <__sflush_r>:
 80056b8:	898b      	ldrh	r3, [r1, #12]
 80056ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056be:	b29a      	uxth	r2, r3
 80056c0:	460d      	mov	r5, r1
 80056c2:	0711      	lsls	r1, r2, #28
 80056c4:	4680      	mov	r8, r0
 80056c6:	d43c      	bmi.n	8005742 <__sflush_r+0x8a>
 80056c8:	686a      	ldr	r2, [r5, #4]
 80056ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056ce:	2a00      	cmp	r2, #0
 80056d0:	81ab      	strh	r3, [r5, #12]
 80056d2:	dd59      	ble.n	8005788 <__sflush_r+0xd0>
 80056d4:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80056d6:	2c00      	cmp	r4, #0
 80056d8:	d04b      	beq.n	8005772 <__sflush_r+0xba>
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80056e0:	2100      	movs	r1, #0
 80056e2:	b292      	uxth	r2, r2
 80056e4:	f8d8 6000 	ldr.w	r6, [r8]
 80056e8:	f8c8 1000 	str.w	r1, [r8]
 80056ec:	2a00      	cmp	r2, #0
 80056ee:	d04f      	beq.n	8005790 <__sflush_r+0xd8>
 80056f0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80056f2:	075f      	lsls	r7, r3, #29
 80056f4:	d505      	bpl.n	8005702 <__sflush_r+0x4a>
 80056f6:	6869      	ldr	r1, [r5, #4]
 80056f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80056fa:	1a52      	subs	r2, r2, r1
 80056fc:	b10b      	cbz	r3, 8005702 <__sflush_r+0x4a>
 80056fe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005700:	1ad2      	subs	r2, r2, r3
 8005702:	4640      	mov	r0, r8
 8005704:	69e9      	ldr	r1, [r5, #28]
 8005706:	2300      	movs	r3, #0
 8005708:	47a0      	blx	r4
 800570a:	1c44      	adds	r4, r0, #1
 800570c:	d04a      	beq.n	80057a4 <__sflush_r+0xec>
 800570e:	89ab      	ldrh	r3, [r5, #12]
 8005710:	692a      	ldr	r2, [r5, #16]
 8005712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005716:	b29b      	uxth	r3, r3
 8005718:	2100      	movs	r1, #0
 800571a:	602a      	str	r2, [r5, #0]
 800571c:	04da      	lsls	r2, r3, #19
 800571e:	81ab      	strh	r3, [r5, #12]
 8005720:	6069      	str	r1, [r5, #4]
 8005722:	d44c      	bmi.n	80057be <__sflush_r+0x106>
 8005724:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005726:	f8c8 6000 	str.w	r6, [r8]
 800572a:	b311      	cbz	r1, 8005772 <__sflush_r+0xba>
 800572c:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8005730:	4299      	cmp	r1, r3
 8005732:	d002      	beq.n	800573a <__sflush_r+0x82>
 8005734:	4640      	mov	r0, r8
 8005736:	f000 f8d9 	bl	80058ec <_free_r>
 800573a:	2000      	movs	r0, #0
 800573c:	6328      	str	r0, [r5, #48]	; 0x30
 800573e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005742:	692e      	ldr	r6, [r5, #16]
 8005744:	b1ae      	cbz	r6, 8005772 <__sflush_r+0xba>
 8005746:	0791      	lsls	r1, r2, #30
 8005748:	682c      	ldr	r4, [r5, #0]
 800574a:	bf0c      	ite	eq
 800574c:	696b      	ldreq	r3, [r5, #20]
 800574e:	2300      	movne	r3, #0
 8005750:	602e      	str	r6, [r5, #0]
 8005752:	1ba4      	subs	r4, r4, r6
 8005754:	60ab      	str	r3, [r5, #8]
 8005756:	e00a      	b.n	800576e <__sflush_r+0xb6>
 8005758:	4632      	mov	r2, r6
 800575a:	4623      	mov	r3, r4
 800575c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800575e:	4640      	mov	r0, r8
 8005760:	69e9      	ldr	r1, [r5, #28]
 8005762:	47b8      	blx	r7
 8005764:	2800      	cmp	r0, #0
 8005766:	ebc0 0404 	rsb	r4, r0, r4
 800576a:	4406      	add	r6, r0
 800576c:	dd04      	ble.n	8005778 <__sflush_r+0xc0>
 800576e:	2c00      	cmp	r4, #0
 8005770:	dcf2      	bgt.n	8005758 <__sflush_r+0xa0>
 8005772:	2000      	movs	r0, #0
 8005774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005778:	89ab      	ldrh	r3, [r5, #12]
 800577a:	f04f 30ff 	mov.w	r0, #4294967295
 800577e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005782:	81ab      	strh	r3, [r5, #12]
 8005784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005788:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800578a:	2a00      	cmp	r2, #0
 800578c:	dca2      	bgt.n	80056d4 <__sflush_r+0x1c>
 800578e:	e7f0      	b.n	8005772 <__sflush_r+0xba>
 8005790:	2301      	movs	r3, #1
 8005792:	4640      	mov	r0, r8
 8005794:	69e9      	ldr	r1, [r5, #28]
 8005796:	47a0      	blx	r4
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	4602      	mov	r2, r0
 800579c:	d01e      	beq.n	80057dc <__sflush_r+0x124>
 800579e:	89ab      	ldrh	r3, [r5, #12]
 80057a0:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80057a2:	e7a6      	b.n	80056f2 <__sflush_r+0x3a>
 80057a4:	f8d8 3000 	ldr.w	r3, [r8]
 80057a8:	b95b      	cbnz	r3, 80057c2 <__sflush_r+0x10a>
 80057aa:	89aa      	ldrh	r2, [r5, #12]
 80057ac:	6929      	ldr	r1, [r5, #16]
 80057ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057b2:	b292      	uxth	r2, r2
 80057b4:	606b      	str	r3, [r5, #4]
 80057b6:	04d3      	lsls	r3, r2, #19
 80057b8:	81aa      	strh	r2, [r5, #12]
 80057ba:	6029      	str	r1, [r5, #0]
 80057bc:	d5b2      	bpl.n	8005724 <__sflush_r+0x6c>
 80057be:	6528      	str	r0, [r5, #80]	; 0x50
 80057c0:	e7b0      	b.n	8005724 <__sflush_r+0x6c>
 80057c2:	2b1d      	cmp	r3, #29
 80057c4:	d001      	beq.n	80057ca <__sflush_r+0x112>
 80057c6:	2b16      	cmp	r3, #22
 80057c8:	d113      	bne.n	80057f2 <__sflush_r+0x13a>
 80057ca:	89a9      	ldrh	r1, [r5, #12]
 80057cc:	692b      	ldr	r3, [r5, #16]
 80057ce:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80057d2:	2200      	movs	r2, #0
 80057d4:	81a9      	strh	r1, [r5, #12]
 80057d6:	602b      	str	r3, [r5, #0]
 80057d8:	606a      	str	r2, [r5, #4]
 80057da:	e7a3      	b.n	8005724 <__sflush_r+0x6c>
 80057dc:	f8d8 3000 	ldr.w	r3, [r8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0dc      	beq.n	800579e <__sflush_r+0xe6>
 80057e4:	2b1d      	cmp	r3, #29
 80057e6:	d001      	beq.n	80057ec <__sflush_r+0x134>
 80057e8:	2b16      	cmp	r3, #22
 80057ea:	d1c5      	bne.n	8005778 <__sflush_r+0xc0>
 80057ec:	f8c8 6000 	str.w	r6, [r8]
 80057f0:	e7bf      	b.n	8005772 <__sflush_r+0xba>
 80057f2:	89ab      	ldrh	r3, [r5, #12]
 80057f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f8:	81ab      	strh	r3, [r5, #12]
 80057fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057fe:	bf00      	nop

08005800 <_fflush_r>:
 8005800:	b510      	push	{r4, lr}
 8005802:	4604      	mov	r4, r0
 8005804:	b082      	sub	sp, #8
 8005806:	b108      	cbz	r0, 800580c <_fflush_r+0xc>
 8005808:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800580a:	b153      	cbz	r3, 8005822 <_fflush_r+0x22>
 800580c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8005810:	b908      	cbnz	r0, 8005816 <_fflush_r+0x16>
 8005812:	b002      	add	sp, #8
 8005814:	bd10      	pop	{r4, pc}
 8005816:	4620      	mov	r0, r4
 8005818:	b002      	add	sp, #8
 800581a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800581e:	f7ff bf4b 	b.w	80056b8 <__sflush_r>
 8005822:	9101      	str	r1, [sp, #4]
 8005824:	f7ff fa54 	bl	8004cd0 <__sinit>
 8005828:	9901      	ldr	r1, [sp, #4]
 800582a:	e7ef      	b.n	800580c <_fflush_r+0xc>

0800582c <fflush>:
 800582c:	b120      	cbz	r0, 8005838 <fflush+0xc>
 800582e:	4b05      	ldr	r3, [pc, #20]	; (8005844 <fflush+0x18>)
 8005830:	4601      	mov	r1, r0
 8005832:	6818      	ldr	r0, [r3, #0]
 8005834:	f7ff bfe4 	b.w	8005800 <_fflush_r>
 8005838:	4b03      	ldr	r3, [pc, #12]	; (8005848 <fflush+0x1c>)
 800583a:	4904      	ldr	r1, [pc, #16]	; (800584c <fflush+0x20>)
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	f7ff bb47 	b.w	8004ed0 <_fwalk_reent>
 8005842:	bf00      	nop
 8005844:	20000748 	.word	0x20000748
 8005848:	080065b4 	.word	0x080065b4
 800584c:	08005801 	.word	0x08005801

08005850 <_malloc_trim_r>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	4d23      	ldr	r5, [pc, #140]	; (80058e0 <_malloc_trim_r+0x90>)
 8005854:	460f      	mov	r7, r1
 8005856:	4604      	mov	r4, r0
 8005858:	f7ff fdfc 	bl	8005454 <__malloc_lock>
 800585c:	68ab      	ldr	r3, [r5, #8]
 800585e:	685e      	ldr	r6, [r3, #4]
 8005860:	f026 0603 	bic.w	r6, r6, #3
 8005864:	1bf1      	subs	r1, r6, r7
 8005866:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800586a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800586e:	f021 010f 	bic.w	r1, r1, #15
 8005872:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
 8005876:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800587a:	db07      	blt.n	800588c <_malloc_trim_r+0x3c>
 800587c:	4620      	mov	r0, r4
 800587e:	2100      	movs	r1, #0
 8005880:	f7ff fe24 	bl	80054cc <_sbrk_r>
 8005884:	68ab      	ldr	r3, [r5, #8]
 8005886:	4433      	add	r3, r6
 8005888:	4298      	cmp	r0, r3
 800588a:	d004      	beq.n	8005896 <_malloc_trim_r+0x46>
 800588c:	4620      	mov	r0, r4
 800588e:	f7ff fde3 	bl	8005458 <__malloc_unlock>
 8005892:	2000      	movs	r0, #0
 8005894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005896:	4620      	mov	r0, r4
 8005898:	4279      	negs	r1, r7
 800589a:	f7ff fe17 	bl	80054cc <_sbrk_r>
 800589e:	3001      	adds	r0, #1
 80058a0:	d00d      	beq.n	80058be <_malloc_trim_r+0x6e>
 80058a2:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <_malloc_trim_r+0x94>)
 80058a4:	68aa      	ldr	r2, [r5, #8]
 80058a6:	6819      	ldr	r1, [r3, #0]
 80058a8:	1bf6      	subs	r6, r6, r7
 80058aa:	f046 0601 	orr.w	r6, r6, #1
 80058ae:	4620      	mov	r0, r4
 80058b0:	1bc9      	subs	r1, r1, r7
 80058b2:	6056      	str	r6, [r2, #4]
 80058b4:	6019      	str	r1, [r3, #0]
 80058b6:	f7ff fdcf 	bl	8005458 <__malloc_unlock>
 80058ba:	2001      	movs	r0, #1
 80058bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058be:	4620      	mov	r0, r4
 80058c0:	2100      	movs	r1, #0
 80058c2:	f7ff fe03 	bl	80054cc <_sbrk_r>
 80058c6:	68ab      	ldr	r3, [r5, #8]
 80058c8:	1ac2      	subs	r2, r0, r3
 80058ca:	2a0f      	cmp	r2, #15
 80058cc:	ddde      	ble.n	800588c <_malloc_trim_r+0x3c>
 80058ce:	4d06      	ldr	r5, [pc, #24]	; (80058e8 <_malloc_trim_r+0x98>)
 80058d0:	4904      	ldr	r1, [pc, #16]	; (80058e4 <_malloc_trim_r+0x94>)
 80058d2:	682d      	ldr	r5, [r5, #0]
 80058d4:	f042 0201 	orr.w	r2, r2, #1
 80058d8:	1b40      	subs	r0, r0, r5
 80058da:	605a      	str	r2, [r3, #4]
 80058dc:	6008      	str	r0, [r1, #0]
 80058de:	e7d5      	b.n	800588c <_malloc_trim_r+0x3c>
 80058e0:	2000074c 	.word	0x2000074c
 80058e4:	20000c44 	.word	0x20000c44
 80058e8:	20000b58 	.word	0x20000b58

080058ec <_free_r>:
 80058ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f0:	460d      	mov	r5, r1
 80058f2:	4606      	mov	r6, r0
 80058f4:	2900      	cmp	r1, #0
 80058f6:	d055      	beq.n	80059a4 <_free_r+0xb8>
 80058f8:	f7ff fdac 	bl	8005454 <__malloc_lock>
 80058fc:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8005900:	f8df c170 	ldr.w	ip, [pc, #368]	; 8005a74 <_free_r+0x188>
 8005904:	f1a5 0408 	sub.w	r4, r5, #8
 8005908:	f021 0301 	bic.w	r3, r1, #1
 800590c:	18e2      	adds	r2, r4, r3
 800590e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8005912:	6857      	ldr	r7, [r2, #4]
 8005914:	4290      	cmp	r0, r2
 8005916:	f027 0703 	bic.w	r7, r7, #3
 800591a:	d068      	beq.n	80059ee <_free_r+0x102>
 800591c:	f011 0101 	ands.w	r1, r1, #1
 8005920:	6057      	str	r7, [r2, #4]
 8005922:	d032      	beq.n	800598a <_free_r+0x9e>
 8005924:	2100      	movs	r1, #0
 8005926:	19d0      	adds	r0, r2, r7
 8005928:	6840      	ldr	r0, [r0, #4]
 800592a:	07c0      	lsls	r0, r0, #31
 800592c:	d406      	bmi.n	800593c <_free_r+0x50>
 800592e:	443b      	add	r3, r7
 8005930:	6890      	ldr	r0, [r2, #8]
 8005932:	2900      	cmp	r1, #0
 8005934:	d04d      	beq.n	80059d2 <_free_r+0xe6>
 8005936:	68d2      	ldr	r2, [r2, #12]
 8005938:	60c2      	str	r2, [r0, #12]
 800593a:	6090      	str	r0, [r2, #8]
 800593c:	f043 0201 	orr.w	r2, r3, #1
 8005940:	6062      	str	r2, [r4, #4]
 8005942:	50e3      	str	r3, [r4, r3]
 8005944:	b9e1      	cbnz	r1, 8005980 <_free_r+0x94>
 8005946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594a:	d32d      	bcc.n	80059a8 <_free_r+0xbc>
 800594c:	0a5a      	lsrs	r2, r3, #9
 800594e:	2a04      	cmp	r2, #4
 8005950:	d869      	bhi.n	8005a26 <_free_r+0x13a>
 8005952:	0998      	lsrs	r0, r3, #6
 8005954:	3038      	adds	r0, #56	; 0x38
 8005956:	0041      	lsls	r1, r0, #1
 8005958:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
 800595c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8005960:	4944      	ldr	r1, [pc, #272]	; (8005a74 <_free_r+0x188>)
 8005962:	4562      	cmp	r2, ip
 8005964:	d065      	beq.n	8005a32 <_free_r+0x146>
 8005966:	6851      	ldr	r1, [r2, #4]
 8005968:	f021 0103 	bic.w	r1, r1, #3
 800596c:	428b      	cmp	r3, r1
 800596e:	d202      	bcs.n	8005976 <_free_r+0x8a>
 8005970:	6892      	ldr	r2, [r2, #8]
 8005972:	4594      	cmp	ip, r2
 8005974:	d1f7      	bne.n	8005966 <_free_r+0x7a>
 8005976:	68d3      	ldr	r3, [r2, #12]
 8005978:	60e3      	str	r3, [r4, #12]
 800597a:	60a2      	str	r2, [r4, #8]
 800597c:	609c      	str	r4, [r3, #8]
 800597e:	60d4      	str	r4, [r2, #12]
 8005980:	4630      	mov	r0, r6
 8005982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005986:	f7ff bd67 	b.w	8005458 <__malloc_unlock>
 800598a:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800598e:	f10c 0808 	add.w	r8, ip, #8
 8005992:	1b64      	subs	r4, r4, r5
 8005994:	68a0      	ldr	r0, [r4, #8]
 8005996:	442b      	add	r3, r5
 8005998:	4540      	cmp	r0, r8
 800599a:	d042      	beq.n	8005a22 <_free_r+0x136>
 800599c:	68e5      	ldr	r5, [r4, #12]
 800599e:	60c5      	str	r5, [r0, #12]
 80059a0:	60a8      	str	r0, [r5, #8]
 80059a2:	e7c0      	b.n	8005926 <_free_r+0x3a>
 80059a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a8:	08db      	lsrs	r3, r3, #3
 80059aa:	109a      	asrs	r2, r3, #2
 80059ac:	2001      	movs	r0, #1
 80059ae:	4090      	lsls	r0, r2
 80059b0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80059b4:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	4301      	orrs	r1, r0
 80059bc:	60a2      	str	r2, [r4, #8]
 80059be:	60e3      	str	r3, [r4, #12]
 80059c0:	f8cc 1004 	str.w	r1, [ip, #4]
 80059c4:	4630      	mov	r0, r6
 80059c6:	609c      	str	r4, [r3, #8]
 80059c8:	60d4      	str	r4, [r2, #12]
 80059ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059ce:	f7ff bd43 	b.w	8005458 <__malloc_unlock>
 80059d2:	4d29      	ldr	r5, [pc, #164]	; (8005a78 <_free_r+0x18c>)
 80059d4:	42a8      	cmp	r0, r5
 80059d6:	d1ae      	bne.n	8005936 <_free_r+0x4a>
 80059d8:	f043 0201 	orr.w	r2, r3, #1
 80059dc:	f8cc 4014 	str.w	r4, [ip, #20]
 80059e0:	f8cc 4010 	str.w	r4, [ip, #16]
 80059e4:	60e0      	str	r0, [r4, #12]
 80059e6:	60a0      	str	r0, [r4, #8]
 80059e8:	6062      	str	r2, [r4, #4]
 80059ea:	50e3      	str	r3, [r4, r3]
 80059ec:	e7c8      	b.n	8005980 <_free_r+0x94>
 80059ee:	441f      	add	r7, r3
 80059f0:	07cb      	lsls	r3, r1, #31
 80059f2:	d407      	bmi.n	8005a04 <_free_r+0x118>
 80059f4:	f855 1c08 	ldr.w	r1, [r5, #-8]
 80059f8:	1a64      	subs	r4, r4, r1
 80059fa:	68e3      	ldr	r3, [r4, #12]
 80059fc:	68a2      	ldr	r2, [r4, #8]
 80059fe:	440f      	add	r7, r1
 8005a00:	60d3      	str	r3, [r2, #12]
 8005a02:	609a      	str	r2, [r3, #8]
 8005a04:	4b1d      	ldr	r3, [pc, #116]	; (8005a7c <_free_r+0x190>)
 8005a06:	f047 0201 	orr.w	r2, r7, #1
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6062      	str	r2, [r4, #4]
 8005a0e:	429f      	cmp	r7, r3
 8005a10:	f8cc 4008 	str.w	r4, [ip, #8]
 8005a14:	d3b4      	bcc.n	8005980 <_free_r+0x94>
 8005a16:	4b1a      	ldr	r3, [pc, #104]	; (8005a80 <_free_r+0x194>)
 8005a18:	4630      	mov	r0, r6
 8005a1a:	6819      	ldr	r1, [r3, #0]
 8005a1c:	f7ff ff18 	bl	8005850 <_malloc_trim_r>
 8005a20:	e7ae      	b.n	8005980 <_free_r+0x94>
 8005a22:	2101      	movs	r1, #1
 8005a24:	e77f      	b.n	8005926 <_free_r+0x3a>
 8005a26:	2a14      	cmp	r2, #20
 8005a28:	d80b      	bhi.n	8005a42 <_free_r+0x156>
 8005a2a:	f102 005b 	add.w	r0, r2, #91	; 0x5b
 8005a2e:	0041      	lsls	r1, r0, #1
 8005a30:	e792      	b.n	8005958 <_free_r+0x6c>
 8005a32:	1080      	asrs	r0, r0, #2
 8005a34:	2501      	movs	r5, #1
 8005a36:	4085      	lsls	r5, r0
 8005a38:	6848      	ldr	r0, [r1, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	4328      	orrs	r0, r5
 8005a3e:	6048      	str	r0, [r1, #4]
 8005a40:	e79a      	b.n	8005978 <_free_r+0x8c>
 8005a42:	2a54      	cmp	r2, #84	; 0x54
 8005a44:	d803      	bhi.n	8005a4e <_free_r+0x162>
 8005a46:	0b18      	lsrs	r0, r3, #12
 8005a48:	306e      	adds	r0, #110	; 0x6e
 8005a4a:	0041      	lsls	r1, r0, #1
 8005a4c:	e784      	b.n	8005958 <_free_r+0x6c>
 8005a4e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005a52:	d803      	bhi.n	8005a5c <_free_r+0x170>
 8005a54:	0bd8      	lsrs	r0, r3, #15
 8005a56:	3077      	adds	r0, #119	; 0x77
 8005a58:	0041      	lsls	r1, r0, #1
 8005a5a:	e77d      	b.n	8005958 <_free_r+0x6c>
 8005a5c:	f240 5154 	movw	r1, #1364	; 0x554
 8005a60:	428a      	cmp	r2, r1
 8005a62:	d803      	bhi.n	8005a6c <_free_r+0x180>
 8005a64:	0c98      	lsrs	r0, r3, #18
 8005a66:	307c      	adds	r0, #124	; 0x7c
 8005a68:	0041      	lsls	r1, r0, #1
 8005a6a:	e775      	b.n	8005958 <_free_r+0x6c>
 8005a6c:	21fc      	movs	r1, #252	; 0xfc
 8005a6e:	207e      	movs	r0, #126	; 0x7e
 8005a70:	e772      	b.n	8005958 <_free_r+0x6c>
 8005a72:	bf00      	nop
 8005a74:	2000074c 	.word	0x2000074c
 8005a78:	20000754 	.word	0x20000754
 8005a7c:	20000b54 	.word	0x20000b54
 8005a80:	20000c40 	.word	0x20000c40

08005a84 <__sfvwrite_r>:
 8005a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a88:	6893      	ldr	r3, [r2, #8]
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	4616      	mov	r6, r2
 8005a8e:	4681      	mov	r9, r0
 8005a90:	460c      	mov	r4, r1
 8005a92:	b32b      	cbz	r3, 8005ae0 <__sfvwrite_r+0x5c>
 8005a94:	898b      	ldrh	r3, [r1, #12]
 8005a96:	0719      	lsls	r1, r3, #28
 8005a98:	d526      	bpl.n	8005ae8 <__sfvwrite_r+0x64>
 8005a9a:	6922      	ldr	r2, [r4, #16]
 8005a9c:	b322      	cbz	r2, 8005ae8 <__sfvwrite_r+0x64>
 8005a9e:	f003 0202 	and.w	r2, r3, #2
 8005aa2:	b292      	uxth	r2, r2
 8005aa4:	6835      	ldr	r5, [r6, #0]
 8005aa6:	2a00      	cmp	r2, #0
 8005aa8:	d02c      	beq.n	8005b04 <__sfvwrite_r+0x80>
 8005aaa:	f04f 0a00 	mov.w	sl, #0
 8005aae:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 8005d94 <__sfvwrite_r+0x310>
 8005ab2:	46d0      	mov	r8, sl
 8005ab4:	45d8      	cmp	r8, fp
 8005ab6:	bf34      	ite	cc
 8005ab8:	4643      	movcc	r3, r8
 8005aba:	465b      	movcs	r3, fp
 8005abc:	4652      	mov	r2, sl
 8005abe:	4648      	mov	r0, r9
 8005ac0:	f1b8 0f00 	cmp.w	r8, #0
 8005ac4:	d04f      	beq.n	8005b66 <__sfvwrite_r+0xe2>
 8005ac6:	69e1      	ldr	r1, [r4, #28]
 8005ac8:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005aca:	47b8      	blx	r7
 8005acc:	2800      	cmp	r0, #0
 8005ace:	dd56      	ble.n	8005b7e <__sfvwrite_r+0xfa>
 8005ad0:	68b3      	ldr	r3, [r6, #8]
 8005ad2:	4482      	add	sl, r0
 8005ad4:	1a1b      	subs	r3, r3, r0
 8005ad6:	ebc0 0808 	rsb	r8, r0, r8
 8005ada:	60b3      	str	r3, [r6, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e9      	bne.n	8005ab4 <__sfvwrite_r+0x30>
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	b003      	add	sp, #12
 8005ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae8:	4648      	mov	r0, r9
 8005aea:	4621      	mov	r1, r4
 8005aec:	f000 fc62 	bl	80063b4 <__swsetup_r>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	f040 8146 	bne.w	8005d82 <__sfvwrite_r+0x2fe>
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	6835      	ldr	r5, [r6, #0]
 8005afa:	f003 0202 	and.w	r2, r3, #2
 8005afe:	b292      	uxth	r2, r2
 8005b00:	2a00      	cmp	r2, #0
 8005b02:	d1d2      	bne.n	8005aaa <__sfvwrite_r+0x26>
 8005b04:	f013 0a01 	ands.w	sl, r3, #1
 8005b08:	d142      	bne.n	8005b90 <__sfvwrite_r+0x10c>
 8005b0a:	46d0      	mov	r8, sl
 8005b0c:	f1b8 0f00 	cmp.w	r8, #0
 8005b10:	d023      	beq.n	8005b5a <__sfvwrite_r+0xd6>
 8005b12:	059a      	lsls	r2, r3, #22
 8005b14:	68a7      	ldr	r7, [r4, #8]
 8005b16:	d576      	bpl.n	8005c06 <__sfvwrite_r+0x182>
 8005b18:	45b8      	cmp	r8, r7
 8005b1a:	f0c0 80a4 	bcc.w	8005c66 <__sfvwrite_r+0x1e2>
 8005b1e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8005b22:	f040 80b2 	bne.w	8005c8a <__sfvwrite_r+0x206>
 8005b26:	6820      	ldr	r0, [r4, #0]
 8005b28:	46bb      	mov	fp, r7
 8005b2a:	4651      	mov	r1, sl
 8005b2c:	465a      	mov	r2, fp
 8005b2e:	f000 f991 	bl	8005e54 <memmove>
 8005b32:	68a2      	ldr	r2, [r4, #8]
 8005b34:	6821      	ldr	r1, [r4, #0]
 8005b36:	1bd2      	subs	r2, r2, r7
 8005b38:	eb01 030b 	add.w	r3, r1, fp
 8005b3c:	60a2      	str	r2, [r4, #8]
 8005b3e:	6023      	str	r3, [r4, #0]
 8005b40:	4642      	mov	r2, r8
 8005b42:	68b3      	ldr	r3, [r6, #8]
 8005b44:	4492      	add	sl, r2
 8005b46:	1a9b      	subs	r3, r3, r2
 8005b48:	ebc2 0808 	rsb	r8, r2, r8
 8005b4c:	60b3      	str	r3, [r6, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0c6      	beq.n	8005ae0 <__sfvwrite_r+0x5c>
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	f1b8 0f00 	cmp.w	r8, #0
 8005b58:	d1db      	bne.n	8005b12 <__sfvwrite_r+0x8e>
 8005b5a:	f8d5 a000 	ldr.w	sl, [r5]
 8005b5e:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005b62:	3508      	adds	r5, #8
 8005b64:	e7d2      	b.n	8005b0c <__sfvwrite_r+0x88>
 8005b66:	f8d5 a000 	ldr.w	sl, [r5]
 8005b6a:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005b6e:	3508      	adds	r5, #8
 8005b70:	e7a0      	b.n	8005ab4 <__sfvwrite_r+0x30>
 8005b72:	4648      	mov	r0, r9
 8005b74:	4621      	mov	r1, r4
 8005b76:	f7ff fe43 	bl	8005800 <_fflush_r>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d059      	beq.n	8005c32 <__sfvwrite_r+0x1ae>
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	81a3      	strh	r3, [r4, #12]
 8005b8a:	b003      	add	sp, #12
 8005b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b90:	4692      	mov	sl, r2
 8005b92:	9201      	str	r2, [sp, #4]
 8005b94:	4693      	mov	fp, r2
 8005b96:	4690      	mov	r8, r2
 8005b98:	f1b8 0f00 	cmp.w	r8, #0
 8005b9c:	d02b      	beq.n	8005bf6 <__sfvwrite_r+0x172>
 8005b9e:	9f01      	ldr	r7, [sp, #4]
 8005ba0:	2f00      	cmp	r7, #0
 8005ba2:	d064      	beq.n	8005c6e <__sfvwrite_r+0x1ea>
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	6921      	ldr	r1, [r4, #16]
 8005ba8:	45c2      	cmp	sl, r8
 8005baa:	bf34      	ite	cc
 8005bac:	4653      	movcc	r3, sl
 8005bae:	4643      	movcs	r3, r8
 8005bb0:	4288      	cmp	r0, r1
 8005bb2:	461f      	mov	r7, r3
 8005bb4:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8005bb8:	6962      	ldr	r2, [r4, #20]
 8005bba:	d903      	bls.n	8005bc4 <__sfvwrite_r+0x140>
 8005bbc:	4494      	add	ip, r2
 8005bbe:	4563      	cmp	r3, ip
 8005bc0:	f300 80ae 	bgt.w	8005d20 <__sfvwrite_r+0x29c>
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	db36      	blt.n	8005c36 <__sfvwrite_r+0x1b2>
 8005bc8:	4613      	mov	r3, r2
 8005bca:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005bcc:	4648      	mov	r0, r9
 8005bce:	69e1      	ldr	r1, [r4, #28]
 8005bd0:	465a      	mov	r2, fp
 8005bd2:	47b8      	blx	r7
 8005bd4:	1e07      	subs	r7, r0, #0
 8005bd6:	ddd2      	ble.n	8005b7e <__sfvwrite_r+0xfa>
 8005bd8:	ebba 0a07 	subs.w	sl, sl, r7
 8005bdc:	d03a      	beq.n	8005c54 <__sfvwrite_r+0x1d0>
 8005bde:	68b3      	ldr	r3, [r6, #8]
 8005be0:	44bb      	add	fp, r7
 8005be2:	1bdb      	subs	r3, r3, r7
 8005be4:	ebc7 0808 	rsb	r8, r7, r8
 8005be8:	60b3      	str	r3, [r6, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f43f af78 	beq.w	8005ae0 <__sfvwrite_r+0x5c>
 8005bf0:	f1b8 0f00 	cmp.w	r8, #0
 8005bf4:	d1d3      	bne.n	8005b9e <__sfvwrite_r+0x11a>
 8005bf6:	2700      	movs	r7, #0
 8005bf8:	f8d5 b000 	ldr.w	fp, [r5]
 8005bfc:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005c00:	9701      	str	r7, [sp, #4]
 8005c02:	3508      	adds	r5, #8
 8005c04:	e7c8      	b.n	8005b98 <__sfvwrite_r+0x114>
 8005c06:	6820      	ldr	r0, [r4, #0]
 8005c08:	6923      	ldr	r3, [r4, #16]
 8005c0a:	4298      	cmp	r0, r3
 8005c0c:	d802      	bhi.n	8005c14 <__sfvwrite_r+0x190>
 8005c0e:	6963      	ldr	r3, [r4, #20]
 8005c10:	4598      	cmp	r8, r3
 8005c12:	d272      	bcs.n	8005cfa <__sfvwrite_r+0x276>
 8005c14:	45b8      	cmp	r8, r7
 8005c16:	bf38      	it	cc
 8005c18:	4647      	movcc	r7, r8
 8005c1a:	463a      	mov	r2, r7
 8005c1c:	4651      	mov	r1, sl
 8005c1e:	f000 f919 	bl	8005e54 <memmove>
 8005c22:	68a3      	ldr	r3, [r4, #8]
 8005c24:	6822      	ldr	r2, [r4, #0]
 8005c26:	1bdb      	subs	r3, r3, r7
 8005c28:	443a      	add	r2, r7
 8005c2a:	60a3      	str	r3, [r4, #8]
 8005c2c:	6022      	str	r2, [r4, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d09f      	beq.n	8005b72 <__sfvwrite_r+0xee>
 8005c32:	463a      	mov	r2, r7
 8005c34:	e785      	b.n	8005b42 <__sfvwrite_r+0xbe>
 8005c36:	461a      	mov	r2, r3
 8005c38:	4659      	mov	r1, fp
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	f000 f90a 	bl	8005e54 <memmove>
 8005c40:	9b00      	ldr	r3, [sp, #0]
 8005c42:	68a1      	ldr	r1, [r4, #8]
 8005c44:	6822      	ldr	r2, [r4, #0]
 8005c46:	1ac9      	subs	r1, r1, r3
 8005c48:	ebba 0a07 	subs.w	sl, sl, r7
 8005c4c:	4413      	add	r3, r2
 8005c4e:	60a1      	str	r1, [r4, #8]
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	d1c4      	bne.n	8005bde <__sfvwrite_r+0x15a>
 8005c54:	4648      	mov	r0, r9
 8005c56:	4621      	mov	r1, r4
 8005c58:	f7ff fdd2 	bl	8005800 <_fflush_r>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d18e      	bne.n	8005b7e <__sfvwrite_r+0xfa>
 8005c60:	f8cd a004 	str.w	sl, [sp, #4]
 8005c64:	e7bb      	b.n	8005bde <__sfvwrite_r+0x15a>
 8005c66:	6820      	ldr	r0, [r4, #0]
 8005c68:	4647      	mov	r7, r8
 8005c6a:	46c3      	mov	fp, r8
 8005c6c:	e75d      	b.n	8005b2a <__sfvwrite_r+0xa6>
 8005c6e:	4658      	mov	r0, fp
 8005c70:	210a      	movs	r1, #10
 8005c72:	4642      	mov	r2, r8
 8005c74:	f000 f8a4 	bl	8005dc0 <memchr>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	d07d      	beq.n	8005d78 <__sfvwrite_r+0x2f4>
 8005c7c:	f100 0a01 	add.w	sl, r0, #1
 8005c80:	2701      	movs	r7, #1
 8005c82:	ebcb 0a0a 	rsb	sl, fp, sl
 8005c86:	9701      	str	r7, [sp, #4]
 8005c88:	e78c      	b.n	8005ba4 <__sfvwrite_r+0x120>
 8005c8a:	6822      	ldr	r2, [r4, #0]
 8005c8c:	6921      	ldr	r1, [r4, #16]
 8005c8e:	6967      	ldr	r7, [r4, #20]
 8005c90:	ebc1 0c02 	rsb	ip, r1, r2
 8005c94:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8005c98:	f10c 0201 	add.w	r2, ip, #1
 8005c9c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8005ca0:	4442      	add	r2, r8
 8005ca2:	107f      	asrs	r7, r7, #1
 8005ca4:	4297      	cmp	r7, r2
 8005ca6:	bf34      	ite	cc
 8005ca8:	4617      	movcc	r7, r2
 8005caa:	463a      	movcs	r2, r7
 8005cac:	055b      	lsls	r3, r3, #21
 8005cae:	d54d      	bpl.n	8005d4c <__sfvwrite_r+0x2c8>
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4648      	mov	r0, r9
 8005cb4:	f8cd c000 	str.w	ip, [sp]
 8005cb8:	f7ff f930 	bl	8004f1c <_malloc_r>
 8005cbc:	f8dd c000 	ldr.w	ip, [sp]
 8005cc0:	4683      	mov	fp, r0
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d060      	beq.n	8005d88 <__sfvwrite_r+0x304>
 8005cc6:	4662      	mov	r2, ip
 8005cc8:	6921      	ldr	r1, [r4, #16]
 8005cca:	f8cd c000 	str.w	ip, [sp]
 8005cce:	f7fd fc71 	bl	80035b4 <memcpy>
 8005cd2:	89a2      	ldrh	r2, [r4, #12]
 8005cd4:	f8dd c000 	ldr.w	ip, [sp]
 8005cd8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8005cdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ce0:	81a2      	strh	r2, [r4, #12]
 8005ce2:	eb0b 000c 	add.w	r0, fp, ip
 8005ce6:	ebcc 0207 	rsb	r2, ip, r7
 8005cea:	f8c4 b010 	str.w	fp, [r4, #16]
 8005cee:	6167      	str	r7, [r4, #20]
 8005cf0:	6020      	str	r0, [r4, #0]
 8005cf2:	60a2      	str	r2, [r4, #8]
 8005cf4:	4647      	mov	r7, r8
 8005cf6:	46c3      	mov	fp, r8
 8005cf8:	e717      	b.n	8005b2a <__sfvwrite_r+0xa6>
 8005cfa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005cfe:	4590      	cmp	r8, r2
 8005d00:	bf38      	it	cc
 8005d02:	4642      	movcc	r2, r8
 8005d04:	fb92 f2f3 	sdiv	r2, r2, r3
 8005d08:	fb02 f303 	mul.w	r3, r2, r3
 8005d0c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005d0e:	4648      	mov	r0, r9
 8005d10:	69e1      	ldr	r1, [r4, #28]
 8005d12:	4652      	mov	r2, sl
 8005d14:	47b8      	blx	r7
 8005d16:	2800      	cmp	r0, #0
 8005d18:	f77f af31 	ble.w	8005b7e <__sfvwrite_r+0xfa>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	e710      	b.n	8005b42 <__sfvwrite_r+0xbe>
 8005d20:	4662      	mov	r2, ip
 8005d22:	4659      	mov	r1, fp
 8005d24:	f8cd c000 	str.w	ip, [sp]
 8005d28:	f000 f894 	bl	8005e54 <memmove>
 8005d2c:	f8dd c000 	ldr.w	ip, [sp]
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	4648      	mov	r0, r9
 8005d34:	4463      	add	r3, ip
 8005d36:	6023      	str	r3, [r4, #0]
 8005d38:	4621      	mov	r1, r4
 8005d3a:	f7ff fd61 	bl	8005800 <_fflush_r>
 8005d3e:	f8dd c000 	ldr.w	ip, [sp]
 8005d42:	2800      	cmp	r0, #0
 8005d44:	f47f af1b 	bne.w	8005b7e <__sfvwrite_r+0xfa>
 8005d48:	4667      	mov	r7, ip
 8005d4a:	e745      	b.n	8005bd8 <__sfvwrite_r+0x154>
 8005d4c:	4648      	mov	r0, r9
 8005d4e:	f8cd c000 	str.w	ip, [sp]
 8005d52:	f000 f8f9 	bl	8005f48 <_realloc_r>
 8005d56:	f8dd c000 	ldr.w	ip, [sp]
 8005d5a:	4683      	mov	fp, r0
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d1c0      	bne.n	8005ce2 <__sfvwrite_r+0x25e>
 8005d60:	4648      	mov	r0, r9
 8005d62:	6921      	ldr	r1, [r4, #16]
 8005d64:	f7ff fdc2 	bl	80058ec <_free_r>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	220c      	movs	r2, #12
 8005d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f8c9 2000 	str.w	r2, [r9]
 8005d76:	e703      	b.n	8005b80 <__sfvwrite_r+0xfc>
 8005d78:	2701      	movs	r7, #1
 8005d7a:	f108 0a01 	add.w	sl, r8, #1
 8005d7e:	9701      	str	r7, [sp, #4]
 8005d80:	e710      	b.n	8005ba4 <__sfvwrite_r+0x120>
 8005d82:	f04f 30ff 	mov.w	r0, #4294967295
 8005d86:	e6ac      	b.n	8005ae2 <__sfvwrite_r+0x5e>
 8005d88:	230c      	movs	r3, #12
 8005d8a:	f8c9 3000 	str.w	r3, [r9]
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	e6f6      	b.n	8005b80 <__sfvwrite_r+0xfc>
 8005d92:	bf00      	nop
 8005d94:	7ffffc00 	.word	0x7ffffc00

08005d98 <_lseek_r>:
 8005d98:	b570      	push	{r4, r5, r6, lr}
 8005d9a:	4c08      	ldr	r4, [pc, #32]	; (8005dbc <_lseek_r+0x24>)
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	2500      	movs	r5, #0
 8005da0:	4608      	mov	r0, r1
 8005da2:	4611      	mov	r1, r2
 8005da4:	461a      	mov	r2, r3
 8005da6:	6025      	str	r5, [r4, #0]
 8005da8:	f7fd fee2 	bl	8003b70 <_lseek>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d000      	beq.n	8005db2 <_lseek_r+0x1a>
 8005db0:	bd70      	pop	{r4, r5, r6, pc}
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0fb      	beq.n	8005db0 <_lseek_r+0x18>
 8005db8:	6033      	str	r3, [r6, #0]
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	20000c70 	.word	0x20000c70

08005dc0 <memchr>:
 8005dc0:	0783      	lsls	r3, r0, #30
 8005dc2:	b470      	push	{r4, r5, r6}
 8005dc4:	b2c9      	uxtb	r1, r1
 8005dc6:	d040      	beq.n	8005e4a <memchr+0x8a>
 8005dc8:	1e54      	subs	r4, r2, #1
 8005dca:	b32a      	cbz	r2, 8005e18 <memchr+0x58>
 8005dcc:	7803      	ldrb	r3, [r0, #0]
 8005dce:	428b      	cmp	r3, r1
 8005dd0:	d023      	beq.n	8005e1a <memchr+0x5a>
 8005dd2:	1c43      	adds	r3, r0, #1
 8005dd4:	e004      	b.n	8005de0 <memchr+0x20>
 8005dd6:	b1fc      	cbz	r4, 8005e18 <memchr+0x58>
 8005dd8:	7805      	ldrb	r5, [r0, #0]
 8005dda:	4614      	mov	r4, r2
 8005ddc:	428d      	cmp	r5, r1
 8005dde:	d01c      	beq.n	8005e1a <memchr+0x5a>
 8005de0:	f013 0f03 	tst.w	r3, #3
 8005de4:	4618      	mov	r0, r3
 8005de6:	f104 32ff 	add.w	r2, r4, #4294967295
 8005dea:	f103 0301 	add.w	r3, r3, #1
 8005dee:	d1f2      	bne.n	8005dd6 <memchr+0x16>
 8005df0:	2c03      	cmp	r4, #3
 8005df2:	d814      	bhi.n	8005e1e <memchr+0x5e>
 8005df4:	1e65      	subs	r5, r4, #1
 8005df6:	b354      	cbz	r4, 8005e4e <memchr+0x8e>
 8005df8:	7803      	ldrb	r3, [r0, #0]
 8005dfa:	428b      	cmp	r3, r1
 8005dfc:	d00d      	beq.n	8005e1a <memchr+0x5a>
 8005dfe:	1c42      	adds	r2, r0, #1
 8005e00:	2300      	movs	r3, #0
 8005e02:	e002      	b.n	8005e0a <memchr+0x4a>
 8005e04:	7804      	ldrb	r4, [r0, #0]
 8005e06:	428c      	cmp	r4, r1
 8005e08:	d007      	beq.n	8005e1a <memchr+0x5a>
 8005e0a:	42ab      	cmp	r3, r5
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	f103 0301 	add.w	r3, r3, #1
 8005e12:	f102 0201 	add.w	r2, r2, #1
 8005e16:	d1f5      	bne.n	8005e04 <memchr+0x44>
 8005e18:	2000      	movs	r0, #0
 8005e1a:	bc70      	pop	{r4, r5, r6}
 8005e1c:	4770      	bx	lr
 8005e1e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8005e22:	4603      	mov	r3, r0
 8005e24:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	4072      	eors	r2, r6
 8005e2e:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8005e32:	ea25 0202 	bic.w	r2, r5, r2
 8005e36:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005e3a:	f103 0304 	add.w	r3, r3, #4
 8005e3e:	d1d9      	bne.n	8005df4 <memchr+0x34>
 8005e40:	3c04      	subs	r4, #4
 8005e42:	2c03      	cmp	r4, #3
 8005e44:	4618      	mov	r0, r3
 8005e46:	d8ef      	bhi.n	8005e28 <memchr+0x68>
 8005e48:	e7d4      	b.n	8005df4 <memchr+0x34>
 8005e4a:	4614      	mov	r4, r2
 8005e4c:	e7d0      	b.n	8005df0 <memchr+0x30>
 8005e4e:	4620      	mov	r0, r4
 8005e50:	e7e3      	b.n	8005e1a <memchr+0x5a>
 8005e52:	bf00      	nop

08005e54 <memmove>:
 8005e54:	4288      	cmp	r0, r1
 8005e56:	b4f0      	push	{r4, r5, r6, r7}
 8005e58:	d910      	bls.n	8005e7c <memmove+0x28>
 8005e5a:	188c      	adds	r4, r1, r2
 8005e5c:	42a0      	cmp	r0, r4
 8005e5e:	d20d      	bcs.n	8005e7c <memmove+0x28>
 8005e60:	1885      	adds	r5, r0, r2
 8005e62:	1e53      	subs	r3, r2, #1
 8005e64:	b142      	cbz	r2, 8005e78 <memmove+0x24>
 8005e66:	4621      	mov	r1, r4
 8005e68:	462a      	mov	r2, r5
 8005e6a:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e74:	1c5c      	adds	r4, r3, #1
 8005e76:	d1f8      	bne.n	8005e6a <memmove+0x16>
 8005e78:	bcf0      	pop	{r4, r5, r6, r7}
 8005e7a:	4770      	bx	lr
 8005e7c:	2a0f      	cmp	r2, #15
 8005e7e:	d944      	bls.n	8005f0a <memmove+0xb6>
 8005e80:	ea40 0301 	orr.w	r3, r0, r1
 8005e84:	079b      	lsls	r3, r3, #30
 8005e86:	d144      	bne.n	8005f12 <memmove+0xbe>
 8005e88:	f1a2 0710 	sub.w	r7, r2, #16
 8005e8c:	093f      	lsrs	r7, r7, #4
 8005e8e:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 8005e92:	3610      	adds	r6, #16
 8005e94:	460c      	mov	r4, r1
 8005e96:	4603      	mov	r3, r0
 8005e98:	6825      	ldr	r5, [r4, #0]
 8005e9a:	3310      	adds	r3, #16
 8005e9c:	f843 5c10 	str.w	r5, [r3, #-16]
 8005ea0:	6865      	ldr	r5, [r4, #4]
 8005ea2:	3410      	adds	r4, #16
 8005ea4:	f843 5c0c 	str.w	r5, [r3, #-12]
 8005ea8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005eac:	f843 5c08 	str.w	r5, [r3, #-8]
 8005eb0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8005eb4:	f843 5c04 	str.w	r5, [r3, #-4]
 8005eb8:	42b3      	cmp	r3, r6
 8005eba:	d1ed      	bne.n	8005e98 <memmove+0x44>
 8005ebc:	1c7b      	adds	r3, r7, #1
 8005ebe:	f002 0c0f 	and.w	ip, r2, #15
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	f1bc 0f03 	cmp.w	ip, #3
 8005ec8:	4419      	add	r1, r3
 8005eca:	4403      	add	r3, r0
 8005ecc:	d923      	bls.n	8005f16 <memmove+0xc2>
 8005ece:	460e      	mov	r6, r1
 8005ed0:	461d      	mov	r5, r3
 8005ed2:	4664      	mov	r4, ip
 8005ed4:	f856 7b04 	ldr.w	r7, [r6], #4
 8005ed8:	3c04      	subs	r4, #4
 8005eda:	2c03      	cmp	r4, #3
 8005edc:	f845 7b04 	str.w	r7, [r5], #4
 8005ee0:	d8f8      	bhi.n	8005ed4 <memmove+0x80>
 8005ee2:	f1ac 0404 	sub.w	r4, ip, #4
 8005ee6:	f024 0403 	bic.w	r4, r4, #3
 8005eea:	3404      	adds	r4, #4
 8005eec:	f002 0203 	and.w	r2, r2, #3
 8005ef0:	4423      	add	r3, r4
 8005ef2:	4421      	add	r1, r4
 8005ef4:	2a00      	cmp	r2, #0
 8005ef6:	d0bf      	beq.n	8005e78 <memmove+0x24>
 8005ef8:	441a      	add	r2, r3
 8005efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005efe:	f803 4b01 	strb.w	r4, [r3], #1
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d1f9      	bne.n	8005efa <memmove+0xa6>
 8005f06:	bcf0      	pop	{r4, r5, r6, r7}
 8005f08:	4770      	bx	lr
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2a00      	cmp	r2, #0
 8005f0e:	d1f3      	bne.n	8005ef8 <memmove+0xa4>
 8005f10:	e7b2      	b.n	8005e78 <memmove+0x24>
 8005f12:	4603      	mov	r3, r0
 8005f14:	e7f0      	b.n	8005ef8 <memmove+0xa4>
 8005f16:	4662      	mov	r2, ip
 8005f18:	2a00      	cmp	r2, #0
 8005f1a:	d1ed      	bne.n	8005ef8 <memmove+0xa4>
 8005f1c:	e7ac      	b.n	8005e78 <memmove+0x24>
 8005f1e:	bf00      	nop

08005f20 <_read_r>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	4c08      	ldr	r4, [pc, #32]	; (8005f44 <_read_r+0x24>)
 8005f24:	4606      	mov	r6, r0
 8005f26:	2500      	movs	r5, #0
 8005f28:	4608      	mov	r0, r1
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6025      	str	r5, [r4, #0]
 8005f30:	f7fd fdba 	bl	8003aa8 <_read>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d000      	beq.n	8005f3a <_read_r+0x1a>
 8005f38:	bd70      	pop	{r4, r5, r6, pc}
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0fb      	beq.n	8005f38 <_read_r+0x18>
 8005f40:	6033      	str	r3, [r6, #0]
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	20000c70 	.word	0x20000c70

08005f48 <_realloc_r>:
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	b083      	sub	sp, #12
 8005f50:	4690      	mov	r8, r2
 8005f52:	4681      	mov	r9, r0
 8005f54:	2900      	cmp	r1, #0
 8005f56:	f000 80ba 	beq.w	80060ce <_realloc_r+0x186>
 8005f5a:	f7ff fa7b 	bl	8005454 <__malloc_lock>
 8005f5e:	f108 060b 	add.w	r6, r8, #11
 8005f62:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005f66:	2e16      	cmp	r6, #22
 8005f68:	f023 0503 	bic.w	r5, r3, #3
 8005f6c:	f1a4 0708 	sub.w	r7, r4, #8
 8005f70:	d84b      	bhi.n	800600a <_realloc_r+0xc2>
 8005f72:	2110      	movs	r1, #16
 8005f74:	460e      	mov	r6, r1
 8005f76:	45b0      	cmp	r8, r6
 8005f78:	d84c      	bhi.n	8006014 <_realloc_r+0xcc>
 8005f7a:	428d      	cmp	r5, r1
 8005f7c:	da51      	bge.n	8006022 <_realloc_r+0xda>
 8005f7e:	f8df b384 	ldr.w	fp, [pc, #900]	; 8006304 <_realloc_r+0x3bc>
 8005f82:	1978      	adds	r0, r7, r5
 8005f84:	f8db e008 	ldr.w	lr, [fp, #8]
 8005f88:	4586      	cmp	lr, r0
 8005f8a:	f000 80a6 	beq.w	80060da <_realloc_r+0x192>
 8005f8e:	6842      	ldr	r2, [r0, #4]
 8005f90:	f022 0c01 	bic.w	ip, r2, #1
 8005f94:	4484      	add	ip, r0
 8005f96:	f8dc c004 	ldr.w	ip, [ip, #4]
 8005f9a:	f01c 0f01 	tst.w	ip, #1
 8005f9e:	d054      	beq.n	800604a <_realloc_r+0x102>
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	07db      	lsls	r3, r3, #31
 8005fa6:	d46f      	bmi.n	8006088 <_realloc_r+0x140>
 8005fa8:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8005fac:	ebc3 0a07 	rsb	sl, r3, r7
 8005fb0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005fb4:	f023 0303 	bic.w	r3, r3, #3
 8005fb8:	442b      	add	r3, r5
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d062      	beq.n	8006084 <_realloc_r+0x13c>
 8005fbe:	4570      	cmp	r0, lr
 8005fc0:	f000 80e9 	beq.w	8006196 <_realloc_r+0x24e>
 8005fc4:	eb02 0e03 	add.w	lr, r2, r3
 8005fc8:	458e      	cmp	lr, r1
 8005fca:	db5b      	blt.n	8006084 <_realloc_r+0x13c>
 8005fcc:	68c3      	ldr	r3, [r0, #12]
 8005fce:	6882      	ldr	r2, [r0, #8]
 8005fd0:	46d0      	mov	r8, sl
 8005fd2:	60d3      	str	r3, [r2, #12]
 8005fd4:	609a      	str	r2, [r3, #8]
 8005fd6:	f858 1f08 	ldr.w	r1, [r8, #8]!
 8005fda:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005fde:	1f2a      	subs	r2, r5, #4
 8005fe0:	2a24      	cmp	r2, #36	; 0x24
 8005fe2:	60cb      	str	r3, [r1, #12]
 8005fe4:	6099      	str	r1, [r3, #8]
 8005fe6:	f200 8123 	bhi.w	8006230 <_realloc_r+0x2e8>
 8005fea:	2a13      	cmp	r2, #19
 8005fec:	f240 80b0 	bls.w	8006150 <_realloc_r+0x208>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	2a1b      	cmp	r2, #27
 8005ff4:	f8ca 3008 	str.w	r3, [sl, #8]
 8005ff8:	6863      	ldr	r3, [r4, #4]
 8005ffa:	f8ca 300c 	str.w	r3, [sl, #12]
 8005ffe:	f200 812b 	bhi.w	8006258 <_realloc_r+0x310>
 8006002:	3408      	adds	r4, #8
 8006004:	f10a 0310 	add.w	r3, sl, #16
 8006008:	e0a3      	b.n	8006152 <_realloc_r+0x20a>
 800600a:	f026 0607 	bic.w	r6, r6, #7
 800600e:	2e00      	cmp	r6, #0
 8006010:	4631      	mov	r1, r6
 8006012:	dab0      	bge.n	8005f76 <_realloc_r+0x2e>
 8006014:	230c      	movs	r3, #12
 8006016:	2000      	movs	r0, #0
 8006018:	f8c9 3000 	str.w	r3, [r9]
 800601c:	b003      	add	sp, #12
 800601e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006022:	46a0      	mov	r8, r4
 8006024:	1baa      	subs	r2, r5, r6
 8006026:	2a0f      	cmp	r2, #15
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	d81a      	bhi.n	8006064 <_realloc_r+0x11c>
 800602e:	432b      	orrs	r3, r5
 8006030:	607b      	str	r3, [r7, #4]
 8006032:	443d      	add	r5, r7
 8006034:	686b      	ldr	r3, [r5, #4]
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	606b      	str	r3, [r5, #4]
 800603c:	4648      	mov	r0, r9
 800603e:	f7ff fa0b 	bl	8005458 <__malloc_unlock>
 8006042:	4640      	mov	r0, r8
 8006044:	b003      	add	sp, #12
 8006046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604a:	f022 0203 	bic.w	r2, r2, #3
 800604e:	eb02 0c05 	add.w	ip, r2, r5
 8006052:	458c      	cmp	ip, r1
 8006054:	dba6      	blt.n	8005fa4 <_realloc_r+0x5c>
 8006056:	68c2      	ldr	r2, [r0, #12]
 8006058:	6881      	ldr	r1, [r0, #8]
 800605a:	46a0      	mov	r8, r4
 800605c:	60ca      	str	r2, [r1, #12]
 800605e:	4665      	mov	r5, ip
 8006060:	6091      	str	r1, [r2, #8]
 8006062:	e7df      	b.n	8006024 <_realloc_r+0xdc>
 8006064:	19b9      	adds	r1, r7, r6
 8006066:	4333      	orrs	r3, r6
 8006068:	f042 0001 	orr.w	r0, r2, #1
 800606c:	607b      	str	r3, [r7, #4]
 800606e:	440a      	add	r2, r1
 8006070:	6048      	str	r0, [r1, #4]
 8006072:	6853      	ldr	r3, [r2, #4]
 8006074:	3108      	adds	r1, #8
 8006076:	f043 0301 	orr.w	r3, r3, #1
 800607a:	6053      	str	r3, [r2, #4]
 800607c:	4648      	mov	r0, r9
 800607e:	f7ff fc35 	bl	80058ec <_free_r>
 8006082:	e7db      	b.n	800603c <_realloc_r+0xf4>
 8006084:	428b      	cmp	r3, r1
 8006086:	da33      	bge.n	80060f0 <_realloc_r+0x1a8>
 8006088:	4641      	mov	r1, r8
 800608a:	4648      	mov	r0, r9
 800608c:	f7fe ff46 	bl	8004f1c <_malloc_r>
 8006090:	4680      	mov	r8, r0
 8006092:	2800      	cmp	r0, #0
 8006094:	d0d2      	beq.n	800603c <_realloc_r+0xf4>
 8006096:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800609a:	f1a0 0108 	sub.w	r1, r0, #8
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	443a      	add	r2, r7
 80060a4:	4291      	cmp	r1, r2
 80060a6:	f000 80bc 	beq.w	8006222 <_realloc_r+0x2da>
 80060aa:	1f2a      	subs	r2, r5, #4
 80060ac:	2a24      	cmp	r2, #36	; 0x24
 80060ae:	d86e      	bhi.n	800618e <_realloc_r+0x246>
 80060b0:	2a13      	cmp	r2, #19
 80060b2:	d842      	bhi.n	800613a <_realloc_r+0x1f2>
 80060b4:	4603      	mov	r3, r0
 80060b6:	4622      	mov	r2, r4
 80060b8:	6811      	ldr	r1, [r2, #0]
 80060ba:	6019      	str	r1, [r3, #0]
 80060bc:	6851      	ldr	r1, [r2, #4]
 80060be:	6059      	str	r1, [r3, #4]
 80060c0:	6892      	ldr	r2, [r2, #8]
 80060c2:	609a      	str	r2, [r3, #8]
 80060c4:	4621      	mov	r1, r4
 80060c6:	4648      	mov	r0, r9
 80060c8:	f7ff fc10 	bl	80058ec <_free_r>
 80060cc:	e7b6      	b.n	800603c <_realloc_r+0xf4>
 80060ce:	4611      	mov	r1, r2
 80060d0:	b003      	add	sp, #12
 80060d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d6:	f7fe bf21 	b.w	8004f1c <_malloc_r>
 80060da:	f8de 2004 	ldr.w	r2, [lr, #4]
 80060de:	f106 0c10 	add.w	ip, r6, #16
 80060e2:	f022 0203 	bic.w	r2, r2, #3
 80060e6:	1950      	adds	r0, r2, r5
 80060e8:	4560      	cmp	r0, ip
 80060ea:	da3d      	bge.n	8006168 <_realloc_r+0x220>
 80060ec:	4670      	mov	r0, lr
 80060ee:	e759      	b.n	8005fa4 <_realloc_r+0x5c>
 80060f0:	46d0      	mov	r8, sl
 80060f2:	f858 0f08 	ldr.w	r0, [r8, #8]!
 80060f6:	f8da 100c 	ldr.w	r1, [sl, #12]
 80060fa:	1f2a      	subs	r2, r5, #4
 80060fc:	2a24      	cmp	r2, #36	; 0x24
 80060fe:	60c1      	str	r1, [r0, #12]
 8006100:	6088      	str	r0, [r1, #8]
 8006102:	f200 80a0 	bhi.w	8006246 <_realloc_r+0x2fe>
 8006106:	2a13      	cmp	r2, #19
 8006108:	f240 809b 	bls.w	8006242 <_realloc_r+0x2fa>
 800610c:	6821      	ldr	r1, [r4, #0]
 800610e:	2a1b      	cmp	r2, #27
 8006110:	f8ca 1008 	str.w	r1, [sl, #8]
 8006114:	6861      	ldr	r1, [r4, #4]
 8006116:	f8ca 100c 	str.w	r1, [sl, #12]
 800611a:	f200 80b2 	bhi.w	8006282 <_realloc_r+0x33a>
 800611e:	3408      	adds	r4, #8
 8006120:	f10a 0210 	add.w	r2, sl, #16
 8006124:	6821      	ldr	r1, [r4, #0]
 8006126:	461d      	mov	r5, r3
 8006128:	6011      	str	r1, [r2, #0]
 800612a:	6861      	ldr	r1, [r4, #4]
 800612c:	4657      	mov	r7, sl
 800612e:	6051      	str	r1, [r2, #4]
 8006130:	68a3      	ldr	r3, [r4, #8]
 8006132:	6093      	str	r3, [r2, #8]
 8006134:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006138:	e774      	b.n	8006024 <_realloc_r+0xdc>
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	2a1b      	cmp	r2, #27
 800613e:	6003      	str	r3, [r0, #0]
 8006140:	6863      	ldr	r3, [r4, #4]
 8006142:	6043      	str	r3, [r0, #4]
 8006144:	d862      	bhi.n	800620c <_realloc_r+0x2c4>
 8006146:	f100 0308 	add.w	r3, r0, #8
 800614a:	f104 0208 	add.w	r2, r4, #8
 800614e:	e7b3      	b.n	80060b8 <_realloc_r+0x170>
 8006150:	4643      	mov	r3, r8
 8006152:	6822      	ldr	r2, [r4, #0]
 8006154:	4675      	mov	r5, lr
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	6862      	ldr	r2, [r4, #4]
 800615a:	4657      	mov	r7, sl
 800615c:	605a      	str	r2, [r3, #4]
 800615e:	68a2      	ldr	r2, [r4, #8]
 8006160:	609a      	str	r2, [r3, #8]
 8006162:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006166:	e75d      	b.n	8006024 <_realloc_r+0xdc>
 8006168:	1b83      	subs	r3, r0, r6
 800616a:	4437      	add	r7, r6
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	f8cb 7008 	str.w	r7, [fp, #8]
 8006174:	607b      	str	r3, [r7, #4]
 8006176:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800617a:	4648      	mov	r0, r9
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	431e      	orrs	r6, r3
 8006182:	f844 6c04 	str.w	r6, [r4, #-4]
 8006186:	f7ff f967 	bl	8005458 <__malloc_unlock>
 800618a:	4620      	mov	r0, r4
 800618c:	e75a      	b.n	8006044 <_realloc_r+0xfc>
 800618e:	4621      	mov	r1, r4
 8006190:	f7ff fe60 	bl	8005e54 <memmove>
 8006194:	e796      	b.n	80060c4 <_realloc_r+0x17c>
 8006196:	eb02 0c03 	add.w	ip, r2, r3
 800619a:	f106 0210 	add.w	r2, r6, #16
 800619e:	4594      	cmp	ip, r2
 80061a0:	f6ff af70 	blt.w	8006084 <_realloc_r+0x13c>
 80061a4:	4657      	mov	r7, sl
 80061a6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80061aa:	f8da 300c 	ldr.w	r3, [sl, #12]
 80061ae:	1f2a      	subs	r2, r5, #4
 80061b0:	2a24      	cmp	r2, #36	; 0x24
 80061b2:	60cb      	str	r3, [r1, #12]
 80061b4:	6099      	str	r1, [r3, #8]
 80061b6:	f200 8086 	bhi.w	80062c6 <_realloc_r+0x37e>
 80061ba:	2a13      	cmp	r2, #19
 80061bc:	d977      	bls.n	80062ae <_realloc_r+0x366>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	2a1b      	cmp	r2, #27
 80061c2:	f8ca 3008 	str.w	r3, [sl, #8]
 80061c6:	6863      	ldr	r3, [r4, #4]
 80061c8:	f8ca 300c 	str.w	r3, [sl, #12]
 80061cc:	f200 8084 	bhi.w	80062d8 <_realloc_r+0x390>
 80061d0:	3408      	adds	r4, #8
 80061d2:	f10a 0310 	add.w	r3, sl, #16
 80061d6:	6822      	ldr	r2, [r4, #0]
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	6862      	ldr	r2, [r4, #4]
 80061dc:	605a      	str	r2, [r3, #4]
 80061de:	68a2      	ldr	r2, [r4, #8]
 80061e0:	609a      	str	r2, [r3, #8]
 80061e2:	ebc6 020c 	rsb	r2, r6, ip
 80061e6:	eb0a 0306 	add.w	r3, sl, r6
 80061ea:	f042 0201 	orr.w	r2, r2, #1
 80061ee:	f8cb 3008 	str.w	r3, [fp, #8]
 80061f2:	605a      	str	r2, [r3, #4]
 80061f4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80061f8:	4648      	mov	r0, r9
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	431e      	orrs	r6, r3
 8006200:	f8ca 6004 	str.w	r6, [sl, #4]
 8006204:	f7ff f928 	bl	8005458 <__malloc_unlock>
 8006208:	4638      	mov	r0, r7
 800620a:	e71b      	b.n	8006044 <_realloc_r+0xfc>
 800620c:	68a3      	ldr	r3, [r4, #8]
 800620e:	2a24      	cmp	r2, #36	; 0x24
 8006210:	6083      	str	r3, [r0, #8]
 8006212:	68e3      	ldr	r3, [r4, #12]
 8006214:	60c3      	str	r3, [r0, #12]
 8006216:	d02b      	beq.n	8006270 <_realloc_r+0x328>
 8006218:	f100 0310 	add.w	r3, r0, #16
 800621c:	f104 0210 	add.w	r2, r4, #16
 8006220:	e74a      	b.n	80060b8 <_realloc_r+0x170>
 8006222:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006226:	46a0      	mov	r8, r4
 8006228:	f022 0203 	bic.w	r2, r2, #3
 800622c:	4415      	add	r5, r2
 800622e:	e6f9      	b.n	8006024 <_realloc_r+0xdc>
 8006230:	4621      	mov	r1, r4
 8006232:	4640      	mov	r0, r8
 8006234:	4675      	mov	r5, lr
 8006236:	4657      	mov	r7, sl
 8006238:	f7ff fe0c 	bl	8005e54 <memmove>
 800623c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006240:	e6f0      	b.n	8006024 <_realloc_r+0xdc>
 8006242:	4642      	mov	r2, r8
 8006244:	e76e      	b.n	8006124 <_realloc_r+0x1dc>
 8006246:	4621      	mov	r1, r4
 8006248:	4640      	mov	r0, r8
 800624a:	461d      	mov	r5, r3
 800624c:	4657      	mov	r7, sl
 800624e:	f7ff fe01 	bl	8005e54 <memmove>
 8006252:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006256:	e6e5      	b.n	8006024 <_realloc_r+0xdc>
 8006258:	68a3      	ldr	r3, [r4, #8]
 800625a:	2a24      	cmp	r2, #36	; 0x24
 800625c:	f8ca 3010 	str.w	r3, [sl, #16]
 8006260:	68e3      	ldr	r3, [r4, #12]
 8006262:	f8ca 3014 	str.w	r3, [sl, #20]
 8006266:	d018      	beq.n	800629a <_realloc_r+0x352>
 8006268:	3410      	adds	r4, #16
 800626a:	f10a 0318 	add.w	r3, sl, #24
 800626e:	e770      	b.n	8006152 <_realloc_r+0x20a>
 8006270:	6922      	ldr	r2, [r4, #16]
 8006272:	f100 0318 	add.w	r3, r0, #24
 8006276:	6102      	str	r2, [r0, #16]
 8006278:	6961      	ldr	r1, [r4, #20]
 800627a:	f104 0218 	add.w	r2, r4, #24
 800627e:	6141      	str	r1, [r0, #20]
 8006280:	e71a      	b.n	80060b8 <_realloc_r+0x170>
 8006282:	68a1      	ldr	r1, [r4, #8]
 8006284:	2a24      	cmp	r2, #36	; 0x24
 8006286:	f8ca 1010 	str.w	r1, [sl, #16]
 800628a:	68e1      	ldr	r1, [r4, #12]
 800628c:	f8ca 1014 	str.w	r1, [sl, #20]
 8006290:	d00f      	beq.n	80062b2 <_realloc_r+0x36a>
 8006292:	3410      	adds	r4, #16
 8006294:	f10a 0218 	add.w	r2, sl, #24
 8006298:	e744      	b.n	8006124 <_realloc_r+0x1dc>
 800629a:	6922      	ldr	r2, [r4, #16]
 800629c:	f10a 0320 	add.w	r3, sl, #32
 80062a0:	f8ca 2018 	str.w	r2, [sl, #24]
 80062a4:	6962      	ldr	r2, [r4, #20]
 80062a6:	3418      	adds	r4, #24
 80062a8:	f8ca 201c 	str.w	r2, [sl, #28]
 80062ac:	e751      	b.n	8006152 <_realloc_r+0x20a>
 80062ae:	463b      	mov	r3, r7
 80062b0:	e791      	b.n	80061d6 <_realloc_r+0x28e>
 80062b2:	6921      	ldr	r1, [r4, #16]
 80062b4:	f10a 0220 	add.w	r2, sl, #32
 80062b8:	f8ca 1018 	str.w	r1, [sl, #24]
 80062bc:	6961      	ldr	r1, [r4, #20]
 80062be:	3418      	adds	r4, #24
 80062c0:	f8ca 101c 	str.w	r1, [sl, #28]
 80062c4:	e72e      	b.n	8006124 <_realloc_r+0x1dc>
 80062c6:	4621      	mov	r1, r4
 80062c8:	4638      	mov	r0, r7
 80062ca:	f8cd c004 	str.w	ip, [sp, #4]
 80062ce:	f7ff fdc1 	bl	8005e54 <memmove>
 80062d2:	f8dd c004 	ldr.w	ip, [sp, #4]
 80062d6:	e784      	b.n	80061e2 <_realloc_r+0x29a>
 80062d8:	68a3      	ldr	r3, [r4, #8]
 80062da:	2a24      	cmp	r2, #36	; 0x24
 80062dc:	f8ca 3010 	str.w	r3, [sl, #16]
 80062e0:	68e3      	ldr	r3, [r4, #12]
 80062e2:	f8ca 3014 	str.w	r3, [sl, #20]
 80062e6:	d003      	beq.n	80062f0 <_realloc_r+0x3a8>
 80062e8:	3410      	adds	r4, #16
 80062ea:	f10a 0318 	add.w	r3, sl, #24
 80062ee:	e772      	b.n	80061d6 <_realloc_r+0x28e>
 80062f0:	6922      	ldr	r2, [r4, #16]
 80062f2:	f10a 0320 	add.w	r3, sl, #32
 80062f6:	f8ca 2018 	str.w	r2, [sl, #24]
 80062fa:	6962      	ldr	r2, [r4, #20]
 80062fc:	3418      	adds	r4, #24
 80062fe:	f8ca 201c 	str.w	r2, [sl, #28]
 8006302:	e768      	b.n	80061d6 <_realloc_r+0x28e>
 8006304:	2000074c 	.word	0x2000074c

08006308 <cleanup_glue>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	460c      	mov	r4, r1
 800630c:	6809      	ldr	r1, [r1, #0]
 800630e:	4605      	mov	r5, r0
 8006310:	b109      	cbz	r1, 8006316 <cleanup_glue+0xe>
 8006312:	f7ff fff9 	bl	8006308 <cleanup_glue>
 8006316:	4628      	mov	r0, r5
 8006318:	4621      	mov	r1, r4
 800631a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800631e:	f7ff bae5 	b.w	80058ec <_free_r>
 8006322:	bf00      	nop

08006324 <_reclaim_reent>:
 8006324:	4b22      	ldr	r3, [pc, #136]	; (80063b0 <_reclaim_reent+0x8c>)
 8006326:	b570      	push	{r4, r5, r6, lr}
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4605      	mov	r5, r0
 800632c:	4298      	cmp	r0, r3
 800632e:	d032      	beq.n	8006396 <_reclaim_reent+0x72>
 8006330:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006332:	b1aa      	cbz	r2, 8006360 <_reclaim_reent+0x3c>
 8006334:	2300      	movs	r3, #0
 8006336:	461e      	mov	r6, r3
 8006338:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800633c:	b909      	cbnz	r1, 8006342 <_reclaim_reent+0x1e>
 800633e:	e007      	b.n	8006350 <_reclaim_reent+0x2c>
 8006340:	4621      	mov	r1, r4
 8006342:	680c      	ldr	r4, [r1, #0]
 8006344:	4628      	mov	r0, r5
 8006346:	f7ff fad1 	bl	80058ec <_free_r>
 800634a:	2c00      	cmp	r4, #0
 800634c:	d1f8      	bne.n	8006340 <_reclaim_reent+0x1c>
 800634e:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8006350:	3601      	adds	r6, #1
 8006352:	2e20      	cmp	r6, #32
 8006354:	4633      	mov	r3, r6
 8006356:	d1ef      	bne.n	8006338 <_reclaim_reent+0x14>
 8006358:	4611      	mov	r1, r2
 800635a:	4628      	mov	r0, r5
 800635c:	f7ff fac6 	bl	80058ec <_free_r>
 8006360:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8006362:	b111      	cbz	r1, 800636a <_reclaim_reent+0x46>
 8006364:	4628      	mov	r0, r5
 8006366:	f7ff fac1 	bl	80058ec <_free_r>
 800636a:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 800636e:	b159      	cbz	r1, 8006388 <_reclaim_reent+0x64>
 8006370:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8006374:	42b1      	cmp	r1, r6
 8006376:	d101      	bne.n	800637c <_reclaim_reent+0x58>
 8006378:	e006      	b.n	8006388 <_reclaim_reent+0x64>
 800637a:	4621      	mov	r1, r4
 800637c:	680c      	ldr	r4, [r1, #0]
 800637e:	4628      	mov	r0, r5
 8006380:	f7ff fab4 	bl	80058ec <_free_r>
 8006384:	42a6      	cmp	r6, r4
 8006386:	d1f8      	bne.n	800637a <_reclaim_reent+0x56>
 8006388:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800638a:	b111      	cbz	r1, 8006392 <_reclaim_reent+0x6e>
 800638c:	4628      	mov	r0, r5
 800638e:	f7ff faad 	bl	80058ec <_free_r>
 8006392:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006394:	b903      	cbnz	r3, 8006398 <_reclaim_reent+0x74>
 8006396:	bd70      	pop	{r4, r5, r6, pc}
 8006398:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800639a:	4628      	mov	r0, r5
 800639c:	4798      	blx	r3
 800639e:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 80063a2:	2900      	cmp	r1, #0
 80063a4:	d0f7      	beq.n	8006396 <_reclaim_reent+0x72>
 80063a6:	4628      	mov	r0, r5
 80063a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063ac:	f7ff bfac 	b.w	8006308 <cleanup_glue>
 80063b0:	20000748 	.word	0x20000748

080063b4 <__swsetup_r>:
 80063b4:	4b2f      	ldr	r3, [pc, #188]	; (8006474 <__swsetup_r+0xc0>)
 80063b6:	b570      	push	{r4, r5, r6, lr}
 80063b8:	4606      	mov	r6, r0
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	460c      	mov	r4, r1
 80063be:	b110      	cbz	r0, 80063c6 <__swsetup_r+0x12>
 80063c0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80063c2:	2a00      	cmp	r2, #0
 80063c4:	d036      	beq.n	8006434 <__swsetup_r+0x80>
 80063c6:	89a5      	ldrh	r5, [r4, #12]
 80063c8:	b2ab      	uxth	r3, r5
 80063ca:	0719      	lsls	r1, r3, #28
 80063cc:	d50c      	bpl.n	80063e8 <__swsetup_r+0x34>
 80063ce:	6922      	ldr	r2, [r4, #16]
 80063d0:	b1aa      	cbz	r2, 80063fe <__swsetup_r+0x4a>
 80063d2:	f013 0101 	ands.w	r1, r3, #1
 80063d6:	d01e      	beq.n	8006416 <__swsetup_r+0x62>
 80063d8:	6963      	ldr	r3, [r4, #20]
 80063da:	2100      	movs	r1, #0
 80063dc:	425b      	negs	r3, r3
 80063de:	61a3      	str	r3, [r4, #24]
 80063e0:	60a1      	str	r1, [r4, #8]
 80063e2:	b1f2      	cbz	r2, 8006422 <__swsetup_r+0x6e>
 80063e4:	2000      	movs	r0, #0
 80063e6:	bd70      	pop	{r4, r5, r6, pc}
 80063e8:	06da      	lsls	r2, r3, #27
 80063ea:	d53a      	bpl.n	8006462 <__swsetup_r+0xae>
 80063ec:	075b      	lsls	r3, r3, #29
 80063ee:	d424      	bmi.n	800643a <__swsetup_r+0x86>
 80063f0:	6922      	ldr	r2, [r4, #16]
 80063f2:	f045 0308 	orr.w	r3, r5, #8
 80063f6:	81a3      	strh	r3, [r4, #12]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	2a00      	cmp	r2, #0
 80063fc:	d1e9      	bne.n	80063d2 <__swsetup_r+0x1e>
 80063fe:	f403 7120 	and.w	r1, r3, #640	; 0x280
 8006402:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006406:	d0e4      	beq.n	80063d2 <__swsetup_r+0x1e>
 8006408:	4630      	mov	r0, r6
 800640a:	4621      	mov	r1, r4
 800640c:	f000 f834 	bl	8006478 <__smakebuf_r>
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	6922      	ldr	r2, [r4, #16]
 8006414:	e7dd      	b.n	80063d2 <__swsetup_r+0x1e>
 8006416:	0798      	lsls	r0, r3, #30
 8006418:	bf58      	it	pl
 800641a:	6961      	ldrpl	r1, [r4, #20]
 800641c:	60a1      	str	r1, [r4, #8]
 800641e:	2a00      	cmp	r2, #0
 8006420:	d1e0      	bne.n	80063e4 <__swsetup_r+0x30>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	061a      	lsls	r2, r3, #24
 8006426:	d5dd      	bpl.n	80063e4 <__swsetup_r+0x30>
 8006428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800642c:	81a3      	strh	r3, [r4, #12]
 800642e:	f04f 30ff 	mov.w	r0, #4294967295
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	f7fe fc4c 	bl	8004cd0 <__sinit>
 8006438:	e7c5      	b.n	80063c6 <__swsetup_r+0x12>
 800643a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800643c:	b149      	cbz	r1, 8006452 <__swsetup_r+0x9e>
 800643e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006442:	4299      	cmp	r1, r3
 8006444:	d003      	beq.n	800644e <__swsetup_r+0x9a>
 8006446:	4630      	mov	r0, r6
 8006448:	f7ff fa50 	bl	80058ec <_free_r>
 800644c:	89a5      	ldrh	r5, [r4, #12]
 800644e:	2300      	movs	r3, #0
 8006450:	6323      	str	r3, [r4, #48]	; 0x30
 8006452:	6922      	ldr	r2, [r4, #16]
 8006454:	f025 0524 	bic.w	r5, r5, #36	; 0x24
 8006458:	2100      	movs	r1, #0
 800645a:	b2ad      	uxth	r5, r5
 800645c:	6022      	str	r2, [r4, #0]
 800645e:	6061      	str	r1, [r4, #4]
 8006460:	e7c7      	b.n	80063f2 <__swsetup_r+0x3e>
 8006462:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8006466:	2309      	movs	r3, #9
 8006468:	6033      	str	r3, [r6, #0]
 800646a:	f04f 30ff 	mov.w	r0, #4294967295
 800646e:	81a5      	strh	r5, [r4, #12]
 8006470:	bd70      	pop	{r4, r5, r6, pc}
 8006472:	bf00      	nop
 8006474:	20000748 	.word	0x20000748

08006478 <__smakebuf_r>:
 8006478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647a:	898b      	ldrh	r3, [r1, #12]
 800647c:	b091      	sub	sp, #68	; 0x44
 800647e:	b29a      	uxth	r2, r3
 8006480:	0796      	lsls	r6, r2, #30
 8006482:	460c      	mov	r4, r1
 8006484:	4605      	mov	r5, r0
 8006486:	d437      	bmi.n	80064f8 <__smakebuf_r+0x80>
 8006488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800648c:	2900      	cmp	r1, #0
 800648e:	db17      	blt.n	80064c0 <__smakebuf_r+0x48>
 8006490:	aa01      	add	r2, sp, #4
 8006492:	f000 f861 	bl	8006558 <_fstat_r>
 8006496:	2800      	cmp	r0, #0
 8006498:	db10      	blt.n	80064bc <__smakebuf_r+0x44>
 800649a:	9b02      	ldr	r3, [sp, #8]
 800649c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80064a0:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
 80064a4:	424f      	negs	r7, r1
 80064a6:	414f      	adcs	r7, r1
 80064a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ac:	d02c      	beq.n	8006508 <__smakebuf_r+0x90>
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80064b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064b8:	81a3      	strh	r3, [r4, #12]
 80064ba:	e00b      	b.n	80064d4 <__smakebuf_r+0x5c>
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	b29a      	uxth	r2, r3
 80064c0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80064c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064c8:	81a3      	strh	r3, [r4, #12]
 80064ca:	bf14      	ite	ne
 80064cc:	2640      	movne	r6, #64	; 0x40
 80064ce:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 80064d2:	2700      	movs	r7, #0
 80064d4:	4628      	mov	r0, r5
 80064d6:	4631      	mov	r1, r6
 80064d8:	f7fe fd20 	bl	8004f1c <_malloc_r>
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	2800      	cmp	r0, #0
 80064e0:	d029      	beq.n	8006536 <__smakebuf_r+0xbe>
 80064e2:	4a1b      	ldr	r2, [pc, #108]	; (8006550 <__smakebuf_r+0xd8>)
 80064e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e8:	63ea      	str	r2, [r5, #60]	; 0x3c
 80064ea:	81a3      	strh	r3, [r4, #12]
 80064ec:	6020      	str	r0, [r4, #0]
 80064ee:	6120      	str	r0, [r4, #16]
 80064f0:	6166      	str	r6, [r4, #20]
 80064f2:	b9a7      	cbnz	r7, 800651e <__smakebuf_r+0xa6>
 80064f4:	b011      	add	sp, #68	; 0x44
 80064f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f8:	f101 0343 	add.w	r3, r1, #67	; 0x43
 80064fc:	2201      	movs	r2, #1
 80064fe:	600b      	str	r3, [r1, #0]
 8006500:	610b      	str	r3, [r1, #16]
 8006502:	614a      	str	r2, [r1, #20]
 8006504:	b011      	add	sp, #68	; 0x44
 8006506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006508:	4a12      	ldr	r2, [pc, #72]	; (8006554 <__smakebuf_r+0xdc>)
 800650a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800650c:	4293      	cmp	r3, r2
 800650e:	d1ce      	bne.n	80064ae <__smakebuf_r+0x36>
 8006510:	89a3      	ldrh	r3, [r4, #12]
 8006512:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8006516:	4333      	orrs	r3, r6
 8006518:	81a3      	strh	r3, [r4, #12]
 800651a:	64e6      	str	r6, [r4, #76]	; 0x4c
 800651c:	e7da      	b.n	80064d4 <__smakebuf_r+0x5c>
 800651e:	4628      	mov	r0, r5
 8006520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006524:	f000 f82c 	bl	8006580 <_isatty_r>
 8006528:	2800      	cmp	r0, #0
 800652a:	d0e3      	beq.n	80064f4 <__smakebuf_r+0x7c>
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	f043 0301 	orr.w	r3, r3, #1
 8006532:	81a3      	strh	r3, [r4, #12]
 8006534:	e7de      	b.n	80064f4 <__smakebuf_r+0x7c>
 8006536:	059a      	lsls	r2, r3, #22
 8006538:	d4dc      	bmi.n	80064f4 <__smakebuf_r+0x7c>
 800653a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800653e:	f043 0302 	orr.w	r3, r3, #2
 8006542:	2101      	movs	r1, #1
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	6022      	str	r2, [r4, #0]
 8006548:	6122      	str	r2, [r4, #16]
 800654a:	6161      	str	r1, [r4, #20]
 800654c:	e7d2      	b.n	80064f4 <__smakebuf_r+0x7c>
 800654e:	bf00      	nop
 8006550:	08004c81 	.word	0x08004c81
 8006554:	08005551 	.word	0x08005551

08006558 <_fstat_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4c08      	ldr	r4, [pc, #32]	; (800657c <_fstat_r+0x24>)
 800655c:	2300      	movs	r3, #0
 800655e:	4605      	mov	r5, r0
 8006560:	4608      	mov	r0, r1
 8006562:	4611      	mov	r1, r2
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	f7fd fbcd 	bl	8003d04 <_fstat>
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	d000      	beq.n	8006570 <_fstat_r+0x18>
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0fb      	beq.n	800656e <_fstat_r+0x16>
 8006576:	602b      	str	r3, [r5, #0]
 8006578:	bd38      	pop	{r3, r4, r5, pc}
 800657a:	bf00      	nop
 800657c:	20000c70 	.word	0x20000c70

08006580 <_isatty_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4c07      	ldr	r4, [pc, #28]	; (80065a0 <_isatty_r+0x20>)
 8006584:	2300      	movs	r3, #0
 8006586:	4605      	mov	r5, r0
 8006588:	4608      	mov	r0, r1
 800658a:	6023      	str	r3, [r4, #0]
 800658c:	f7fd fcb0 	bl	8003ef0 <_isatty>
 8006590:	1c43      	adds	r3, r0, #1
 8006592:	d000      	beq.n	8006596 <_isatty_r+0x16>
 8006594:	bd38      	pop	{r3, r4, r5, pc}
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0fb      	beq.n	8006594 <_isatty_r+0x14>
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	20000c70 	.word	0x20000c70
 80065a4:	6c6c6548 	.word	0x6c6c6548
 80065a8:	6f57206f 	.word	0x6f57206f
 80065ac:	00646c72 	.word	0x00646c72
 80065b0:	00000043 	.word	0x00000043

080065b4 <_global_impure_ptr>:
 80065b4:	20000320 0074743a 0000000a               .. :tt.....

Disassembly of section .init:

080065c0 <_init>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	bf00      	nop
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr

Disassembly of section .fini:

080065cc <_fini>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr
