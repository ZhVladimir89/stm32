
out/main.elf:     file format elf32-littlearm


Disassembly of section .text:

080001d0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
}
 80001d4:	46bd      	mov	sp, r7
 80001d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001da:	4770      	bx	lr

080001dc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80001e0:	e7fe      	b.n	80001e0 <HardFault_Handler+0x4>
 80001e2:	bf00      	nop

080001e4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80001e8:	e7fe      	b.n	80001e8 <MemManage_Handler+0x4>
 80001ea:	bf00      	nop

080001ec <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80001f0:	e7fe      	b.n	80001f0 <BusFault_Handler+0x4>
 80001f2:	bf00      	nop

080001f4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80001f8:	e7fe      	b.n	80001f8 <UsageFault_Handler+0x4>
 80001fa:	bf00      	nop

080001fc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
}
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr

08000208 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
}
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
}
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  __stm32_tick++;
 8000224:	f240 13f8 	movw	r3, #504	; 0x1f8
 8000228:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	1c5a      	adds	r2, r3, #1
 8000230:	f240 13f8 	movw	r3, #504	; 0x1f8
 8000234:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop

08000244 <main>:
void TIM2_IRQHandler(void);
void INTTIM_Config(void);

/* main C entry point */
int main(void)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
    //GPIO_InitTypeDef GPIO_InitStructure;
    int i=0;
 800024a:	2300      	movs	r3, #0
 800024c:	607b      	str	r3, [r7, #4]

    //INTTIM_Config();

    for EVER
    {
        i++;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	3301      	adds	r3, #1
 8000252:	607b      	str	r3, [r7, #4]
    }
 8000254:	e7fb      	b.n	800024e <main+0xa>
 8000256:	bf00      	nop

08000258 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000260:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000264:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 800026e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000272:	60da      	str	r2, [r3, #12]
}
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *   the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000280:	b480      	push	{r7}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]
 8000290:	230f      	movs	r3, #15
 8000292:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d042      	beq.n	8000322 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800029c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80002a0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80002a4:	68db      	ldr	r3, [r3, #12]
 80002a6:	43db      	mvns	r3, r3
 80002a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80002ac:	0a1b      	lsrs	r3, r3, #8
 80002ae:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	f1c3 0304 	rsb	r3, r3, #4
 80002b6:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	68fa      	ldr	r2, [r7, #12]
 80002bc:	fa22 f303 	lsr.w	r3, r2, r3
 80002c0:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	785b      	ldrb	r3, [r3, #1]
 80002c6:	461a      	mov	r2, r3
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	fa02 f303 	lsl.w	r3, r2, r3
 80002ce:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	789b      	ldrb	r3, [r3, #2]
 80002d4:	461a      	mov	r2, r3
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	4013      	ands	r3, r2
 80002da:	697a      	ldr	r2, [r7, #20]
 80002dc:	4313      	orrs	r3, r2
 80002de:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	011b      	lsls	r3, r3, #4
 80002e4:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80002e6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80002ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	7812      	ldrb	r2, [r2, #0]
 80002f2:	4611      	mov	r1, r2
 80002f4:	697a      	ldr	r2, [r7, #20]
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002fe:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000302:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	7812      	ldrb	r2, [r2, #0]
 800030a:	0952      	lsrs	r2, r2, #5
 800030c:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800030e:	6879      	ldr	r1, [r7, #4]
 8000310:	7809      	ldrb	r1, [r1, #0]
 8000312:	f001 011f 	and.w	r1, r1, #31
 8000316:	2001      	movs	r0, #1
 8000318:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800031c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000320:	e011      	b.n	8000346 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000322:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000326:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	7812      	ldrb	r2, [r2, #0]
 800032e:	0952      	lsrs	r2, r2, #5
 8000330:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000332:	6879      	ldr	r1, [r7, #4]
 8000334:	7809      	ldrb	r1, [r1, #0]
 8000336:	f001 011f 	and.w	r1, r1, #31
 800033a:	2001      	movs	r0, #1
 800033c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000340:	3220      	adds	r2, #32
 8000342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000346:	371c      	adds	r7, #28
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x100.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800035a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800035e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000362:	683a      	ldr	r2, [r7, #0]
 8000364:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8000368:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800036c:	6879      	ldr	r1, [r7, #4]
 800036e:	430a      	orrs	r2, r1
 8000370:	609a      	str	r2, [r3, #8]
}
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	4602      	mov	r2, r0
 8000384:	460b      	mov	r3, r1
 8000386:	71fa      	strb	r2, [r7, #7]
 8000388:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800038a:	79bb      	ldrb	r3, [r7, #6]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d00c      	beq.n	80003aa <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 8000390:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000394:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000398:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800039c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80003a0:	6911      	ldr	r1, [r2, #16]
 80003a2:	79fa      	ldrb	r2, [r7, #7]
 80003a4:	430a      	orrs	r2, r1
 80003a6:	611a      	str	r2, [r3, #16]
 80003a8:	e00c      	b.n	80003c4 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80003aa:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80003ae:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80003b2:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80003b6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80003ba:	6911      	ldr	r1, [r2, #16]
 80003bc:	79fa      	ldrb	r2, [r7, #7]
 80003be:	43d2      	mvns	r2, r2
 80003c0:	400a      	ands	r2, r1
 80003c2:	611a      	str	r2, [r3, #16]
  }
}
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2b04      	cmp	r3, #4
 80003dc:	d10c      	bne.n	80003f8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80003de:	f24e 0310 	movw	r3, #57360	; 0xe010
 80003e2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80003e6:	f24e 0210 	movw	r2, #57360	; 0xe010
 80003ea:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	f042 0204 	orr.w	r2, r2, #4
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	e00b      	b.n	8000410 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80003f8:	f24e 0310 	movw	r3, #57360	; 0xe010
 80003fc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000400:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000404:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000408:	6812      	ldr	r2, [r2, #0]
 800040a:	f022 0204 	bic.w	r2, r2, #4
 800040e:	601a      	str	r2, [r3, #0]
  }
}
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop

0800041c <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800042a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800042e:	429a      	cmp	r2, r3
 8000430:	d108      	bne.n	8000444 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000432:	2004      	movs	r0, #4
 8000434:	2101      	movs	r1, #1
 8000436:	f000 febd 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 800043a:	2004      	movs	r0, #4
 800043c:	2100      	movs	r1, #0
 800043e:	f000 feb9 	bl	80011b4 <RCC_APB2PeriphResetCmd>
 8000442:	e060      	b.n	8000506 <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800044a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800044e:	429a      	cmp	r2, r3
 8000450:	d108      	bne.n	8000464 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000452:	2008      	movs	r0, #8
 8000454:	2101      	movs	r1, #1
 8000456:	f000 fead 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 800045a:	2008      	movs	r0, #8
 800045c:	2100      	movs	r1, #0
 800045e:	f000 fea9 	bl	80011b4 <RCC_APB2PeriphResetCmd>
 8000462:	e050      	b.n	8000506 <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800046a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800046e:	429a      	cmp	r2, r3
 8000470:	d108      	bne.n	8000484 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000472:	2010      	movs	r0, #16
 8000474:	2101      	movs	r1, #1
 8000476:	f000 fe9d 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 800047a:	2010      	movs	r0, #16
 800047c:	2100      	movs	r1, #0
 800047e:	f000 fe99 	bl	80011b4 <RCC_APB2PeriphResetCmd>
 8000482:	e040      	b.n	8000506 <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800048a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800048e:	429a      	cmp	r2, r3
 8000490:	d108      	bne.n	80004a4 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8000492:	2020      	movs	r0, #32
 8000494:	2101      	movs	r1, #1
 8000496:	f000 fe8d 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 800049a:	2020      	movs	r0, #32
 800049c:	2100      	movs	r1, #0
 800049e:	f000 fe89 	bl	80011b4 <RCC_APB2PeriphResetCmd>
 80004a2:	e030      	b.n	8000506 <GPIO_DeInit+0xea>
  }    
  else if (GPIOx == GPIOE)
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d108      	bne.n	80004c4 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 80004b2:	2040      	movs	r0, #64	; 0x40
 80004b4:	2101      	movs	r1, #1
 80004b6:	f000 fe7d 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 80004ba:	2040      	movs	r0, #64	; 0x40
 80004bc:	2100      	movs	r1, #0
 80004be:	f000 fe79 	bl	80011b4 <RCC_APB2PeriphResetCmd>
 80004c2:	e020      	b.n	8000506 <GPIO_DeInit+0xea>
  } 
  else if (GPIOx == GPIOF)
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80004ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d108      	bne.n	80004e4 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 80004d2:	2080      	movs	r0, #128	; 0x80
 80004d4:	2101      	movs	r1, #1
 80004d6:	f000 fe6d 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 80004da:	2080      	movs	r0, #128	; 0x80
 80004dc:	2100      	movs	r1, #0
 80004de:	f000 fe69 	bl	80011b4 <RCC_APB2PeriphResetCmd>
 80004e2:	e010      	b.n	8000506 <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d109      	bne.n	8000506 <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 80004f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80004f6:	2101      	movs	r1, #1
 80004f8:	f000 fe5c 	bl	80011b4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80004fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000500:	2100      	movs	r1, #0
 8000502:	f000 fe57 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000510:	2001      	movs	r0, #1
 8000512:	2101      	movs	r1, #1
 8000514:	f000 fe4e 	bl	80011b4 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8000518:	2001      	movs	r0, #1
 800051a:	2100      	movs	r1, #0
 800051c:	f000 fe4a 	bl	80011b4 <RCC_APB2PeriphResetCmd>
}
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop

08000524 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *   contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000524:	b480      	push	{r7}
 8000526:	b089      	sub	sp, #36	; 0x24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	78db      	ldrb	r3, [r3, #3]
 800054a:	f003 030f 	and.w	r3, r3, #15
 800054e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	78db      	ldrb	r3, [r3, #3]
 8000554:	f003 0310 	and.w	r3, r3, #16
 8000558:	2b00      	cmp	r3, #0
 800055a:	d004      	beq.n	8000566 <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	789b      	ldrb	r3, [r3, #2]
 8000560:	69fa      	ldr	r2, [r7, #28]
 8000562:	4313      	orrs	r3, r2
 8000564:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2b00      	cmp	r3, #0
 800056e:	d044      	beq.n	80005fa <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
 800057a:	e038      	b.n	80005ee <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800057c:	69bb      	ldr	r3, [r7, #24]
 800057e:	2201      	movs	r2, #1
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4013      	ands	r3, r2
 8000590:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	429a      	cmp	r2, r3
 8000598:	d126      	bne.n	80005e8 <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
 800059a:	69bb      	ldr	r3, [r7, #24]
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	220f      	movs	r2, #15
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	43db      	mvns	r3, r3
 80005ae:	697a      	ldr	r2, [r7, #20]
 80005b0:	4013      	ands	r3, r2
 80005b2:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	69fa      	ldr	r2, [r7, #28]
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	697a      	ldr	r2, [r7, #20]
 80005be:	4313      	orrs	r3, r2
 80005c0:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	78db      	ldrb	r3, [r3, #3]
 80005c6:	2b28      	cmp	r3, #40	; 0x28
 80005c8:	d105      	bne.n	80005d6 <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	2201      	movs	r2, #1
 80005ce:	409a      	lsls	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	e008      	b.n	80005e8 <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	78db      	ldrb	r3, [r3, #3]
 80005da:	2b48      	cmp	r3, #72	; 0x48
 80005dc:	d104      	bne.n	80005e8 <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80005de:	69bb      	ldr	r3, [r7, #24]
 80005e0:	2201      	movs	r2, #1
 80005e2:	409a      	lsls	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	3301      	adds	r3, #1
 80005ec:	61bb      	str	r3, [r7, #24]
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	2b07      	cmp	r3, #7
 80005f2:	d9c3      	bls.n	800057c <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	2bff      	cmp	r3, #255	; 0xff
 8000600:	d946      	bls.n	8000690 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
 800060c:	e03a      	b.n	8000684 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	3308      	adds	r3, #8
 8000612:	2201      	movs	r2, #1
 8000614:	fa02 f303 	lsl.w	r3, r2, r3
 8000618:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4013      	ands	r3, r2
 8000624:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	429a      	cmp	r2, r3
 800062c:	d127      	bne.n	800067e <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
 800062e:	69bb      	ldr	r3, [r7, #24]
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	220f      	movs	r2, #15
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	43db      	mvns	r3, r3
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	4013      	ands	r3, r2
 8000646:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	69fa      	ldr	r2, [r7, #28]
 800064c:	fa02 f303 	lsl.w	r3, r2, r3
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	4313      	orrs	r3, r2
 8000654:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	78db      	ldrb	r3, [r3, #3]
 800065a:	2b28      	cmp	r3, #40	; 0x28
 800065c:	d105      	bne.n	800066a <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	3308      	adds	r3, #8
 8000662:	2201      	movs	r2, #1
 8000664:	409a      	lsls	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	78db      	ldrb	r3, [r3, #3]
 800066e:	2b48      	cmp	r3, #72	; 0x48
 8000670:	d105      	bne.n	800067e <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	3308      	adds	r3, #8
 8000676:	2201      	movs	r2, #1
 8000678:	409a      	lsls	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	3301      	adds	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	2b07      	cmp	r3, #7
 8000688:	d9c1      	bls.n	800060e <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	605a      	str	r2, [r3, #4]
  }
}
 8000690:	3724      	adds	r7, #36	; 0x24
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006aa:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2202      	movs	r2, #2
 80006b0:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2204      	movs	r2, #4
 80006b6:	70da      	strb	r2, [r3, #3]
}
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80006d0:	2300      	movs	r3, #0
 80006d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689a      	ldr	r2, [r3, #8]
 80006d8:	887b      	ldrh	r3, [r7, #2]
 80006da:	4013      	ands	r3, r2
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
 80006e4:	e001      	b.n	80006ea <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	b29b      	uxth	r3, r3
}
 8000706:	4618      	mov	r0, r3
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop

08000714 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000720:	2300      	movs	r3, #0
 8000722:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	68da      	ldr	r2, [r3, #12]
 8000728:	887b      	ldrh	r3, [r7, #2]
 800072a:	4013      	ands	r3, r2
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000730:	2301      	movs	r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	e001      	b.n	800073a <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000736:	2300      	movs	r3, #0
 8000738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800073a:	7bfb      	ldrb	r3, [r7, #15]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	b29b      	uxth	r3, r3
}
 8000756:	4618      	mov	r0, r3
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop

08000764 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000770:	887a      	ldrh	r2, [r7, #2]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	611a      	str	r2, [r3, #16]
}
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800078c:	887a      	ldrh	r2, [r7, #2]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	615a      	str	r2, [r3, #20]
}
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	4613      	mov	r3, r2
 80007a6:	460a      	mov	r2, r1
 80007a8:	807a      	strh	r2, [r7, #2]
 80007aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80007ac:	787b      	ldrb	r3, [r7, #1]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d003      	beq.n	80007ba <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007b2:	887a      	ldrh	r2, [r7, #2]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	e002      	b.n	80007c0 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80007ba:	887a      	ldrh	r2, [r7, #2]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	615a      	str	r2, [r3, #20]
  }
}
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80007d8:	887a      	ldrh	r2, [r7, #2]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	60da      	str	r2, [r3, #12]
}
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 80007f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 80007fa:	887b      	ldrh	r3, [r7, #2]
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	4313      	orrs	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000808:	887a      	ldrh	r2, [r7, #2]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	60fb      	str	r3, [r7, #12]
}
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop

0800082c <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	4602      	mov	r2, r0
 8000834:	460b      	mov	r3, r1
 8000836:	71fa      	strb	r2, [r7, #7]
 8000838:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 800083e:	2300      	movs	r3, #0
 8000840:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800084e:	4013      	ands	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	4313      	orrs	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
 800085c:	79bb      	ldrb	r3, [r7, #6]
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	4313      	orrs	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
 8000864:	2300      	movs	r3, #0
 8000866:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	601a      	str	r2, [r3, #0]
}
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 8000882:	231c      	movs	r3, #28
 8000884:	f2c4 2320 	movt	r3, #16928	; 0x4220
 8000888:	79fa      	ldrb	r2, [r7, #7]
 800088a:	601a      	str	r2, [r3, #0]
}
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop

08000898 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000898:	b480      	push	{r7}
 800089a:	b087      	sub	sp, #28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da05      	bge.n	80008c6 <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	e004      	b.n	80008d0 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80008c6:	2300      	movs	r3, #0
 80008c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80008d6:	0c1b      	lsrs	r3, r3, #16
 80008d8:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80008e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80008ea:	d10e      	bne.n	800090a <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80008f2:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80008fa:	2200      	movs	r2, #0
 80008fc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000900:	6852      	ldr	r2, [r2, #4]
 8000902:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	e021      	b.n	800094e <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000910:	2b00      	cmp	r3, #0
 8000912:	d00e      	beq.n	8000932 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2203      	movs	r2, #3
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	43db      	mvns	r3, r3
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	4013      	ands	r3, r2
 8000926:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	e00d      	b.n	800094e <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	0d5b      	lsrs	r3, r3, #21
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	4013      	ands	r3, r2
 8000944:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800094c:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 800094e:	78fb      	ldrb	r3, [r7, #3]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d008      	beq.n	8000966 <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	0d5b      	lsrs	r3, r3, #21
 8000958:	011b      	lsls	r3, r3, #4
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	4313      	orrs	r3, r2
 8000964:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	da05      	bge.n	8000978 <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
 800096c:	2300      	movs	r3, #0
 800096e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	61da      	str	r2, [r3, #28]
 8000976:	e004      	b.n	8000982 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8000978:	2300      	movs	r3, #0
 800097a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	605a      	str	r2, [r3, #4]
  }  
}
 8000982:	371c      	adds	r7, #28
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 800098c:	b490      	push	{r4, r7}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	4602      	mov	r2, r0
 8000994:	460b      	mov	r3, r1
 8000996:	71fa      	strb	r2, [r7, #7]
 8000998:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800099e:	79bb      	ldrb	r3, [r7, #6]
 80009a0:	f003 0303 	and.w	r3, r3, #3
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	220f      	movs	r2, #15
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80009ae:	2300      	movs	r3, #0
 80009b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80009b4:	79ba      	ldrb	r2, [r7, #6]
 80009b6:	0892      	lsrs	r2, r2, #2
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	4610      	mov	r0, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80009c2:	79b9      	ldrb	r1, [r7, #6]
 80009c4:	0889      	lsrs	r1, r1, #2
 80009c6:	b2c9      	uxtb	r1, r1
 80009c8:	3102      	adds	r1, #2
 80009ca:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	43d2      	mvns	r2, r2
 80009d2:	4011      	ands	r1, r2
 80009d4:	1c82      	adds	r2, r0, #2
 80009d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80009da:	2300      	movs	r3, #0
 80009dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80009e0:	79ba      	ldrb	r2, [r7, #6]
 80009e2:	0892      	lsrs	r2, r2, #2
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	4610      	mov	r0, r2
 80009e8:	2200      	movs	r2, #0
 80009ea:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80009ee:	79b9      	ldrb	r1, [r7, #6]
 80009f0:	0889      	lsrs	r1, r1, #2
 80009f2:	b2c9      	uxtb	r1, r1
 80009f4:	3102      	adds	r1, #2
 80009f6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80009fa:	79fc      	ldrb	r4, [r7, #7]
 80009fc:	79ba      	ldrb	r2, [r7, #6]
 80009fe:	f002 0203 	and.w	r2, r2, #3
 8000a02:	0092      	lsls	r2, r2, #2
 8000a04:	fa04 f202 	lsl.w	r2, r4, r2
 8000a08:	4311      	orrs	r1, r2
 8000a0a:	1c82      	adds	r2, r0, #2
 8000a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc90      	pop	{r4, r7}
 8000a16:	4770      	bx	lr

08000a18 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 8000a20:	23dc      	movs	r3, #220	; 0xdc
 8000a22:	f2c4 2320 	movt	r3, #16928	; 0x4220
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	601a      	str	r2, [r3, #0]
}
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a44:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a48:	6812      	ldr	r2, [r2, #0]
 8000a4a:	f042 0201 	orr.w	r2, r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000a50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a60:	6859      	ldr	r1, [r3, #4]
 8000a62:	2300      	movs	r3, #0
 8000a64:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8000a68:	400b      	ands	r3, r1
 8000a6a:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a7c:	6812      	ldr	r2, [r2, #0]
 8000a7e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000a82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a86:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a9e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ab0:	6852      	ldr	r2, [r2, #4]
 8000ab2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000ab6:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ac0:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ac4:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000adc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ae0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ae4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ae8:	6812      	ldr	r2, [r2, #0]
 8000aea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000aee:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8000af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000afc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b06:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b0e:	d003      	beq.n	8000b18 <RCC_HSEConfig+0x48>
 8000b10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000b14:	d00d      	beq.n	8000b32 <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 8000b16:	e019      	b.n	8000b4c <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8000b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b28:	6812      	ldr	r2, [r2, #0]
 8000b2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b2e:	601a      	str	r2, [r3, #0]
      break;
 8000b30:	e00c      	b.n	8000b4c <RCC_HSEConfig+0x7c>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8000b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8000b48:	601a      	str	r2, [r3, #0]
      break;
 8000b4a:	bf00      	nop
      
    default:
      break;
  }
}
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000b62:	2300      	movs	r3, #0
 8000b64:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000b6a:	2031      	movs	r0, #49	; 0x31
 8000b6c:	f000 fba2 	bl	80012b4 <RCC_GetFlagStatus>
 8000b70:	4603      	mov	r3, r0
 8000b72:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b80:	d002      	beq.n	8000b88 <RCC_WaitForHSEStartUp+0x30>
 8000b82:	79bb      	ldrb	r3, [r7, #6]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0f0      	beq.n	8000b6a <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000b88:	2031      	movs	r0, #49	; 0x31
 8000b8a:	f000 fb93 	bl	80012b4 <RCC_GetFlagStatus>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000b94:	2301      	movs	r3, #1
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	e001      	b.n	8000b9e <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 8000bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bc8:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
 8000bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000bfc:	79fa      	ldrb	r2, [r7, #7]
 8000bfe:	601a      	str	r2, [r3, #0]
}
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8000c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000c2c:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	605a      	str	r2, [r3, #4]
}
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000c5a:	2360      	movs	r3, #96	; 0x60
 8000c5c:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000c60:	79fa      	ldrb	r2, [r7, #7]
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f023 0303 	bic.w	r3, r3, #3
 8000c8e:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	605a      	str	r2, [r3, #4]
}
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8000cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f003 030c 	and.w	r3, r3, #12
 8000cc4:	b2db      	uxtb	r3, r3
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8000cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000cee:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	605a      	str	r2, [r3, #4]
}
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d2e:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	605a      	str	r2, [r3, #4]
}
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d6e:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	605a      	str	r2, [r3, #4]
}
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	71fa      	strb	r2, [r7, #7]
 8000d9c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00e      	beq.n	8000dc2 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000da4:	f241 0309 	movw	r3, #4105	; 0x1009
 8000da8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dac:	f241 0209 	movw	r2, #4105	; 0x1009
 8000db0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000db4:	7812      	ldrb	r2, [r2, #0]
 8000db6:	b2d1      	uxtb	r1, r2
 8000db8:	79fa      	ldrb	r2, [r7, #7]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	e00f      	b.n	8000de2 <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000dc2:	f241 0309 	movw	r3, #4105	; 0x1009
 8000dc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dca:	f241 0209 	movw	r2, #4105	; 0x1009
 8000dce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	b2d1      	uxtb	r1, r2
 8000dd6:	79fa      	ldrb	r2, [r7, #7]
 8000dd8:	43d2      	mvns	r2, r2
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	400a      	ands	r2, r1
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	701a      	strb	r2, [r3, #0]
  }
}
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8000df4:	23d8      	movs	r3, #216	; 0xd8
 8000df6:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	601a      	str	r2, [r3, #0]
}
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e26:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	605a      	str	r2, [r3, #4]
}
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000e52:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000e56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000e5e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000e62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d002      	beq.n	8000e76 <RCC_LSEConfig+0x2e>
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d007      	beq.n	8000e84 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 8000e74:	e00d      	b.n	8000e92 <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000e76:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000e7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
      break;
 8000e82:	e006      	b.n	8000e92 <RCC_LSEConfig+0x4a>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000e84:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000e88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e8c:	2205      	movs	r2, #5
 8000e8e:	701a      	strb	r2, [r3, #0]
      break;            
 8000e90:	bf00      	nop
      
    default:
      break;      
  }
}
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000ea6:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8000eaa:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000eae:	79fa      	ldrb	r2, [r7, #7]
 8000eb0:	601a      	str	r2, [r3, #0]
}
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ecc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ed0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ed4:	6a11      	ldr	r1, [r2, #32]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	621a      	str	r2, [r3, #32]
}
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000ef2:	f240 433c 	movw	r3, #1084	; 0x43c
 8000ef6:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	601a      	str	r2, [r3, #0]
}
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <RCC_GetClocksFreq>:
  * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
  *   the clocks frequencies.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d00a      	beq.n	8000f4c <RCC_GetClocksFreq+0x44>
 8000f36:	2b08      	cmp	r3, #8
 8000f38:	d00f      	beq.n	8000f5a <RCC_GetClocksFreq+0x52>
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d14c      	bne.n	8000fd8 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000f44:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000f48:	6013      	str	r3, [r2, #0]
      break;
 8000f4a:	e04c      	b.n	8000fe6 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000f52:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000f56:	6013      	str	r3, [r2, #0]
      break;
 8000f58:	e045      	b.n	8000fe6 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000f68:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f78:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	0c9b      	lsrs	r3, r3, #18
 8000f7e:	3302      	adds	r3, #2
 8000f80:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d109      	bne.n	8000f9c <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000f8e:	f2c0 033d 	movt	r3, #61	; 0x3d
 8000f92:	fb03 f202 	mul.w	r2, r3, r2
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e01c      	b.n	8000fd6 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d009      	beq.n	8000fc2 <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000fb4:	f2c0 033d 	movt	r3, #61	; 0x3d
 8000fb8:	fb03 f202 	mul.w	r2, r3, r2
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e009      	b.n	8000fd6 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000fc8:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000fcc:	fb03 f202 	mul.w	r2, r3, r2
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000fd4:	e007      	b.n	8000fe6 <RCC_GetClocksFreq+0xde>
 8000fd6:	e006      	b.n	8000fe6 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000fde:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000fe2:	6013      	str	r3, [r2, #0]
      break;
 8000fe4:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ff4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000ffc:	f240 13d0 	movw	r3, #464	; 0x1d0
 8001000:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	4413      	add	r3, r2
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	40da      	lsrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001028:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001030:	f240 13d0 	movw	r3, #464	; 0x1d0
 8001034:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	40da      	lsrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800104e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001052:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800105c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	0adb      	lsrs	r3, r3, #11
 8001062:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001064:	f240 13d0 	movw	r3, #464	; 0x1d0
 8001068:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	40da      	lsrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001090:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	0b9b      	lsrs	r3, r3, #14
 8001096:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001098:	f240 13e0 	movw	r3, #480	; 0x1e0
 800109c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	611a      	str	r2, [r3, #16]
}
 80010b8:	371c      	adds	r7, #28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00c      	beq.n	80010f0 <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80010d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010e6:	6951      	ldr	r1, [r2, #20]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	615a      	str	r2, [r3, #20]
 80010ee:	e00c      	b.n	800110a <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80010f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001100:	6951      	ldr	r1, [r2, #20]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	43d2      	mvns	r2, r2
 8001106:	400a      	ands	r2, r1
 8001108:	615a      	str	r2, [r3, #20]
  }
}
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00c      	beq.n	8001140 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800112e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001132:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001136:	6991      	ldr	r1, [r2, #24]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	430a      	orrs	r2, r1
 800113c:	619a      	str	r2, [r3, #24]
 800113e:	e00c      	b.n	800115a <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001144:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001148:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800114c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001150:	6991      	ldr	r1, [r2, #24]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	43d2      	mvns	r2, r2
 8001156:	400a      	ands	r2, r1
 8001158:	619a      	str	r2, [r3, #24]
  }
}
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00c      	beq.n	8001190 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800117e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001182:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001186:	69d1      	ldr	r1, [r2, #28]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	430a      	orrs	r2, r1
 800118c:	61da      	str	r2, [r3, #28]
 800118e:	e00c      	b.n	80011aa <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001194:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001198:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800119c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011a0:	69d1      	ldr	r1, [r2, #28]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	43d2      	mvns	r2, r2
 80011a6:	400a      	ands	r2, r1
 80011a8:	61da      	str	r2, [r3, #28]
  }
}
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00c      	beq.n	80011e0 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011d6:	68d1      	ldr	r1, [r2, #12]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	430a      	orrs	r2, r1
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	e00c      	b.n	80011fa <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011f0:	68d1      	ldr	r1, [r2, #12]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	43d2      	mvns	r2, r2
 80011f6:	400a      	ands	r2, r1
 80011f8:	60da      	str	r2, [r3, #12]
  }
}
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00c      	beq.n	8001230 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800121e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001222:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001226:	6911      	ldr	r1, [r2, #16]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	430a      	orrs	r2, r1
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	e00c      	b.n	800124a <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001234:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001238:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800123c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001240:	6911      	ldr	r1, [r2, #16]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	43d2      	mvns	r2, r2
 8001246:	400a      	ands	r2, r1
 8001248:	611a      	str	r2, [r3, #16]
  }
}
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800125e:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001262:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	601a      	str	r2, [r3, #0]
}
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800127e:	234c      	movs	r3, #76	; 0x4c
 8001280:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001284:	79fa      	ldrb	r2, [r7, #7]
 8001286:	601a      	str	r2, [r3, #0]
}
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop

08001294 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 800129e:	f241 0307 	movw	r3, #4103	; 0x1007
 80012a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012a6:	79fa      	ldrb	r2, [r7, #7]
 80012a8:	701a      	strb	r2, [r3, #0]
}
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	095b      	lsrs	r3, r3, #5
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d106      	bne.n	80012e6 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	e00f      	b.n	8001306 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d106      	bne.n	80012fa <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	e005      	b.n	8001306 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80012fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 031f 	and.w	r3, r3, #31
 800130c:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	fa22 f303 	lsr.w	r3, r2, r3
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
 800131e:	2301      	movs	r3, #1
 8001320:	74fb      	strb	r3, [r7, #19]
 8001322:	e001      	b.n	8001328 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8001328:	7cfb      	ldrb	r3, [r7, #19]
}
 800132a:	4618      	mov	r0, r3
 800132c:	371c      	adds	r7, #28
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop

08001338 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001344:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001348:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800134c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800134e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800136a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4013      	ands	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e001      	b.n	8001386 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800139e:	f241 030a 	movw	r3, #4106	; 0x100a
 80013a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013a6:	79fa      	ldrb	r2, [r7, #7]
 80013a8:	701a      	strb	r2, [r3, #0]
}
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80013c2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d10a      	bne.n	80013e0 <TIM_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80013ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013ce:	2101      	movs	r1, #1
 80013d0:	f7ff fef0 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80013d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013d8:	2100      	movs	r1, #0
 80013da:	f7ff feeb 	bl	80011b4 <RCC_APB2PeriphResetCmd>
 80013de:	e10b      	b.n	80015f8 <TIM_DeInit+0x244>
  }     
  else if (TIMx == TIM2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e6:	d108      	bne.n	80013fa <TIM_DeInit+0x46>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80013e8:	2001      	movs	r0, #1
 80013ea:	2101      	movs	r1, #1
 80013ec:	f7ff ff0a 	bl	8001204 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80013f0:	2001      	movs	r0, #1
 80013f2:	2100      	movs	r1, #0
 80013f4:	f7ff ff06 	bl	8001204 <RCC_APB1PeriphResetCmd>
 80013f8:	e0fe      	b.n	80015f8 <TIM_DeInit+0x244>
  }
  else if (TIMx == TIM3)
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001400:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001404:	429a      	cmp	r2, r3
 8001406:	d108      	bne.n	800141a <TIM_DeInit+0x66>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001408:	2002      	movs	r0, #2
 800140a:	2101      	movs	r1, #1
 800140c:	f7ff fefa 	bl	8001204 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001410:	2002      	movs	r0, #2
 8001412:	2100      	movs	r1, #0
 8001414:	f7ff fef6 	bl	8001204 <RCC_APB1PeriphResetCmd>
 8001418:	e0ee      	b.n	80015f8 <TIM_DeInit+0x244>
  }
  else if (TIMx == TIM4)
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001420:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001424:	429a      	cmp	r2, r3
 8001426:	d108      	bne.n	800143a <TIM_DeInit+0x86>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001428:	2004      	movs	r0, #4
 800142a:	2101      	movs	r1, #1
 800142c:	f7ff feea 	bl	8001204 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001430:	2004      	movs	r0, #4
 8001432:	2100      	movs	r1, #0
 8001434:	f7ff fee6 	bl	8001204 <RCC_APB1PeriphResetCmd>
 8001438:	e0de      	b.n	80015f8 <TIM_DeInit+0x244>
  } 
  else if (TIMx == TIM5)
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001440:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001444:	429a      	cmp	r2, r3
 8001446:	d108      	bne.n	800145a <TIM_DeInit+0xa6>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001448:	2008      	movs	r0, #8
 800144a:	2101      	movs	r1, #1
 800144c:	f7ff feda 	bl	8001204 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001450:	2008      	movs	r0, #8
 8001452:	2100      	movs	r1, #0
 8001454:	f7ff fed6 	bl	8001204 <RCC_APB1PeriphResetCmd>
 8001458:	e0ce      	b.n	80015f8 <TIM_DeInit+0x244>
  } 
  else if (TIMx == TIM6)
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001460:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001464:	429a      	cmp	r2, r3
 8001466:	d108      	bne.n	800147a <TIM_DeInit+0xc6>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001468:	2010      	movs	r0, #16
 800146a:	2101      	movs	r1, #1
 800146c:	f7ff feca 	bl	8001204 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001470:	2010      	movs	r0, #16
 8001472:	2100      	movs	r1, #0
 8001474:	f7ff fec6 	bl	8001204 <RCC_APB1PeriphResetCmd>
 8001478:	e0be      	b.n	80015f8 <TIM_DeInit+0x244>
  } 
  else if (TIMx == TIM7)
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001480:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001484:	429a      	cmp	r2, r3
 8001486:	d108      	bne.n	800149a <TIM_DeInit+0xe6>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001488:	2020      	movs	r0, #32
 800148a:	2101      	movs	r1, #1
 800148c:	f7ff feba 	bl	8001204 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001490:	2020      	movs	r0, #32
 8001492:	2100      	movs	r1, #0
 8001494:	f7ff feb6 	bl	8001204 <RCC_APB1PeriphResetCmd>
 8001498:	e0ae      	b.n	80015f8 <TIM_DeInit+0x244>
  } 
  else if (TIMx == TIM8)
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80014a0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d10a      	bne.n	80014be <TIM_DeInit+0x10a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80014a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014ac:	2101      	movs	r1, #1
 80014ae:	f7ff fe81 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 80014b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014b6:	2100      	movs	r1, #0
 80014b8:	f7ff fe7c 	bl	80011b4 <RCC_APB2PeriphResetCmd>
 80014bc:	e09c      	b.n	80015f8 <TIM_DeInit+0x244>
  }
  else if (TIMx == TIM9)
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 80014c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d10a      	bne.n	80014e2 <TIM_DeInit+0x12e>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80014cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80014d0:	2101      	movs	r1, #1
 80014d2:	f7ff fe6f 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80014d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80014da:	2100      	movs	r1, #0
 80014dc:	f7ff fe6a 	bl	80011b4 <RCC_APB2PeriphResetCmd>
 80014e0:	e08a      	b.n	80015f8 <TIM_DeInit+0x244>
   }  
  else if (TIMx == TIM10)
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80014e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d10a      	bne.n	8001506 <TIM_DeInit+0x152>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80014f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80014f4:	2101      	movs	r1, #1
 80014f6:	f7ff fe5d 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80014fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80014fe:	2100      	movs	r1, #0
 8001500:	f7ff fe58 	bl	80011b4 <RCC_APB2PeriphResetCmd>
 8001504:	e078      	b.n	80015f8 <TIM_DeInit+0x244>
  }  
  else if (TIMx == TIM11) 
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001510:	429a      	cmp	r2, r3
 8001512:	d10a      	bne.n	800152a <TIM_DeInit+0x176>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001514:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001518:	2101      	movs	r1, #1
 800151a:	f7ff fe4b 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800151e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001522:	2100      	movs	r1, #0
 8001524:	f7ff fe46 	bl	80011b4 <RCC_APB2PeriphResetCmd>
 8001528:	e066      	b.n	80015f8 <TIM_DeInit+0x244>
  }  
  else if (TIMx == TIM12)
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001530:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001534:	429a      	cmp	r2, r3
 8001536:	d108      	bne.n	800154a <TIM_DeInit+0x196>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001538:	2040      	movs	r0, #64	; 0x40
 800153a:	2101      	movs	r1, #1
 800153c:	f7ff fe62 	bl	8001204 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001540:	2040      	movs	r0, #64	; 0x40
 8001542:	2100      	movs	r1, #0
 8001544:	f7ff fe5e 	bl	8001204 <RCC_APB1PeriphResetCmd>
 8001548:	e056      	b.n	80015f8 <TIM_DeInit+0x244>
  }  
  else if (TIMx == TIM13) 
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001550:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001554:	429a      	cmp	r2, r3
 8001556:	d108      	bne.n	800156a <TIM_DeInit+0x1b6>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001558:	2080      	movs	r0, #128	; 0x80
 800155a:	2101      	movs	r1, #1
 800155c:	f7ff fe52 	bl	8001204 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001560:	2080      	movs	r0, #128	; 0x80
 8001562:	2100      	movs	r1, #0
 8001564:	f7ff fe4e 	bl	8001204 <RCC_APB1PeriphResetCmd>
 8001568:	e046      	b.n	80015f8 <TIM_DeInit+0x244>
  }
  else if (TIMx == TIM14) 
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001570:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001574:	429a      	cmp	r2, r3
 8001576:	d10a      	bne.n	800158e <TIM_DeInit+0x1da>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001578:	f44f 7080 	mov.w	r0, #256	; 0x100
 800157c:	2101      	movs	r1, #1
 800157e:	f7ff fe41 	bl	8001204 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8001582:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001586:	2100      	movs	r1, #0
 8001588:	f7ff fe3c 	bl	8001204 <RCC_APB1PeriphResetCmd>
 800158c:	e034      	b.n	80015f8 <TIM_DeInit+0x244>
  }        
  else if (TIMx == TIM15)
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001594:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001598:	429a      	cmp	r2, r3
 800159a:	d10a      	bne.n	80015b2 <TIM_DeInit+0x1fe>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 800159c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80015a0:	2101      	movs	r1, #1
 80015a2:	f7ff fe07 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 80015a6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80015aa:	2100      	movs	r1, #0
 80015ac:	f7ff fe02 	bl	80011b4 <RCC_APB2PeriphResetCmd>
 80015b0:	e022      	b.n	80015f8 <TIM_DeInit+0x244>
  } 
  else if (TIMx == TIM16)
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80015b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015bc:	429a      	cmp	r2, r3
 80015be:	d10a      	bne.n	80015d6 <TIM_DeInit+0x222>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 80015c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80015c4:	2101      	movs	r1, #1
 80015c6:	f7ff fdf5 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 80015ca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80015ce:	2100      	movs	r1, #0
 80015d0:	f7ff fdf0 	bl	80011b4 <RCC_APB2PeriphResetCmd>
 80015d4:	e010      	b.n	80015f8 <TIM_DeInit+0x244>
  } 
  else
  {
    if (TIMx == TIM17)
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80015dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d109      	bne.n	80015f8 <TIM_DeInit+0x244>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 80015e4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80015e8:	2101      	movs	r1, #1
 80015ea:	f7ff fde3 	bl	80011b4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 80015ee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80015f2:	2100      	movs	r1, #0
 80015f4:	f7ff fdde 	bl	80011b4 <RCC_APB2PeriphResetCmd>
    }  
  }
}
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop

08001600 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
  *   structure that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800161a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800161e:	429a      	cmp	r2, r3
 8001620:	d01f      	beq.n	8001662 <TIM_TimeBaseInit+0x62>
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001628:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800162c:	429a      	cmp	r2, r3
 800162e:	d018      	beq.n	8001662 <TIM_TimeBaseInit+0x62>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001636:	d014      	beq.n	8001662 <TIM_TimeBaseInit+0x62>
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001642:	429a      	cmp	r2, r3
 8001644:	d00d      	beq.n	8001662 <TIM_TimeBaseInit+0x62>
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800164c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001650:	429a      	cmp	r2, r3
 8001652:	d006      	beq.n	8001662 <TIM_TimeBaseInit+0x62>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800165a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800165e:	429a      	cmp	r2, r3
 8001660:	d108      	bne.n	8001674 <TIM_TimeBaseInit+0x74>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001662:	89fb      	ldrh	r3, [r7, #14]
 8001664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001668:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	885a      	ldrh	r2, [r3, #2]
 800166e:	89fb      	ldrh	r3, [r7, #14]
 8001670:	4313      	orrs	r3, r2
 8001672:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800167e:	429a      	cmp	r2, r3
 8001680:	d00f      	beq.n	80016a2 <TIM_TimeBaseInit+0xa2>
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001688:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800168c:	429a      	cmp	r2, r3
 800168e:	d008      	beq.n	80016a2 <TIM_TimeBaseInit+0xa2>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001696:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	88da      	ldrh	r2, [r3, #6]
 800169c:	89fb      	ldrh	r3, [r7, #14]
 800169e:	4313      	orrs	r3, r2
 80016a0:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	89fa      	ldrh	r2, [r7, #14]
 80016a6:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	889a      	ldrh	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	881a      	ldrh	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80016be:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d01b      	beq.n	80016fe <TIM_TimeBaseInit+0xfe>
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80016cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d014      	beq.n	80016fe <TIM_TimeBaseInit+0xfe>
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016da:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80016de:	429a      	cmp	r2, r3
 80016e0:	d00d      	beq.n	80016fe <TIM_TimeBaseInit+0xfe>
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80016e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d006      	beq.n	80016fe <TIM_TimeBaseInit+0xfe>
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80016f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d104      	bne.n	8001708 <TIM_TimeBaseInit+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	7a1b      	ldrb	r3, [r3, #8]
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	829a      	strh	r2, [r3, #20]
}
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	817b      	strh	r3, [r7, #10]
 8001726:	2300      	movs	r3, #0
 8001728:	81fb      	strh	r3, [r7, #14]
 800172a:	2300      	movs	r3, #0
 800172c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	8c1b      	ldrh	r3, [r3, #32]
 8001732:	b29b      	uxth	r3, r3
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	8c1b      	ldrh	r3, [r3, #32]
 8001742:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	889b      	ldrh	r3, [r3, #4]
 8001748:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	8b1b      	ldrh	r3, [r3, #24]
 800174e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8001750:	897b      	ldrh	r3, [r7, #10]
 8001752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001756:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001758:	897b      	ldrh	r3, [r7, #10]
 800175a:	f023 0303 	bic.w	r3, r3, #3
 800175e:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	881a      	ldrh	r2, [r3, #0]
 8001764:	897b      	ldrh	r3, [r7, #10]
 8001766:	4313      	orrs	r3, r2
 8001768:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800176a:	89fb      	ldrh	r3, [r7, #14]
 800176c:	f023 0302 	bic.w	r3, r3, #2
 8001770:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	891a      	ldrh	r2, [r3, #8]
 8001776:	89fb      	ldrh	r3, [r7, #14]
 8001778:	4313      	orrs	r3, r2
 800177a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	885a      	ldrh	r2, [r3, #2]
 8001780:	89fb      	ldrh	r3, [r7, #14]
 8001782:	4313      	orrs	r3, r2
 8001784:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800178c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001790:	429a      	cmp	r2, r3
 8001792:	d01b      	beq.n	80017cc <TIM_OC1Init+0xb4>
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800179a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800179e:	429a      	cmp	r2, r3
 80017a0:	d014      	beq.n	80017cc <TIM_OC1Init+0xb4>
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d00d      	beq.n	80017cc <TIM_OC1Init+0xb4>
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80017b6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d006      	beq.n	80017cc <TIM_OC1Init+0xb4>
     (TIMx == TIM16)|| (TIMx == TIM17))
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80017c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d123      	bne.n	8001814 <TIM_OC1Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 80017cc:	89fb      	ldrh	r3, [r7, #14]
 80017ce:	f023 0308 	bic.w	r3, r3, #8
 80017d2:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	895a      	ldrh	r2, [r3, #10]
 80017d8:	89fb      	ldrh	r3, [r7, #14]
 80017da:	4313      	orrs	r3, r2
 80017dc:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 80017de:	89fb      	ldrh	r3, [r7, #14]
 80017e0:	f023 0304 	bic.w	r3, r3, #4
 80017e4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	889a      	ldrh	r2, [r3, #4]
 80017ea:	89fb      	ldrh	r3, [r7, #14]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 80017f0:	89bb      	ldrh	r3, [r7, #12]
 80017f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017f6:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 80017f8:	89bb      	ldrh	r3, [r7, #12]
 80017fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017fe:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	899a      	ldrh	r2, [r3, #12]
 8001804:	89bb      	ldrh	r3, [r7, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	89da      	ldrh	r2, [r3, #14]
 800180e:	89bb      	ldrh	r3, [r7, #12]
 8001810:	4313      	orrs	r3, r2
 8001812:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	89ba      	ldrh	r2, [r7, #12]
 8001818:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	897a      	ldrh	r2, [r7, #10]
 800181e:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	88da      	ldrh	r2, [r3, #6]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	89fa      	ldrh	r2, [r7, #14]
 800182c:	841a      	strh	r2, [r3, #32]
}
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	817b      	strh	r3, [r7, #10]
 8001846:	2300      	movs	r3, #0
 8001848:	81fb      	strh	r3, [r7, #14]
 800184a:	2300      	movs	r3, #0
 800184c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	8c1b      	ldrh	r3, [r3, #32]
 8001852:	b29b      	uxth	r3, r3
 8001854:	f023 0310 	bic.w	r3, r3, #16
 8001858:	b29a      	uxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	8c1b      	ldrh	r3, [r3, #32]
 8001862:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	889b      	ldrh	r3, [r3, #4]
 8001868:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	8b1b      	ldrh	r3, [r3, #24]
 800186e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 8001870:	897b      	ldrh	r3, [r7, #10]
 8001872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001876:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8001878:	897b      	ldrh	r3, [r7, #10]
 800187a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800187e:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	b29a      	uxth	r2, r3
 8001888:	897b      	ldrh	r3, [r7, #10]
 800188a:	4313      	orrs	r3, r2
 800188c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 800188e:	89fb      	ldrh	r3, [r7, #14]
 8001890:	f023 0320 	bic.w	r3, r3, #32
 8001894:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	891b      	ldrh	r3, [r3, #8]
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	b29a      	uxth	r2, r3
 800189e:	89fb      	ldrh	r3, [r7, #14]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	885b      	ldrh	r3, [r3, #2]
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	89fb      	ldrh	r3, [r7, #14]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80018b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80018bc:	429a      	cmp	r2, r3
 80018be:	d006      	beq.n	80018ce <TIM_OC2Init+0x96>
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80018c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d12b      	bne.n	8001926 <TIM_OC2Init+0xee>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 80018ce:	89fb      	ldrh	r3, [r7, #14]
 80018d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018d4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	895b      	ldrh	r3, [r3, #10]
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	b29a      	uxth	r2, r3
 80018de:	89fb      	ldrh	r3, [r7, #14]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018ea:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	889b      	ldrh	r3, [r3, #4]
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	89fb      	ldrh	r3, [r7, #14]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 80018fa:	89bb      	ldrh	r3, [r7, #12]
 80018fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001900:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8001902:	89bb      	ldrh	r3, [r7, #12]
 8001904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001908:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	899b      	ldrh	r3, [r3, #12]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	b29a      	uxth	r2, r3
 8001912:	89bb      	ldrh	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	89db      	ldrh	r3, [r3, #14]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	b29a      	uxth	r2, r3
 8001920:	89bb      	ldrh	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	89ba      	ldrh	r2, [r7, #12]
 800192a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	897a      	ldrh	r2, [r7, #10]
 8001930:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	88da      	ldrh	r2, [r3, #6]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	89fa      	ldrh	r2, [r7, #14]
 800193e:	841a      	strh	r2, [r3, #32]
}
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop

0800194c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	817b      	strh	r3, [r7, #10]
 800195a:	2300      	movs	r3, #0
 800195c:	81fb      	strh	r3, [r7, #14]
 800195e:	2300      	movs	r3, #0
 8001960:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	8c1b      	ldrh	r3, [r3, #32]
 8001966:	b29b      	uxth	r3, r3
 8001968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800196c:	b29a      	uxth	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	8c1b      	ldrh	r3, [r3, #32]
 8001976:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	889b      	ldrh	r3, [r3, #4]
 800197c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	8b9b      	ldrh	r3, [r3, #28]
 8001982:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 8001984:	897b      	ldrh	r3, [r7, #10]
 8001986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 800198c:	897b      	ldrh	r3, [r7, #10]
 800198e:	f023 0303 	bic.w	r3, r3, #3
 8001992:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	881a      	ldrh	r2, [r3, #0]
 8001998:	897b      	ldrh	r3, [r7, #10]
 800199a:	4313      	orrs	r3, r2
 800199c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 800199e:	89fb      	ldrh	r3, [r7, #14]
 80019a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019a4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	891b      	ldrh	r3, [r3, #8]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	89fb      	ldrh	r3, [r7, #14]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	885b      	ldrh	r3, [r3, #2]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	89fb      	ldrh	r3, [r7, #14]
 80019be:	4313      	orrs	r3, r2
 80019c0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80019c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d006      	beq.n	80019de <TIM_OC3Init+0x92>
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80019d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80019da:	429a      	cmp	r2, r3
 80019dc:	d12b      	bne.n	8001a36 <TIM_OC3Init+0xea>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 80019de:	89fb      	ldrh	r3, [r7, #14]
 80019e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019e4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	895b      	ldrh	r3, [r3, #10]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	89fb      	ldrh	r3, [r7, #14]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 80019f4:	89fb      	ldrh	r3, [r7, #14]
 80019f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019fa:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	889b      	ldrh	r3, [r3, #4]
 8001a00:	021b      	lsls	r3, r3, #8
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	89fb      	ldrh	r3, [r7, #14]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	81fb      	strh	r3, [r7, #14]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8001a0a:	89bb      	ldrh	r3, [r7, #12]
 8001a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a10:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8001a12:	89bb      	ldrh	r3, [r7, #12]
 8001a14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a18:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	899b      	ldrh	r3, [r3, #12]
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	89bb      	ldrh	r3, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	89db      	ldrh	r3, [r3, #14]
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	89bb      	ldrh	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	89ba      	ldrh	r2, [r7, #12]
 8001a3a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	897a      	ldrh	r2, [r7, #10]
 8001a40:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	88da      	ldrh	r2, [r3, #6]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	89fa      	ldrh	r2, [r7, #14]
 8001a4e:	841a      	strh	r2, [r3, #32]
}
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop

08001a5c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	81bb      	strh	r3, [r7, #12]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	817b      	strh	r3, [r7, #10]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	8c1b      	ldrh	r3, [r3, #32]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	8c1b      	ldrh	r3, [r3, #32]
 8001a86:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	889b      	ldrh	r3, [r3, #4]
 8001a8c:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	8b9b      	ldrh	r3, [r3, #28]
 8001a92:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 8001a94:	89bb      	ldrh	r3, [r7, #12]
 8001a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a9a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8001a9c:	89bb      	ldrh	r3, [r7, #12]
 8001a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aa2:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	89bb      	ldrh	r3, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8001ab2:	897b      	ldrh	r3, [r7, #10]
 8001ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ab8:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	891b      	ldrh	r3, [r3, #8]
 8001abe:	031b      	lsls	r3, r3, #12
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	897b      	ldrh	r3, [r7, #10]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	885b      	ldrh	r3, [r3, #2]
 8001acc:	031b      	lsls	r3, r3, #12
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	897b      	ldrh	r3, [r7, #10]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001adc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d006      	beq.n	8001af2 <TIM_OC4Init+0x96>
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001aea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d10a      	bne.n	8001b08 <TIM_OC4Init+0xac>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8001af2:	89fb      	ldrh	r3, [r7, #14]
 8001af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001af8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	899b      	ldrh	r3, [r3, #12]
 8001afe:	019b      	lsls	r3, r3, #6
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	89fb      	ldrh	r3, [r7, #14]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	89fa      	ldrh	r2, [r7, #14]
 8001b0c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	89ba      	ldrh	r2, [r7, #12]
 8001b12:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	88da      	ldrh	r2, [r3, #6]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	897a      	ldrh	r2, [r7, #10]
 8001b22:	841a      	strh	r2, [r3, #32]
}
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop

08001b30 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10f      	bne.n	8001b62 <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	8859      	ldrh	r1, [r3, #2]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	889a      	ldrh	r2, [r3, #4]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	891b      	ldrh	r3, [r3, #8]
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f001 f966 	bl	8002e20 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	88db      	ldrh	r3, [r3, #6]
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f001 f816 	bl	8002b8c <TIM_SetIC1Prescaler>
 8001b60:	e036      	b.n	8001bd0 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d10f      	bne.n	8001b8a <TIM_ICInit+0x5a>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	8859      	ldrh	r1, [r3, #2]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	889a      	ldrh	r2, [r3, #4]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	891b      	ldrh	r3, [r3, #8]
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f001 f98e 	bl	8002e98 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	88db      	ldrh	r3, [r3, #6]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	4619      	mov	r1, r3
 8001b84:	f001 f81e 	bl	8002bc4 <TIM_SetIC2Prescaler>
 8001b88:	e022      	b.n	8001bd0 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d10f      	bne.n	8001bb2 <TIM_ICInit+0x82>
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	8859      	ldrh	r1, [r3, #2]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	889a      	ldrh	r2, [r3, #4]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	891b      	ldrh	r3, [r3, #8]
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f001 f9c0 	bl	8002f24 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	88db      	ldrh	r3, [r3, #6]
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4619      	mov	r1, r3
 8001bac:	f001 f828 	bl	8002c00 <TIM_SetIC3Prescaler>
 8001bb0:	e00e      	b.n	8001bd0 <TIM_ICInit+0xa0>
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	8859      	ldrh	r1, [r3, #2]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	889a      	ldrh	r2, [r3, #4]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	891b      	ldrh	r3, [r3, #8]
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f001 f9f2 	bl	8002fa8 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	88db      	ldrh	r3, [r3, #6]
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f001 f834 	bl	8002c38 <TIM_SetIC4Prescaler>
  }
}
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop

08001bd8 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8001be2:	2300      	movs	r3, #0
 8001be4:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8001be6:	2301      	movs	r3, #1
 8001be8:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	885b      	ldrh	r3, [r3, #2]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	81fb      	strh	r3, [r7, #14]
 8001bf6:	e001      	b.n	8001bfc <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	889b      	ldrh	r3, [r3, #4]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d102      	bne.n	8001c0a <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8001c04:	2302      	movs	r3, #2
 8001c06:	81bb      	strh	r3, [r7, #12]
 8001c08:	e001      	b.n	8001c0e <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d11c      	bne.n	8001c50 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	8859      	ldrh	r1, [r3, #2]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	889a      	ldrh	r2, [r3, #4]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	891b      	ldrh	r3, [r3, #8]
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f001 f8fc 	bl	8002e20 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	88db      	ldrh	r3, [r3, #6]
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f000 ffac 	bl	8002b8c <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	891b      	ldrh	r3, [r3, #8]
 8001c38:	89f9      	ldrh	r1, [r7, #14]
 8001c3a:	89ba      	ldrh	r2, [r7, #12]
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f001 f92b 	bl	8002e98 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	88db      	ldrh	r3, [r3, #6]
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f000 ffbb 	bl	8002bc4 <TIM_SetIC2Prescaler>
 8001c4e:	e01b      	b.n	8001c88 <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	8859      	ldrh	r1, [r3, #2]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	889a      	ldrh	r2, [r3, #4]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	891b      	ldrh	r3, [r3, #8]
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f001 f91b 	bl	8002e98 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	88db      	ldrh	r3, [r3, #6]
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f000 ffab 	bl	8002bc4 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	891b      	ldrh	r3, [r3, #8]
 8001c72:	89f9      	ldrh	r1, [r7, #14]
 8001c74:	89ba      	ldrh	r2, [r7, #12]
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f001 f8d2 	bl	8002e20 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	88db      	ldrh	r3, [r3, #6]
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4619      	mov	r1, r3
 8001c84:	f000 ff82 	bl	8002b8c <TIM_SetIC1Prescaler>
  }
}
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop

08001c90 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *   contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	881a      	ldrh	r2, [r3, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	885b      	ldrh	r3, [r3, #2]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001caa:	4313      	orrs	r3, r2
 8001cac:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop

08001ce0 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cee:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	721a      	strb	r2, [r3, #8]
}
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop

08001d14 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	81da      	strh	r2, [r3, #14]
}
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop

08001d58 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct : pointer to a TIM_ICInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	811a      	strh	r2, [r3, #8]
}
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *   will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	819a      	strh	r2, [r3, #12]
}
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d008      	beq.n	8001de8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	801a      	strh	r2, [r3, #0]
 8001de6:	e007      	b.n	8001df8 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	f023 0301 	bic.w	r3, r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	801a      	strh	r2, [r3, #0]
  }
}
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop

08001e04 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001e2e:	e009      	b.n	8001e44 <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop

08001e50 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	460a      	mov	r2, r1
 8001e5c:	807a      	strh	r2, [r7, #2]
 8001e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e60:	787b      	ldrb	r3, [r7, #1]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	899b      	ldrh	r3, [r3, #12]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	819a      	strh	r2, [r3, #12]
 8001e76:	e009      	b.n	8001e8c <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	899b      	ldrh	r3, [r3, #12]
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	887b      	ldrh	r3, [r7, #2]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	4013      	ands	r3, r2
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	819a      	strh	r2, [r3, #12]
  }
}
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop

08001e98 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	829a      	strh	r2, [r3, #20]
}
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Byte and TIM_DMABurstLength_18Bytes.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	460a      	mov	r2, r1
 8001ec0:	807a      	strh	r2, [r7, #2]
 8001ec2:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8001ec4:	887a      	ldrh	r2, [r7, #2]
 8001ec6:	883b      	ldrh	r3, [r7, #0]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	460a      	mov	r2, r1
 8001ee8:	807a      	strh	r2, [r7, #2]
 8001eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	899b      	ldrh	r3, [r3, #12]
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	819a      	strh	r2, [r3, #12]
 8001f02:	e009      	b.n	8001f18 <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	899b      	ldrh	r3, [r3, #12]
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	887b      	ldrh	r3, [r7, #2]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4013      	ands	r3, r2
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	819a      	strh	r2, [r3, #12]
  }
}
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop

08001f24 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *   to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	891b      	ldrh	r3, [r3, #8]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	f023 0307 	bic.w	r3, r3, #7
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	811a      	strh	r2, [r3, #8]
}
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop

08001f48 <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8001f54:	887b      	ldrh	r3, [r7, #2]
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f000 f8c9 	bl	80020f0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	891b      	ldrh	r3, [r3, #8]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	f043 0307 	orr.w	r3, r3, #7
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	811a      	strh	r2, [r3, #8]
}
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	8179      	strh	r1, [r7, #10]
 8001f7e:	813a      	strh	r2, [r7, #8]
 8001f80:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8001f82:	897b      	ldrh	r3, [r7, #10]
 8001f84:	2b60      	cmp	r3, #96	; 0x60
 8001f86:	d107      	bne.n	8001f98 <TIM_TIxExternalClockConfig+0x24>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8001f88:	893a      	ldrh	r2, [r7, #8]
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	4611      	mov	r1, r2
 8001f90:	2201      	movs	r2, #1
 8001f92:	f000 ff81 	bl	8002e98 <TI2_Config>
 8001f96:	e006      	b.n	8001fa6 <TIM_TIxExternalClockConfig+0x32>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8001f98:	893a      	ldrh	r2, [r7, #8]
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f000 ff3d 	bl	8002e20 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8001fa6:	897b      	ldrh	r3, [r7, #10]
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	4619      	mov	r1, r3
 8001fac:	f000 f8a0 	bl	80020f0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	891b      	ldrh	r3, [r3, #8]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	f043 0307 	orr.w	r3, r3, #7
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	811a      	strh	r2, [r3, #8]
}
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop

08001fc8 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	8179      	strh	r1, [r7, #10]
 8001fd2:	813a      	strh	r2, [r7, #8]
 8001fd4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8001fda:	8979      	ldrh	r1, [r7, #10]
 8001fdc:	893a      	ldrh	r2, [r7, #8]
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f831 	bl	8002048 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	891b      	ldrh	r3, [r3, #8]
 8001fea:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001fec:	8afb      	ldrh	r3, [r7, #22]
 8001fee:	f023 0307 	bic.w	r3, r3, #7
 8001ff2:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8001ff4:	8afb      	ldrh	r3, [r7, #22]
 8001ff6:	f043 0307 	orr.w	r3, r3, #7
 8001ffa:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001ffc:	8afb      	ldrh	r3, [r7, #22]
 8001ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002002:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 8002004:	8afb      	ldrh	r3, [r7, #22]
 8002006:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800200a:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8afa      	ldrh	r2, [r7, #22]
 8002010:	811a      	strh	r2, [r3, #8]
}
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	8179      	strh	r1, [r7, #10]
 8002022:	813a      	strh	r2, [r7, #8]
 8002024:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002026:	8979      	ldrh	r1, [r7, #10]
 8002028:	893a      	ldrh	r2, [r7, #8]
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f80b 	bl	8002048 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	891b      	ldrh	r3, [r3, #8]
 8002036:	b29b      	uxth	r3, r3
 8002038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	811a      	strh	r2, [r3, #8]
}
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	8179      	strh	r1, [r7, #10]
 8002052:	813a      	strh	r2, [r7, #8]
 8002054:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	891b      	ldrh	r3, [r3, #8]
 800205e:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
 8002060:	8afb      	ldrh	r3, [r7, #22]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	b29a      	uxth	r2, r3
 800206c:	893b      	ldrh	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
 8002070:	b29a      	uxth	r2, r3
 8002072:	897b      	ldrh	r3, [r7, #10]
 8002074:	4313      	orrs	r3, r2
 8002076:	b29a      	uxth	r2, r3
 8002078:	8afb      	ldrh	r3, [r7, #22]
 800207a:	4313      	orrs	r3, r2
 800207c:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8afa      	ldrh	r2, [r7, #22]
 8002082:	811a      	strh	r2, [r3, #8]
}
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop

08002090 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	460a      	mov	r2, r1
 800209c:	807a      	strh	r2, [r7, #2]
 800209e:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	883a      	ldrh	r2, [r7, #0]
 80020aa:	829a      	strh	r2, [r3, #20]
}
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop

080020b8 <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80020ce:	89fb      	ldrh	r3, [r7, #14]
 80020d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d4:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80020d6:	89fa      	ldrh	r2, [r7, #14]
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	4313      	orrs	r3, r2
 80020dc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	89fa      	ldrh	r2, [r7, #14]
 80020e2:	801a      	strh	r2, [r3, #0]
}
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop

080020f0 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	891b      	ldrh	r3, [r3, #8]
 8002104:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210c:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800210e:	89fa      	ldrh	r2, [r7, #14]
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	4313      	orrs	r3, r2
 8002114:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	89fa      	ldrh	r2, [r7, #14]
 800211a:	811a      	strh	r2, [r3, #8]
}
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop

08002128 <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	8179      	strh	r1, [r7, #10]
 8002132:	813a      	strh	r2, [r7, #8]
 8002134:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	891b      	ldrh	r3, [r3, #8]
 8002146:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8b1b      	ldrh	r3, [r3, #24]
 800214c:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8c1b      	ldrh	r3, [r3, #32]
 8002152:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002154:	8afb      	ldrh	r3, [r7, #22]
 8002156:	f023 0307 	bic.w	r3, r3, #7
 800215a:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 800215c:	8afa      	ldrh	r2, [r7, #22]
 800215e:	897b      	ldrh	r3, [r7, #10]
 8002160:	4313      	orrs	r3, r2
 8002162:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8002164:	8abb      	ldrh	r3, [r7, #20]
 8002166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002170:	8abb      	ldrh	r3, [r7, #20]
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 800217c:	8a7b      	ldrh	r3, [r7, #18]
 800217e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002182:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	b29a      	uxth	r2, r3
 800218a:	893b      	ldrh	r3, [r7, #8]
 800218c:	4313      	orrs	r3, r2
 800218e:	b29a      	uxth	r2, r3
 8002190:	8a7b      	ldrh	r3, [r7, #18]
 8002192:	4313      	orrs	r3, r2
 8002194:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8afa      	ldrh	r2, [r7, #22]
 800219a:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8aba      	ldrh	r2, [r7, #20]
 80021a0:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8a7a      	ldrh	r2, [r7, #18]
 80021a6:	841a      	strh	r2, [r3, #32]
}
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop

080021b4 <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	8b1b      	ldrh	r3, [r3, #24]
 80021c8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 80021ca:	89fb      	ldrh	r3, [r7, #14]
 80021cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d0:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80021d2:	89fa      	ldrh	r2, [r7, #14]
 80021d4:	887b      	ldrh	r3, [r7, #2]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	89fa      	ldrh	r2, [r7, #14]
 80021de:	831a      	strh	r2, [r3, #24]
}
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop

080021ec <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8b1b      	ldrh	r3, [r3, #24]
 8002200:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8002202:	89fb      	ldrh	r3, [r7, #14]
 8002204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002208:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800220a:	887b      	ldrh	r3, [r7, #2]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b29a      	uxth	r2, r3
 8002210:	89fb      	ldrh	r3, [r7, #14]
 8002212:	4313      	orrs	r3, r2
 8002214:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	89fa      	ldrh	r2, [r7, #14]
 800221a:	831a      	strh	r2, [r3, #24]
}
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop

08002228 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	8b9b      	ldrh	r3, [r3, #28]
 800223c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 800223e:	89fb      	ldrh	r3, [r7, #14]
 8002240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002244:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002246:	89fa      	ldrh	r2, [r7, #14]
 8002248:	887b      	ldrh	r3, [r7, #2]
 800224a:	4313      	orrs	r3, r2
 800224c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	89fa      	ldrh	r2, [r7, #14]
 8002252:	839a      	strh	r2, [r3, #28]
}
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop

08002260 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	8b9b      	ldrh	r3, [r3, #28]
 8002274:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8002276:	89fb      	ldrh	r3, [r7, #14]
 8002278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800227c:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	b29a      	uxth	r2, r3
 8002284:	89fb      	ldrh	r3, [r7, #14]
 8002286:	4313      	orrs	r3, r2
 8002288:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	89fa      	ldrh	r2, [r7, #14]
 800228e:	839a      	strh	r2, [r3, #28]
}
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop

0800229c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	801a      	strh	r2, [r3, #0]
 80022be:	e007      	b.n	80022d0 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	801a      	strh	r2, [r3, #0]
  }
}
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop

080022dc <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	889b      	ldrh	r3, [r3, #4]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	809a      	strh	r2, [r3, #4]
 80022fe:	e007      	b.n	8002310 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	889b      	ldrh	r3, [r3, #4]
 8002304:	b29b      	uxth	r3, r3
 8002306:	f023 0304 	bic.w	r3, r3, #4
 800230a:	b29a      	uxth	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	809a      	strh	r2, [r3, #4]
  }
}
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop

0800231c <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	889b      	ldrh	r3, [r3, #4]
 8002332:	b29b      	uxth	r3, r3
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	b29a      	uxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	809a      	strh	r2, [r3, #4]
 800233e:	e007      	b.n	8002350 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	889b      	ldrh	r3, [r3, #4]
 8002344:	b29b      	uxth	r3, r3
 8002346:	f023 0308 	bic.w	r3, r3, #8
 800234a:	b29a      	uxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	809a      	strh	r2, [r3, #4]
  }
}
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop

0800235c <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	889b      	ldrh	r3, [r3, #4]
 8002372:	b29b      	uxth	r3, r3
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	809a      	strh	r2, [r3, #4]
 800237e:	e007      	b.n	8002390 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	889b      	ldrh	r3, [r3, #4]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	809a      	strh	r2, [r3, #4]
  }
}
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop

0800239c <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	8b1b      	ldrh	r3, [r3, #24]
 80023b0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 80023b2:	89fb      	ldrh	r3, [r7, #14]
 80023b4:	f023 0308 	bic.w	r3, r3, #8
 80023b8:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80023ba:	89fa      	ldrh	r2, [r7, #14]
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	4313      	orrs	r3, r2
 80023c0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	89fa      	ldrh	r2, [r7, #14]
 80023c6:	831a      	strh	r2, [r3, #24]
}
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop

080023d4 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	8b1b      	ldrh	r3, [r3, #24]
 80023e8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 80023ea:	89fb      	ldrh	r3, [r7, #14]
 80023ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023f0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80023f2:	887b      	ldrh	r3, [r7, #2]
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	89fb      	ldrh	r3, [r7, #14]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	89fa      	ldrh	r2, [r7, #14]
 8002402:	831a      	strh	r2, [r3, #24]
}
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop

08002410 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	8b9b      	ldrh	r3, [r3, #28]
 8002424:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8002426:	89fb      	ldrh	r3, [r7, #14]
 8002428:	f023 0308 	bic.w	r3, r3, #8
 800242c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800242e:	89fa      	ldrh	r2, [r7, #14]
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	4313      	orrs	r3, r2
 8002434:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	89fa      	ldrh	r2, [r7, #14]
 800243a:	839a      	strh	r2, [r3, #28]
}
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop

08002448 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8b9b      	ldrh	r3, [r3, #28]
 800245c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 800245e:	89fb      	ldrh	r3, [r7, #14]
 8002460:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002464:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	b29a      	uxth	r2, r3
 800246c:	89fb      	ldrh	r3, [r7, #14]
 800246e:	4313      	orrs	r3, r2
 8002470:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	89fa      	ldrh	r2, [r7, #14]
 8002476:	839a      	strh	r2, [r3, #28]
}
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop

08002484 <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	8b1b      	ldrh	r3, [r3, #24]
 8002498:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 800249a:	89fb      	ldrh	r3, [r7, #14]
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 80024a2:	89fa      	ldrh	r2, [r7, #14]
 80024a4:	887b      	ldrh	r3, [r7, #2]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	89fa      	ldrh	r2, [r7, #14]
 80024ae:	831a      	strh	r2, [r3, #24]
}
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop

080024bc <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	8b1b      	ldrh	r3, [r3, #24]
 80024d0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 80024d2:	89fb      	ldrh	r3, [r7, #14]
 80024d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024d8:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	b29a      	uxth	r2, r3
 80024e0:	89fb      	ldrh	r3, [r7, #14]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	89fa      	ldrh	r2, [r7, #14]
 80024ea:	831a      	strh	r2, [r3, #24]
}
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop

080024f8 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	8b9b      	ldrh	r3, [r3, #28]
 800250c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 800250e:	89fb      	ldrh	r3, [r7, #14]
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002516:	89fa      	ldrh	r2, [r7, #14]
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	4313      	orrs	r3, r2
 800251c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	89fa      	ldrh	r2, [r7, #14]
 8002522:	839a      	strh	r2, [r3, #28]
}
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop

08002530 <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	8b9b      	ldrh	r3, [r3, #28]
 8002544:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 8002546:	89fb      	ldrh	r3, [r7, #14]
 8002548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800254c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	b29a      	uxth	r2, r3
 8002554:	89fb      	ldrh	r3, [r7, #14]
 8002556:	4313      	orrs	r3, r2
 8002558:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	89fa      	ldrh	r2, [r7, #14]
 800255e:	839a      	strh	r2, [r3, #28]
}
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop

0800256c <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	8b1b      	ldrh	r3, [r3, #24]
 8002580:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8002582:	89fb      	ldrh	r3, [r7, #14]
 8002584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002588:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800258a:	89fa      	ldrh	r2, [r7, #14]
 800258c:	887b      	ldrh	r3, [r7, #2]
 800258e:	4313      	orrs	r3, r2
 8002590:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	89fa      	ldrh	r2, [r7, #14]
 8002596:	831a      	strh	r2, [r3, #24]
}
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop

080025a4 <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	8b1b      	ldrh	r3, [r3, #24]
 80025b8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 80025ba:	89fb      	ldrh	r3, [r7, #14]
 80025bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80025c0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	89fb      	ldrh	r3, [r7, #14]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	89fa      	ldrh	r2, [r7, #14]
 80025d2:	831a      	strh	r2, [r3, #24]
}
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop

080025e0 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	8b9b      	ldrh	r3, [r3, #28]
 80025f4:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025fc:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80025fe:	89fa      	ldrh	r2, [r7, #14]
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	4313      	orrs	r3, r2
 8002604:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	89fa      	ldrh	r2, [r7, #14]
 800260a:	839a      	strh	r2, [r3, #28]
}
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop

08002618 <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8b9b      	ldrh	r3, [r3, #28]
 800262c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 800262e:	89fb      	ldrh	r3, [r7, #14]
 8002630:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002634:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	b29a      	uxth	r2, r3
 800263c:	89fb      	ldrh	r3, [r7, #14]
 800263e:	4313      	orrs	r3, r2
 8002640:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	89fa      	ldrh	r2, [r7, #14]
 8002646:	839a      	strh	r2, [r3, #28]
}
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop

08002654 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	8c1b      	ldrh	r3, [r3, #32]
 8002668:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 800266a:	89fb      	ldrh	r3, [r7, #14]
 800266c:	f023 0302 	bic.w	r3, r3, #2
 8002670:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 8002672:	89fa      	ldrh	r2, [r7, #14]
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	4313      	orrs	r3, r2
 8002678:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	89fa      	ldrh	r2, [r7, #14]
 800267e:	841a      	strh	r2, [r3, #32]
}
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop

0800268c <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8c1b      	ldrh	r3, [r3, #32]
 80026a0:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 80026a2:	89fb      	ldrh	r3, [r7, #14]
 80026a4:	f023 0308 	bic.w	r3, r3, #8
 80026a8:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 80026aa:	89fa      	ldrh	r2, [r7, #14]
 80026ac:	887b      	ldrh	r3, [r7, #2]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	89fa      	ldrh	r2, [r7, #14]
 80026b6:	841a      	strh	r2, [r3, #32]
}
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop

080026c4 <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	8c1b      	ldrh	r3, [r3, #32]
 80026d8:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 80026da:	89fb      	ldrh	r3, [r7, #14]
 80026dc:	f023 0320 	bic.w	r3, r3, #32
 80026e0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	89fb      	ldrh	r3, [r7, #14]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	89fa      	ldrh	r2, [r7, #14]
 80026f2:	841a      	strh	r2, [r3, #32]
}
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop

08002700 <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8c1b      	ldrh	r3, [r3, #32]
 8002714:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 8002716:	89fb      	ldrh	r3, [r7, #14]
 8002718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800271c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	b29a      	uxth	r2, r3
 8002724:	89fb      	ldrh	r3, [r7, #14]
 8002726:	4313      	orrs	r3, r2
 8002728:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	89fa      	ldrh	r2, [r7, #14]
 800272e:	841a      	strh	r2, [r3, #32]
}
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop

0800273c <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8c1b      	ldrh	r3, [r3, #32]
 8002750:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8002752:	89fb      	ldrh	r3, [r7, #14]
 8002754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002758:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	b29a      	uxth	r2, r3
 8002760:	89fb      	ldrh	r3, [r7, #14]
 8002762:	4313      	orrs	r3, r2
 8002764:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	89fa      	ldrh	r2, [r7, #14]
 800276a:	841a      	strh	r2, [r3, #32]
}
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop

08002778 <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	8c1b      	ldrh	r3, [r3, #32]
 800278c:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 800278e:	89fb      	ldrh	r3, [r7, #14]
 8002790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002794:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	b29a      	uxth	r2, r3
 800279c:	89fb      	ldrh	r3, [r7, #14]
 800279e:	4313      	orrs	r3, r2
 80027a0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	89fa      	ldrh	r2, [r7, #14]
 80027a6:	841a      	strh	r2, [r3, #32]
}
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop

080027b4 <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	8c1b      	ldrh	r3, [r3, #32]
 80027c8:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 80027ca:	89fb      	ldrh	r3, [r7, #14]
 80027cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027d0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 80027d2:	887b      	ldrh	r3, [r7, #2]
 80027d4:	031b      	lsls	r3, r3, #12
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	89fb      	ldrh	r3, [r7, #14]
 80027da:	4313      	orrs	r3, r2
 80027dc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	89fa      	ldrh	r2, [r7, #14]
 80027e2:	841a      	strh	r2, [r3, #32]
}
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop

080027f0 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	460a      	mov	r2, r1
 80027fc:	807a      	strh	r2, [r7, #2]
 80027fe:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	2201      	movs	r2, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	8c1b      	ldrh	r3, [r3, #32]
 8002812:	b29a      	uxth	r2, r3
 8002814:	89fb      	ldrh	r3, [r7, #14]
 8002816:	43db      	mvns	r3, r3
 8002818:	b29b      	uxth	r3, r3
 800281a:	4013      	ands	r3, r2
 800281c:	b29a      	uxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	8c1b      	ldrh	r3, [r3, #32]
 8002826:	b29a      	uxth	r2, r3
 8002828:	8839      	ldrh	r1, [r7, #0]
 800282a:	887b      	ldrh	r3, [r7, #2]
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	b29b      	uxth	r3, r3
 8002832:	4313      	orrs	r3, r2
 8002834:	b29a      	uxth	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	841a      	strh	r2, [r3, #32]
}
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	460a      	mov	r2, r1
 8002850:	807a      	strh	r2, [r7, #2]
 8002852:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
 8002858:	887b      	ldrh	r3, [r7, #2]
 800285a:	2204      	movs	r2, #4
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8c1b      	ldrh	r3, [r3, #32]
 8002866:	b29a      	uxth	r2, r3
 8002868:	89fb      	ldrh	r3, [r7, #14]
 800286a:	43db      	mvns	r3, r3
 800286c:	b29b      	uxth	r3, r3
 800286e:	4013      	ands	r3, r2
 8002870:	b29a      	uxth	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	8c1b      	ldrh	r3, [r3, #32]
 800287a:	b29a      	uxth	r2, r3
 800287c:	8839      	ldrh	r1, [r7, #0]
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	b29b      	uxth	r3, r3
 8002886:	4313      	orrs	r3, r2
 8002888:	b29a      	uxth	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	841a      	strh	r2, [r3, #32]
}
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	460a      	mov	r2, r1
 80028a4:	807a      	strh	r2, [r7, #2]
 80028a6:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3318      	adds	r3, #24
 80028b8:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
 80028ba:	887b      	ldrh	r3, [r7, #2]
 80028bc:	2201      	movs	r2, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8c1b      	ldrh	r3, [r3, #32]
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	897b      	ldrh	r3, [r7, #10]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	4013      	ands	r3, r2
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 80028d8:	887b      	ldrh	r3, [r7, #2]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <TIM_SelectOCxM+0x4c>
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d112      	bne.n	800290a <TIM_SelectOCxM+0x72>
  {
    tmp += (TIM_Channel>>1);
 80028e4:	887b      	ldrh	r3, [r7, #2]
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4413      	add	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028fa:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	6811      	ldr	r1, [r2, #0]
 8002902:	883a      	ldrh	r2, [r7, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	e015      	b.n	8002936 <TIM_SelectOCxM+0x9e>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	3b04      	subs	r3, #4
 800290e:	b29b      	uxth	r3, r3
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	b29b      	uxth	r3, r3
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002924:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	6811      	ldr	r1, [r2, #0]
 800292c:	883a      	ldrh	r2, [r7, #0]
 800292e:	0212      	lsls	r2, r2, #8
 8002930:	b292      	uxth	r2, r2
 8002932:	430a      	orrs	r2, r1
 8002934:	601a      	str	r2, [r3, #0]
  }
}
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	b29a      	uxth	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	801a      	strh	r2, [r3, #0]
 8002962:	e007      	b.n	8002974 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	f023 0302 	bic.w	r3, r3, #2
 800296e:	b29a      	uxth	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	801a      	strh	r2, [r3, #0]
  }
}
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop

08002980 <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800298c:	887b      	ldrh	r3, [r7, #2]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	801a      	strh	r2, [r3, #0]
 80029a2:	e007      	b.n	80029b4 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	801a      	strh	r2, [r3, #0]
  }
}
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop

080029c0 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	889b      	ldrh	r3, [r3, #4]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029dc:	b29a      	uxth	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	809a      	strh	r2, [r3, #4]
 80029e2:	e007      	b.n	80029f4 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	889b      	ldrh	r3, [r3, #4]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	809a      	strh	r2, [r3, #4]
  }
}
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop

08002a00 <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f023 0308 	bic.w	r3, r3, #8
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	887b      	ldrh	r3, [r7, #2]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	801a      	strh	r2, [r3, #0]
}
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop

08002a38 <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	889b      	ldrh	r3, [r3, #4]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	889b      	ldrh	r3, [r3, #4]
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	887b      	ldrh	r3, [r7, #2]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	809a      	strh	r2, [r3, #4]
}
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop

08002a70 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	891b      	ldrh	r3, [r3, #8]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f023 0307 	bic.w	r3, r3, #7
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	891b      	ldrh	r3, [r3, #8]
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	887b      	ldrh	r3, [r7, #2]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	811a      	strh	r2, [r3, #8]
}
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop

08002aa8 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	891b      	ldrh	r3, [r3, #8]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	891b      	ldrh	r3, [r3, #8]
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	887b      	ldrh	r3, [r7, #2]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	811a      	strh	r2, [r3, #8]
}
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop

08002ae0 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop

08002b8c <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8b1b      	ldrh	r3, [r3, #24]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f023 030c 	bic.w	r3, r3, #12
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8b1b      	ldrh	r3, [r3, #24]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	887b      	ldrh	r3, [r7, #2]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	831a      	strh	r2, [r3, #24]
}
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop

08002bc4 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	8b1b      	ldrh	r3, [r3, #24]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	8b1b      	ldrh	r3, [r3, #24]
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	887b      	ldrh	r3, [r7, #2]
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4313      	orrs	r3, r2
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	831a      	strh	r2, [r3, #24]
}
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop

08002c00 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8b9b      	ldrh	r3, [r3, #28]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f023 030c 	bic.w	r3, r3, #12
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8b9b      	ldrh	r3, [r3, #28]
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	887b      	ldrh	r3, [r7, #2]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	839a      	strh	r2, [r3, #28]
}
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop

08002c38 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	8b9b      	ldrh	r3, [r3, #28]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	8b9b      	ldrh	r3, [r3, #28]
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	4313      	orrs	r3, r2
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	839a      	strh	r2, [r3, #28]
}
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop

08002c74 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	801a      	strh	r2, [r3, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	801a      	strh	r2, [r3, #0]
}
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002cb8:	b29b      	uxth	r3, r3
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop

08002cc8 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002cd4:	b29b      	uxth	r3, r3
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop

08002ce4 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002cf0:	b29b      	uxth	r3, r3
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop

08002d00 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d0e:	b29b      	uxth	r3, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d28:	b29b      	uxth	r3, r3
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop

08002d38 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	b29b      	uxth	r3, r3
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop

08002d54 <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8a1b      	ldrh	r3, [r3, #16]
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	887b      	ldrh	r3, [r7, #2]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e001      	b.n	8002d7e <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002d98:	887b      	ldrh	r3, [r7, #2]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	821a      	strh	r2, [r3, #16]
}
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	81bb      	strh	r3, [r7, #12]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8a1b      	ldrh	r3, [r3, #16]
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	887b      	ldrh	r3, [r7, #2]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	899b      	ldrh	r3, [r3, #12]
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	887b      	ldrh	r3, [r7, #2]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002ddc:	89bb      	ldrh	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <TIM_GetITStatus+0x42>
 8002de2:	897b      	ldrh	r3, [r7, #10]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	e001      	b.n	8002df2 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002e0c:	887b      	ldrh	r3, [r7, #2]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	821a      	strh	r2, [r3, #16]
}
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	8179      	strh	r1, [r7, #10]
 8002e2a:	813a      	strh	r2, [r7, #8]
 8002e2c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	82fb      	strh	r3, [r7, #22]
 8002e32:	2300      	movs	r3, #0
 8002e34:	82bb      	strh	r3, [r7, #20]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8c1b      	ldrh	r3, [r3, #32]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8b1b      	ldrh	r3, [r3, #24]
 8002e4a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8c1b      	ldrh	r3, [r3, #32]
 8002e50:	82bb      	strh	r3, [r7, #20]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8002e52:	8afb      	ldrh	r3, [r7, #22]
 8002e54:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8002e58:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002e5a:	88fb      	ldrh	r3, [r7, #6]
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	893b      	ldrh	r3, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	8afb      	ldrh	r3, [r7, #22]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8002e6c:	8abb      	ldrh	r3, [r7, #20]
 8002e6e:	f023 0302 	bic.w	r3, r3, #2
 8002e72:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002e74:	897a      	ldrh	r2, [r7, #10]
 8002e76:	8abb      	ldrh	r3, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8afa      	ldrh	r2, [r7, #22]
 8002e86:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8aba      	ldrh	r2, [r7, #20]
 8002e8c:	841a      	strh	r2, [r3, #32]
}
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	8179      	strh	r1, [r7, #10]
 8002ea2:	813a      	strh	r2, [r7, #8]
 8002ea4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	82fb      	strh	r3, [r7, #22]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	82bb      	strh	r3, [r7, #20]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8c1b      	ldrh	r3, [r3, #32]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f023 0310 	bic.w	r3, r3, #16
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8b1b      	ldrh	r3, [r3, #24]
 8002ec6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8c1b      	ldrh	r3, [r3, #32]
 8002ecc:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8002ece:	897b      	ldrh	r3, [r7, #10]
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8002ed4:	8afb      	ldrh	r3, [r7, #22]
 8002ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eda:	051b      	lsls	r3, r3, #20
 8002edc:	0d1b      	lsrs	r3, r3, #20
 8002ede:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	031b      	lsls	r3, r3, #12
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	8afb      	ldrh	r3, [r7, #22]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002eec:	893b      	ldrh	r3, [r7, #8]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	8afb      	ldrh	r3, [r7, #22]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC2E Bit */
   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 8002ef8:	8abb      	ldrh	r3, [r7, #20]
 8002efa:	f023 0320 	bic.w	r3, r3, #32
 8002efe:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002f00:	8a7a      	ldrh	r2, [r7, #18]
 8002f02:	8abb      	ldrh	r3, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	f043 0310 	orr.w	r3, r3, #16
 8002f0c:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8afa      	ldrh	r2, [r7, #22]
 8002f12:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8aba      	ldrh	r2, [r7, #20]
 8002f18:	841a      	strh	r2, [r3, #32]
}
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	8179      	strh	r1, [r7, #10]
 8002f2e:	813a      	strh	r2, [r7, #8]
 8002f30:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	82fb      	strh	r3, [r7, #22]
 8002f36:	2300      	movs	r3, #0
 8002f38:	82bb      	strh	r3, [r7, #20]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8c1b      	ldrh	r3, [r3, #32]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8b9b      	ldrh	r3, [r3, #28]
 8002f52:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8c1b      	ldrh	r3, [r3, #32]
 8002f58:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8002f5a:	897b      	ldrh	r3, [r7, #10]
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8002f60:	8afb      	ldrh	r3, [r7, #22]
 8002f62:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8002f66:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	893b      	ldrh	r3, [r7, #8]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	8afb      	ldrh	r3, [r7, #22]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 8002f7a:	8abb      	ldrh	r3, [r7, #20]
 8002f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f80:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002f82:	8a7a      	ldrh	r2, [r7, #18]
 8002f84:	8abb      	ldrh	r3, [r7, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8e:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8afa      	ldrh	r2, [r7, #22]
 8002f94:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8aba      	ldrh	r2, [r7, #20]
 8002f9a:	841a      	strh	r2, [r3, #32]
}
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop

08002fa8 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	8179      	strh	r1, [r7, #10]
 8002fb2:	813a      	strh	r2, [r7, #8]
 8002fb4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	82fb      	strh	r3, [r7, #22]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	82bb      	strh	r3, [r7, #20]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8c1b      	ldrh	r3, [r3, #32]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8b9b      	ldrh	r3, [r3, #28]
 8002fd6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8c1b      	ldrh	r3, [r3, #32]
 8002fdc:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8002fde:	897b      	ldrh	r3, [r7, #10]
 8002fe0:	031b      	lsls	r3, r3, #12
 8002fe2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8002fe4:	8afb      	ldrh	r3, [r7, #22]
 8002fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fea:	051b      	lsls	r3, r3, #20
 8002fec:	0d1b      	lsrs	r3, r3, #20
 8002fee:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8002ff0:	893b      	ldrh	r3, [r7, #8]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	8afb      	ldrh	r3, [r7, #22]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	031b      	lsls	r3, r3, #12
 8003000:	b29a      	uxth	r2, r3
 8003002:	8afb      	ldrh	r3, [r7, #22]
 8003004:	4313      	orrs	r3, r2
 8003006:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8003008:	8abb      	ldrh	r3, [r7, #20]
 800300a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800300e:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8003010:	8a7a      	ldrh	r2, [r7, #18]
 8003012:	8abb      	ldrh	r3, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	b29b      	uxth	r3, r3
 8003018:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800301c:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8afa      	ldrh	r2, [r7, #22]
 8003022:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8aba      	ldrh	r2, [r7, #20]
 8003028:	841a      	strh	r2, [r3, #32]
}
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800303c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003040:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003044:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003054:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800305c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	2300      	movs	r3, #0
 8003064:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8003068:	400b      	ands	r3, r1
 800306a:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800306c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003070:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003074:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003078:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003082:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003086:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800308c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003090:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003094:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800309e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80030a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80030a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80030b0:	6852      	ldr	r2, [r2, #4]
 80030b2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80030b6:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80030b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80030c0:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80030c4:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80030c6:	f000 f89f 	bl	8003208 <SetSysClock>
}
 80030ca:	bd80      	pop	{r7, pc}

080030cc <SystemCoreClockUpdate>:
  * @note   None
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80030de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d00d      	beq.n	8003110 <SystemCoreClockUpdate+0x44>
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d015      	beq.n	8003124 <SystemCoreClockUpdate+0x58>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d15b      	bne.n	80031b4 <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_Value;
 80030fc:	f240 13e4 	movw	r3, #484	; 0x1e4
 8003100:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003104:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8003108:	f2c0 027a 	movt	r2, #122	; 0x7a
 800310c:	601a      	str	r2, [r3, #0]
      break;
 800310e:	e05b      	b.n	80031c8 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_Value;
 8003110:	f240 13e4 	movw	r3, #484	; 0x1e4
 8003114:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003118:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 800311c:	f2c0 027a 	movt	r2, #122	; 0x7a
 8003120:	601a      	str	r2, [r3, #0]
      break;
 8003122:	e051      	b.n	80031c8 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8003124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003128:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003132:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8003134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003138:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003142:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	0c9b      	lsrs	r3, r3, #18
 8003148:	3302      	adds	r3, #2
 800314a:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10c      	bne.n	800316c <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_Value >> 1) * pllmull;
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003158:	f2c0 033d 	movt	r3, #61	; 0x3d
 800315c:	fb03 f202 	mul.w	r2, r3, r2
 8003160:	f240 13e4 	movw	r3, #484	; 0x1e4
 8003164:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e022      	b.n	80031b2 <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_Value / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800316c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003170:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00c      	beq.n	8003198 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_Value >> 1) * pllmull;
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003184:	f2c0 033d 	movt	r3, #61	; 0x3d
 8003188:	fb03 f202 	mul.w	r2, r3, r2
 800318c:	f240 13e4 	movw	r3, #484	; 0x1e4
 8003190:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	e00c      	b.n	80031b2 <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_Value * pllmull;
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800319e:	f2c0 037a 	movt	r3, #122	; 0x7a
 80031a2:	fb03 f202 	mul.w	r2, r3, r2
 80031a6:	f240 13e4 	movw	r3, #484	; 0x1e4
 80031aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031ae:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80031b0:	e00a      	b.n	80031c8 <SystemCoreClockUpdate+0xfc>
 80031b2:	e009      	b.n	80031c8 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_Value;
 80031b4:	f240 13e4 	movw	r3, #484	; 0x1e4
 80031b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031bc:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 80031c0:	f2c0 027a 	movt	r2, #122	; 0x7a
 80031c4:	601a      	str	r2, [r3, #0]
      break;
 80031c6:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80031c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d6:	091a      	lsrs	r2, r3, #4
 80031d8:	f240 13e8 	movw	r3, #488	; 0x1e8
 80031dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031e0:	5c9b      	ldrb	r3, [r3, r2]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80031e6:	f240 13e4 	movw	r3, #484	; 0x1e4
 80031ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	40da      	lsrs	r2, r3
 80031f4:	f240 13e4 	movw	r3, #484	; 0x1e4
 80031f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031fc:	601a      	str	r2, [r3, #0]
}
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800320c:	f000 f802 	bl	8003214 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop

08003214 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	2300      	movs	r3, #0
 8003220:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003226:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800322a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800322e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003238:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800323a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800323e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003248:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3301      	adds	r3, #1
 800324e:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d103      	bne.n	800325e <SetSysClockTo72+0x4a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800325c:	d1ed      	bne.n	800323a <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800325e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003262:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
 8003270:	2301      	movs	r3, #1
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	e001      	b.n	800327a <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003276:	2300      	movs	r3, #0
 8003278:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	f040 8094 	bne.w	80033aa <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8003282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003286:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800328a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800328e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	f042 0210 	orr.w	r2, r2, #16
 8003298:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800329a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800329e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80032a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	f022 0203 	bic.w	r2, r2, #3
 80032b0:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80032b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80032ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	f042 0202 	orr.w	r2, r2, #2
 80032c8:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80032ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80032d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80032da:	6852      	ldr	r2, [r2, #4]
 80032dc:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80032de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80032e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80032ee:	6852      	ldr	r2, [r2, #4]
 80032f0:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80032f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80032fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003302:	6852      	ldr	r2, [r2, #4]
 8003304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003308:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800330a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800330e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003312:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003316:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800331a:	6852      	ldr	r2, [r2, #4]
 800331c:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8003320:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8003322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003326:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800332a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800332e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003332:	6852      	ldr	r2, [r2, #4]
 8003334:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8003338:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800333a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800333e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003342:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003346:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003350:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003352:	bf00      	nop
 8003354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003358:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f6      	beq.n	8003354 <SetSysClockTo72+0x140>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800336e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003372:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003376:	6852      	ldr	r2, [r2, #4]
 8003378:	f022 0203 	bic.w	r2, r2, #3
 800337c:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800337e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003382:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800338a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800338e:	6852      	ldr	r2, [r2, #4]
 8003390:	f042 0202 	orr.w	r2, r2, #2
 8003394:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8003396:	bf00      	nop
 8003398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800339c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d1f6      	bne.n	8003398 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	08003418 	.word	0x08003418
 80033b8:	200001d0 	.word	0x200001d0
 80033bc:	200001f8 	.word	0x200001f8
 80033c0:	200001f8 	.word	0x200001f8
 80033c4:	200001fc 	.word	0x200001fc

080033c8 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80033c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80033ca:	f000 b804 	b.w	80033d6 <LoopCopyDataInit>

080033ce <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <LoopFillZerobss+0x12>)
	ldr	r3, [r3, r1]
 80033d0:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80033d2:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80033d4:	3104      	adds	r1, #4

080033d6 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80033d6:	480b      	ldr	r0, [pc, #44]	; (8003404 <LoopFillZerobss+0x16>)
	ldr	r3, =_edata
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <LoopFillZerobss+0x1a>)
	adds	r2, r0, r1
 80033da:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80033dc:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80033de:	f4ff aff6 	bcc.w	80033ce <CopyDataInit>
	ldr	r2, =_sbss
 80033e2:	4a0a      	ldr	r2, [pc, #40]	; (800340c <LoopFillZerobss+0x1e>)
	b	LoopFillZerobss
 80033e4:	f000 b803 	b.w	80033ee <LoopFillZerobss>

080033e8 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80033e8:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80033ea:	f842 3b04 	str.w	r3, [r2], #4

080033ee <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <LoopFillZerobss+0x22>)
	cmp	r2, r3
 80033f0:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80033f2:	f4ff aff9 	bcc.w	80033e8 <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 80033f6:	f7ff fe1d 	bl	8003034 <SystemInit>
/* Call static constructors */
/*  bl __libc_init_array  */
/* Call the application's entry point.*/
	bl	main
 80033fa:	f7fc ff23 	bl	8000244 <main>
	bx	lr
 80033fe:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8003400:	08003418 	.word	0x08003418
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003404:	200001d0 	.word	0x200001d0
	ldr	r3, =_edata
 8003408:	200001f8 	.word	0x200001f8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 800340c:	200001f8 	.word	0x200001f8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8003410:	200001fc 	.word	0x200001fc

08003414 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003414:	f7ff bffe 	b.w	8003414 <ADC1_IRQHandler>
